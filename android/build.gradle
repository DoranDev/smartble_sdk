import java.security.MessageDigest
import java.security.NoSuchAlgorithmException

group 'id.kakzaki.smartble_sdk'
version '1.0-SNAPSHOT'

buildscript {

    ext.kotlin_version = '1.7.20'
    ext.appcompat_version = '1.4.0'
    ext.androidxcore_version = '1.8.0'
    ext.utilcodex_version = '1.31.0'
    ext.gson_version = '2.8.6'
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

String localMavenPath = project.mkdir("build").absolutePath
rootProject.allprojects {
    repositories {
        google()
        maven { url "file://$localMavenPath" }
        mavenCentral()
    }
}


allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    namespace 'id.kakzaki.smartble_sdk'
    compileSdk 34

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main.assets.srcDirs = ['assets']
        main.jniLibs.srcDirs = ['libs']
//        main.resources.srcDirs = ['AndroidBaseBle','AndroidSmaBle','AndroidDfuLib']
    }


    defaultConfig {
        minSdkVersion 21
        multiDexEnabled true
        ndkVersion '25.1.8937393'
    }

//    externalNativeBuild {
//        cmake {
//            path "src/main/jni/CMakeLists.txt"
//        }
//
//    }
}

dependencies {
//    implementation fileTree(dir: 'AndroidBaseBle', include: ['*.aar', '*.jar'], exclude: [])
//    implementation fileTree(dir: 'AndroidSmaBle', include: ['*.aar', '*.jar'], exclude: [])
//    implementation fileTree(dir: 'AndroidDfuLib', include: ['*.aar', '*.jar'], exclude: [])
    implementation "com.blankj:utilcodex:$utilcodex_version"
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'no.nordicsemi.android:dfu:1.12.0'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation 'android.arch.lifecycle:livedata:1.1.1'
//    api("com.adups.iot:iot_libs:1.3.3_smawatch") {
//        exclude group: 'com.android.support'
//    }
    //以下为杰里sdk需要的库
    implementation "androidx.room:room-runtime:2.4.3"

//    implementation(name: 'jldecryption_v0.2-release', ext: 'aar')
//    implementation(name: 'jl_rcsp_V0.3.0-release', ext: 'aar')
//    implementation(name: 'jl_bluetooth_connect_V1.1.4-release', ext: 'aar')
//    implementation(name: 'jl_bt_ota_V1.8.0-release', ext: 'aar')
//    implementation(name: 'libble-0.4', ext: 'aar')
//    implementation(name: 'libdfu-1.4', ext: 'aar')
//    implementation(name: 'libfastdfu-0.4', ext: 'aar')

    implementation("androidx.multidex:multidex:2.0.1")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.core:core-ktx:$androidxcore_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "androidx.media2:media2-session:1.1.3"
    implementation "androidx.annotation:annotation:1.5.0"
    implementation 'com.google.firebase:firebase-crashlytics-buildtools:2.9.9'
    implementation 'com.google.androidbrowserhelper:androidbrowserhelper:2.5.0'
}

String aarPath = localMavenPath
task useAar {
    File file = project.file("libs")
    if (file.exists() && file.isDirectory()) {
        file.listFiles(new FileFilter() {
            @Override
            boolean accept(File pathname) {
                return pathname.name.endsWith(".aar")
            }
        }).each { item ->
            String aarName = item.name.substring(0, item.name.length() - 4)
            String[] aarInfo = aarName.split("-")
            String sha1 = getFileSha1(item)
            String md5 = getFileMD5(item)
            println("aar: " + aarInfo + " file sha1:" + sha1 + " md5:" + md5)
            String fromStr = item.path
            String intoStr = aarPath + "/" + aarInfo[0].replace(".", "/") + "/" + aarInfo[1] + "/" + aarInfo[2]
            String newName = aarInfo[1] + "-" + aarInfo[2] + ".aar"

            project.copy {
                from fromStr
                into intoStr
                rename(item.name, newName)
            }

            project.file(intoStr + "/" + newName + ".md5").write(md5)
            project.file(intoStr + "/" + newName + ".sha1").write(sha1)

            String pomPath = intoStr + "/" + newName.substring(0, newName.length() - 4) + ".pom"
            project.file(pomPath).write(createPomStr(aarInfo[0], aarInfo[1], aarInfo[2]))
            project.file(pomPath + ".md5").write(getFileMD5(project.file(pomPath)))
            project.file(pomPath + ".sha1").write(getFileSha1(project.file(pomPath)))

            String metadataPath = project.file(intoStr).getParentFile().path + "/maven-metadata.xml"
            project.file(metadataPath).write(createMetadataStr(aarInfo[0], aarInfo[1], aarInfo[2]))
            project.file(metadataPath + ".md5").write(getFileMD5(project.file(metadataPath)))
            project.file(metadataPath + ".sha1").write(getFileSha1(project.file(metadataPath)))
            dependencies {
                implementation "${aarInfo[0]}:${aarInfo[1]}:${aarInfo[2]}"
            }
        }
    }
}

public static String createMetadataStr(String groupId, String artifactId, String version) {
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<metadata>\n" +
            "  <groupId>$groupId</groupId>\n" +
            "  <artifactId>$artifactId</artifactId>\n" +
            "  <versioning>\n" +
            "    <release>$version</release>\n" +
            "    <versions>\n" +
            "      <version>$version</version>\n" +
            "    </versions>\n" +
            "    <lastUpdated>${new Date().format('yyyyMMdd')}000000</lastUpdated>\n" +
            "  </versioning>\n" +
            "</metadata>\n"
}

public static String createPomStr(String groupId, String artifactId, String version) {
    return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
            "<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n" +
            "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n" +
            "  <modelVersion>4.0.0</modelVersion>\n" +
            "  <groupId>$groupId</groupId>\n" +
            "  <artifactId>$artifactId</artifactId>\n" +
            "  <version>$version</version>\n" +
            "  <packaging>aar</packaging>\n" +
            "</project>\n"
}

public static String getFileSha1(File file) {
    FileInputStream input = null;
    try {
        input = new FileInputStream(file);
        MessageDigest digest = MessageDigest.getInstance("SHA-1");
        byte[] buffer = new byte[1024 * 1024 * 10];

        int len = 0;
        while ((len = input.read(buffer)) > 0) {
            digest.update(buffer, 0, len);
        }
        String sha1 = new BigInteger(1, digest.digest()).toString(16);
        int length = 40 - sha1.length();
        if (length > 0) {
            for (int i = 0; i < length; i++) {
                sha1 = "0" + sha1;
            }
        }
        return sha1;
    }
    catch (IOException e) {
        System.out.println(e);
    }
    catch (NoSuchAlgorithmException e) {
        System.out.println(e);
    }
    finally {
        try {
            if (input != null) {
                input.close();
            }
        }
        catch (IOException e) {
            System.out.println(e);
        }
    }
}

public static String getFileMD5(File file) {
    FileInputStream input = null;
    try {
        input = new FileInputStream(file);
        MessageDigest digest = MessageDigest.getInstance("MD5");
        byte[] buffer = new byte[1024 * 1024 * 10];

        int len = 0;
        while ((len = input.read(buffer)) > 0) {
            digest.update(buffer, 0, len);
        }
        String md5 = new BigInteger(1, digest.digest()).toString(16);
        int length = 32 - md5.length();
        if (length > 0) {
            for (int i = 0; i < length; i++) {
                md5 = "0" + md5;
            }
        }
        return md5;
    }
    catch (IOException e) {
        System.out.println(e);
    }
    catch (NoSuchAlgorithmException e) {
        System.out.println(e);
    }
    finally {
        try {
            if (input != null) {
                input.close();
            }
        }
        catch (IOException e) {
            System.out.println(e);
        }
    }
}
