// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SmartWatchCodingBleKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import Foundation
import JL_BLEKit
import JL_HashPair
import JL_OTALib
import SSZipArchive
@_exported import SmartWatchCodingBleKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc @_inheritsConvenienceInitializers open class BleHrMonitoringSettings : SmartWatchCodingBleKit.BleWritable {
  @objc public var mBleTimeRange: SmartWatchCodingBleKit.BleTimeRange
  @objc public var mInterval: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleHrMonitoringSettings
  @objc deinit
}
public enum FileCompanion : Swift.Int {
  case AUDIO, WAV, BIN
  case BMP
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleFileTransmission : SmartWatchCodingBleKit.BleReadable {
  public var mFileType: Swift.Int
  public var mTime: Swift.Int
  public var mFileIndex: Swift.Int
  public var mFileFormat: Swift.Int
  public var mFileSize: Swift.Int
  public var mFileOffset: Swift.Int
  public var mFileData: Foundation.Data
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum BleContactSortType : Swift.Int {
  case TYPE_0
  case TYPE_1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleContactSort : SmartWatchCodingBleKit.BleWritable {
  public var mSortType: Swift.Int
  public var mSortItems: [SmartWatchCodingBleKit.BleContactSortItem]
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleBodyStatus : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mValue: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BlePackageStatus : SmartWatchCodingBleKit.BleReadable {
  public var mFontPackageStatus: Swift.Int
  public var mUIPackageStatus: Swift.Int
  public var mLanguagePackageStatus: Swift.Int
  public var mByte: Foundation.Data?
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleRange : SmartWatchCodingBleKit.BleWritable {
  public var mStart: Swift.Int
  public var mEnd: Swift.Int
  public init(_ mStart: Swift.Int, _ mEnd: Swift.Int)
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public enum BleNavigationState : Swift.Int {
  case NAVI_START
  case NAVI_GOING
  case NAVI_PAUSE
  case NAVI_RESUME
  case NAVI_END
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BleNavTurnType : Swift.Int {
  case TURN_ALONG
  case TURN_BACK
  case TURN_BACK_2BRANCH_LEFT
  case TURN_BACK_2BRANCH_RIGHT
  case TURN_BACK_3BRANCH_CENTER
  case TURN_BACK_3BRANCH_LEFT
  case TURN_BACK_3BRANCH_RIGHT
  case TURN_BRANCH_CENTER
  case TURN_BRANCH_LEFT
  case TURN_BRANCH_LEFT_STRAIGHT
  case TURN_BRANCH_RIGHT
  case TURN_BRANCH_RIGHT_STRAIGHT
  case TURN_DEST
  case TURN_FRONT
  case TURN_INFERRY
  case TURN_LB_2BRANCH_LEFT
  case TURN_LB_2BRANCH_RIGHT
  case TURN_LB_3BRANCH_CENTER
  case TURN_LB_3BRANCH_LEFT
  case TURN_LB_3BRANCH_RIGHT
  case TURN_LEFT
  case TURN_LEFT_BACK
  case TURN_LEFT_FRONT
  case TURN_LEFT_SIDE
  case TURN_LEFT_SIDE_IC
  case TURN_LEFT_SIDE_MAIN
  case TURN_LF_2BRANCH_LEFT
  case TURN_LF_2BRANCH_RIGHT
  case TURN_RB_2BRANCH_LEFT
  case TURN_RB_2BRANCH_RIGHT
  case TURN_RB_3BRANCH_CENTER
  case TURN_RB_3BRANCH_LEFT
  case TURN_RB_3BRANCH_RIGHT
  case TURN_RF_2BRANCH_LEFT
  case TURN_RF_2BRANCH_RIGHT
  case TURN_RIGHT
  case TURN_RIGHT_BACK
  case TURN_RIGHT_FRONT
  case TURN_RIGHT_SIDE
  case TURN_RIGHT_SIDE_IC
  case TURN_RIGHT_SIDE_MAIN
  case TURN_RING
  case TURN_RING_FRONT
  case TURN_RING_LEFT
  case TURN_RING_LEFTBACK
  case TURN_RING_LEFTFRONT
  case TURN_RING_RIGHT
  case TURN_RING_RIGHTBACK
  case TURN_RING_RIGHTFRONT
  case TURN_RING_TURNBACK
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BleNaviMode : Swift.Int {
  case text
  case image
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleNaviInfo : SmartWatchCodingBleKit.BleWritable {
  public var mState: SmartWatchCodingBleKit.BleNavigationState
  public var mTime: Swift.Int
  public var mTurnType: SmartWatchCodingBleKit.BleNavTurnType
  public var mRemainDistance: Swift.Int
  public var mRemainTime: Swift.Int
  public var mDistance: Swift.Int
  public var mSpeed: Swift.Int
  public var mMode: SmartWatchCodingBleKit.BleNaviMode
  public var mRoadName: Swift.String
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleNaviImage : SmartWatchCodingBleKit.BleWritable {
  public var mImageBuffers: Foundation.Data
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMatchRecordPlayer : SmartWatchCodingBleKit.BleReadable {
  public var mName: Swift.String
  public var mNum: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ABHBleLog : ObjectiveC.NSObject {
  public static let share: SmartWatchCodingBleKit.ABHBleLog
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleSOSSettings : SmartWatchCodingBleKit.BleWritable {
  @objc public var mEnabled: Swift.Int
  @objc public var mPhone: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleBloodOxyGenSettings : SmartWatchCodingBleKit.BleWritable {
  public var mBleTimeRange: SmartWatchCodingBleKit.BleTimeRange
  public var mInterval: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BleWatchFaceBinElementInfo : SmartWatchCodingBleKit.BleWritable {
  public static let ITEM_LENGTH: Swift.Int
  public var infoImageBufferOffset: Swift.UInt32
  public var infoImageSizeIndex: Swift.UInt16
  public var infoW: Swift.UInt16
  public var infoH: Swift.UInt16
  public var infoX: Swift.UInt16
  public var infoY: Swift.UInt16
  public var infoImageCount: Swift.UInt8
  public var infoType: Swift.UInt8
  public var infoGravity: Swift.UInt8
  public var infoIgnoreBlack: Swift.UInt8
  public var infoBottomOffset: Swift.UInt8
  public var infoLeftOffset: Swift.UInt8
  public var infoReserved: Swift.UInt8
  public init(imageBufferOffset: Swift.UInt32, imageSizeIndex: Swift.UInt16, w: Swift.UInt16, h: Swift.UInt16, x: Swift.UInt16, y: Swift.UInt16, imageCount: Swift.UInt8, type: Swift.UInt8, gravity: Swift.UInt8, ignoreBlack: Swift.UInt8, bottomOffset: Swift.UInt8, leftOffset: Swift.UInt8, reserved: Swift.UInt8)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleContactSortItem : SmartWatchCodingBleKit.BleWritable {
  public var mCat: Swift.String
  public var mSize: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc public protocol BleHandleDelegate {
  @objc optional func onDeviceConnected(_ peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func onDeviceConnecting(_ status: Swift.Bool)
  @objc optional func onIdentityCreate(_ status: Swift.Bool, _ deviceInfo: SmartWatchCodingBleKit.BleDeviceInfo?)
  @objc optional func onIdentityDelete(_ status: Swift.Bool)
  @objc optional func onIdentityDeleteByDevice(_ status: Swift.Bool)
  @objc optional func onReadDeviceInfo(_ status: Swift.Bool, _ deviceInfo: SmartWatchCodingBleKit.BleDeviceInfo)
  @objc optional func onReadDeviceInfo2(_ deviceInfo2: SmartWatchCodingBleKit.BleDeviceInfo2)
  @objc optional func onSessionStateChange(_ status: Swift.Bool)
  @objc optional func onCommandReply(_ bleKey: Swift.Int, _ bleKeyFlag: Swift.Int, _ status: Swift.Bool)
  @objc optional func onOTA(_ status: Swift.Bool)
  @objc optional func onReadMtkOtaMeta()
  @objc optional func onXModem(_ status: Swift.UInt8)
  @objc optional func onTimeUpdate()
  @objc optional func onReadPower(_ power: Swift.Int)
  @objc optional func onReadFirmwareVersion(_ version: Swift.String)
  @objc optional func onReadBleAddress(_ address: Swift.String)
  @objc optional func onReadSedentariness(_ sedentarinessSettings: SmartWatchCodingBleKit.BleSedentarinessSettings)
  @objc optional func onReadNoDisturb(_ noDisturbSettings: SmartWatchCodingBleKit.BleNoDisturbSettings)
  @objc optional func onNoDisturbUpdate(_ noDisturbSettings: SmartWatchCodingBleKit.BleNoDisturbSettings)
  @objc optional func onReadAlarm(_ alarms: [SmartWatchCodingBleKit.BleAlarm])
  @objc optional func onAlarmUpdate(_ alarm: SmartWatchCodingBleKit.BleAlarm)
  @objc optional func onAlarmDelete(_ id: Swift.Int)
  @objc optional func onAlarmAdd(_ alarm: SmartWatchCodingBleKit.BleAlarm)
  @objc optional func onReadMedicationAlarm(_ medicationAlarm: [SmartWatchCodingBleKit.BleMedicationAlarm])
  @objc optional func onMedicationAlarmUpdate(_ medicationAlarm: SmartWatchCodingBleKit.BleMedicationAlarm)
  @objc optional func onMedicationAlarmDelete(_ id: Swift.Int)
  @objc optional func onMedicationAlarmAdd(_ medicationAlarm: SmartWatchCodingBleKit.BleMedicationAlarm)
  @objc optional func onReadCoachingIds(_ coachingIds: SmartWatchCodingBleKit.BleCoachingIds)
  @objc optional func onFindPhone(_ start: Swift.Bool)
  @objc optional func onFindWatchUpdate(_ start: Swift.Int)
  @objc optional func onReadUiPackVersion(_ version: Swift.String)
  @objc optional func onReadLanguagePackVersion(_ version: SmartWatchCodingBleKit.BleLanguagePackVersion)
  @objc optional func onReadGPSFirmwareVersion(_ version: Swift.String)
  @objc optional func onSyncData(_ syncState: Swift.Int, _ bleKey: Swift.Int)
  @objc optional func onReadActivity(_ activities: [SmartWatchCodingBleKit.BleActivity])
  @objc optional func onReadHeartRate(_ heartRates: [SmartWatchCodingBleKit.BleHeartRate])
  @objc optional func onReadBloodPressure(_ bloodPressures: [SmartWatchCodingBleKit.BleBloodPressure])
  @objc optional func onReadSleep(_ sleeps: [SmartWatchCodingBleKit.BleSleep])
  @objc optional func onReadSleepQuality(_ sleepQuality: SmartWatchCodingBleKit.BleSleepQuality)
  @objc optional func onReadWorkOut(_ WorkOut: [SmartWatchCodingBleKit.BleWorkOut])
  @objc optional func onReadWorkOut2(_ WorkOut: [SmartWatchCodingBleKit.BleWorkOut2])
  @objc optional func onReadWorkOut3(_ WorkOut: [SmartWatchCodingBleKit.BleWorkOut3])
  @objc optional func onReadMatchRecord(_ matchRecord: [SmartWatchCodingBleKit.BleMatchRecord])
  @objc optional func onReadMatchRecord2(_ matchRecord2: [SmartWatchCodingBleKit.BleMatchRecord2])
  @objc optional func onReadLocation(_ locations: [SmartWatchCodingBleKit.BleLocation])
  @objc optional func onReadTemperature(_ temperatures: [SmartWatchCodingBleKit.BleTemperature])
  @objc optional func onReadBloodOxygen(_ BloodOxygen: [SmartWatchCodingBleKit.BleBloodOxygen])
  @objc optional func onReadBloodGlucose(_ bloodGlucose: [SmartWatchCodingBleKit.BleBloodGlucose])
  @objc optional func onReadHeartRateVariability(_ HeartRateVariability: [SmartWatchCodingBleKit.BleHeartRateVariability])
  @objc optional func onReadTemperatureUnitSettings(_ value: Swift.Int)
  @objc optional func onReadDateFormatSettings(_ status: Swift.Int)
  @objc optional func onReadAerobicSettings(_ AerobicSettings: SmartWatchCodingBleKit.BleAerobicSettings)
  @objc optional func onReadPressures(_ pressures: [SmartWatchCodingBleKit.BlePressure])
  @objc optional func onCameraStateChange(_ cameraState: Swift.Int)
  @objc optional func onPhoneGPSSport(_ workoutState: Swift.Int)
  @objc optional func onCameraResponse(_ status: Swift.Bool, _ cameraState: Swift.Int)
  @objc optional func onStreamProgress(_ status: Swift.Bool, _ errorCode: Swift.Int, _ total: Swift.Int, _ completed: Swift.Int)
  @objc optional func onDeviceRequestAGpsFile(_ url: Swift.String)
  @objc optional func onReadMediaFile(_ media: SmartWatchCodingBleKit.BleFileTransmission)
  @objc optional func onMediaFileUpdate(_ media: SmartWatchCodingBleKit.BleFileTransmission)
  @objc optional func onReadSleepRaw(_ sleepRawData: Foundation.Data)
  @objc optional func onFollowSystemLanguage(_ systemLanguage: Swift.Bool)
  @objc optional func onReadWeatherRealtime(_ update: Swift.Bool)
  @objc optional func onReadDataLog(_ logs: [SmartWatchCodingBleKit.BleLogText])
  @objc optional func onReadWatchFaceSwitch(_ value: Swift.Int)
  @objc optional func onUpdateWatchFaceSwitch(_ status: Swift.Bool)
  @objc optional func onRequestAgpsPrerequisite()
  @objc optional func onReadDrinkWaterSettings(_ drinkWater: SmartWatchCodingBleKit.BleDrinkWaterSettings)
  @objc optional func onReadBloodOxyGenSettings(_ bloodOxyGenSet: SmartWatchCodingBleKit.BleBloodOxyGenSettings)
  @objc optional func onReadWashSettings(_ washSet: SmartWatchCodingBleKit.BleWashSettings)
  @objc optional func onUpdateSettings(_ bleKey: SmartWatchCodingBleKit.BleKey.RawValue)
  @objc optional func onUpdateHeartReate(_ heartRate: SmartWatchCodingBleKit.BleHeartRate)
  @objc optional func onUpdateRealTimeTemperature(_ temperature: SmartWatchCodingBleKit.BleTemperature)
  @objc optional func onUpdateRealTimeBloodPressure(_ bloodPressures: SmartWatchCodingBleKit.BleBloodPressure)
  @objc optional func onUpdateAppSportState(_ status: SmartWatchCodingBleKit.BleAppSportState)
  @objc optional func onVibrationUpdate(_ value: Swift.Int)
  @objc optional func onReadiBeaconStatus(_ value: Swift.Int)
  @objc optional func onReadWatchFaceId(_ watchFaceId: SmartWatchCodingBleKit.BleWatchFaceId)
  @objc optional func onWatchFaceIdUpdate(_ status: Swift.Bool)
  @objc optional func onCommandSendTimeout(_ bleKey: Swift.Int, _ bleKeyFlag: Swift.Int)
  @objc optional func onReadWorldClock(_ worldClocks: [SmartWatchCodingBleKit.BleWorldClock])
  @objc optional func onWorldClockDelete(_ clockID: Swift.Int)
  @objc optional func onReadStock(_ stocks: [SmartWatchCodingBleKit.BleStock])
  @objc optional func onStockDelete(_ stockID: Swift.Int)
  @objc optional func onDeviceReadStock(_ status: Swift.Bool)
  @objc optional func onRealTimeMeasurement(_ measurement: SmartWatchCodingBleKit.BleRealTimeMeasurement)
  @objc optional func onPowerSaveModeState(_ state: Swift.Int)
  @objc optional func onPowerSaveModeStateChange(_ state: Swift.Int)
  @objc optional func onBacklightUpdate(_ value: Swift.Int)
  @objc optional func onReadGestureWake(_ bleGestureWake: SmartWatchCodingBleKit.BleGestureWake)
  @objc optional func onGestureWakeUpdate(_ bleGestureWake: SmartWatchCodingBleKit.BleGestureWake)
  @objc optional func onDoubleScreenUpdate(_ bleDoubleScreen: SmartWatchCodingBleKit.BleDoubleScreenSettings)
  @objc optional func onReadDoubleScreen(_ bleDoubleScreen: SmartWatchCodingBleKit.BleDoubleScreenSettings)
  @objc optional func onReadLoveTapUser(_ loveTapUsers: [SmartWatchCodingBleKit.BleLoveTapUser])
  @objc optional func onLoveTapUserUpdate(_ loveTapUser: SmartWatchCodingBleKit.BleLoveTapUser)
  @objc optional func onLoveTapUpdate(_ loveTap: SmartWatchCodingBleKit.BleLoveTap)
  @objc optional func onLoveTapUserDelete(_ id: Swift.Int)
  @objc optional func onReadMedicationReminder(_ medicationReminders: [SmartWatchCodingBleKit.BleMedicationReminder])
  @objc optional func onMedicationReminderUpdate(_ medicationReminder: SmartWatchCodingBleKit.BleMedicationReminder)
  @objc optional func onMedicationReminderDelete(_ id: Swift.Int)
  @objc optional func onReadHrMonitoringSettings(_ hrMonitoringSettings: SmartWatchCodingBleKit.BleHrMonitoringSettings)
  @objc optional func onReadUnit(_ temperatureFormat: Swift.Int)
  @objc optional func onBleThirdPartyDataUpdate(_ bleThirdPartyData: SmartWatchCodingBleKit.BleThirdPartyData)
  @objc optional func onReadBodyStatus(_ bodyStatus: [SmartWatchCodingBleKit.BleBodyStatus])
  @objc optional func onReadMindStatus(_ mindStatus: [SmartWatchCodingBleKit.BleMindStatus])
  @objc optional func onReadCalorieIntake(_ calorieIntakes: [SmartWatchCodingBleKit.BleCalorieIntake])
  @objc optional func onReadFoodBalance(_ foodBalances: [SmartWatchCodingBleKit.BleFoodBalance])
  @objc optional func onReadBAC(_ bacs: [SmartWatchCodingBleKit.BleBAC])
  @objc optional func onUpdateBAC(_ bacs: [SmartWatchCodingBleKit.BleBAC])
  @objc optional func onReadAvgHeartRate(_ heartRates: [SmartWatchCodingBleKit.BleAvgHeartRate])
  @objc optional func onReadPackageStatus(_ packageStatus: SmartWatchCodingBleKit.BlePackageStatus)
  @objc optional func onReadAlipaySettings(_ alipaySettings: SmartWatchCodingBleKit.BleAlipaySettings)
  @objc optional func onReadUserPorfile(_ userProfile: SmartWatchCodingBleKit.BleUserProfile)
  @objc optional func onReadStepGoal(_ stepGoal: Swift.Int)
  @objc optional func onReadHourSystem(_ value: Swift.Int)
  @objc optional func onHourSystemUpdate(_ value: Swift.Int)
  @objc optional func onSportEndNotifyUpdate(_ value: Swift.Int)
  @objc optional func onReadBacklight(_ value: Swift.Int)
  @objc optional func onReadCaloriesGoal(_ value: Swift.Int)
  @objc optional func onReadDistanceGoal(_ value: Swift.Int)
  @objc optional func onReadSleepGoal(_ value: Swift.Int)
  @objc optional func onReadSportDurationGoal(_ value: Swift.Int)
  @objc optional func onReadWatchPassword(_ watchPassword: SmartWatchCodingBleKit.BleSettingWatchPassword)
  @objc optional func onWatchPasswordUpdate(_ watchPassword: SmartWatchCodingBleKit.BleSettingWatchPassword)
  @objc optional func onReceiveRecordPacket(_ recordPacket: SmartWatchCodingBleKit.BleRecordPacket)
  @objc optional func onNavigationState(_ naviInfo: SmartWatchCodingBleKit.BleNaviInfo)
  @objc optional func onBWNaviInfoState(_ bwNaviInfo: SmartWatchCodingBleKit.BleBWNaviInfo)
  @objc optional func onReadDeviceLanguages(_ deviceLanguages: SmartWatchCodingBleKit.BleDeviceLanguages)
  @objc optional func onReadSOSSettings(_ sosSettings: SmartWatchCodingBleKit.BleSOSSettings)
  @objc optional func onSOSUpdate(_ sosSettings: SmartWatchCodingBleKit.BleSOSSettings)
  @objc optional func onReadGirlCareSettings(_ healthCare: SmartWatchCodingBleKit.BleHealthCare)
  @objc optional func onReadLanguages(_ value: Swift.Int)
  @objc optional func onReadGameTimeReminder(_ gameTimeReminder: SmartWatchCodingBleKit.BleGameTimeReminder)
  @objc optional func onDeviceSportDataUpdate(_ deviceSportData: SmartWatchCodingBleKit.BleDeviceSportData)
  @objc optional func onReadGirlCarePeriod(_ girlCarePeriod: SmartWatchCodingBleKit.BleGirlCarePeriod)
  @objc optional func onGirlCarePeriodUpdate(_ girlCarePeriod: SmartWatchCodingBleKit.BleGirlCarePeriod)
  @available(iOS 13.0, *)
  @objc optional func didUpdateANCSAuthorization(_ peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func onStepGoalUpdate(_ value: Swift.Int)
  @objc optional func onCaloriesGoalUpdate(_ value: Swift.Int)
  @objc optional func onDistanceGoalUpdate(_ value: Swift.Int)
  @objc optional func onDurationGoalUpdate(_ value: Swift.Int)
  @objc optional func onReadAlipayBindInfo(_ alipayBindInfos: [SmartWatchCodingBleKit.BleAlipayBindInfo])
  @objc optional func onReadPressureTimingMeasurement(_ pressureTimingMeasurement: SmartWatchCodingBleKit.BlePressureTimingMeasurement)
  @objc optional func onReadStandbyWatchFaceSet(_ standbyWatchFaceSet: SmartWatchCodingBleKit.BleStandbyWatchFaceSet)
  @objc optional func onStandbyWatchFaceSetUpdate(_ standbyWatchFaceSet: SmartWatchCodingBleKit.BleStandbyWatchFaceSet)
  @objc optional func onReadClassicBluetoothState(_ state: Swift.Int)
  @objc optional func onClassicBluetoothStateChange(_ state: Swift.Int)
  @objc optional func onReadNotificationSettings2(_ notificationSettings2: SmartWatchCodingBleKit.BleNotificationSettings2)
  @objc optional func onNotificationSettings2Update(_ notificationSettings2: SmartWatchCodingBleKit.BleNotificationSettings2)
  @objc optional func onReadFallSet(_ state: Swift.Int)
  @objc optional func onFallSetUpdate(_ state: Swift.Int)
  @objc optional func onReadSDCardInfo(_ sdCardInfo: SmartWatchCodingBleKit.BleSDCardInfo)
  @objc optional func onSDCardInfoUpdate(_ sdCardInfo: SmartWatchCodingBleKit.BleSDCardInfo)
  @objc optional func onReadActivityDetail(_ activityDetail: SmartWatchCodingBleKit.BleActivityDetail)
  @objc optional func onReadIncomingCallRing(_ value: Swift.Int)
  @objc optional func onIncomingCallRingUpdate(_ value: Swift.Int)
  @objc optional func onReadNotificationLightScreenSet(_ value: Swift.Int)
  @objc optional func onNotificationLightScreenSetUpdate(_ value: Swift.Int)
  @objc optional func onReadEarphonePower(_ earphonePowers: SmartWatchCodingBleKit.BleEarphonePower)
  @objc optional func onReadEarphoneAncSettings(_ earphoneAncSettings: SmartWatchCodingBleKit.BleEarphoneAncSettings)
  @objc optional func onEarphoneAncSettingsUpdate(_ earphoneAncSettings: SmartWatchCodingBleKit.BleEarphoneAncSettings)
  @objc optional func onReadEarphoneInfo(_ earphoneInfo: SmartWatchCodingBleKit.BleEarphoneInfo)
  @objc optional func onReadEarphoneState(_ earphoneState: SmartWatchCodingBleKit.BleEarphoneState)
  @objc optional func onEarphoneStateUpdate(_ earphoneState: SmartWatchCodingBleKit.BleEarphoneState)
  @objc optional func onReadEarphoneCall(_ value: Swift.Int)
  @objc optional func onEarphoneCallUpdate(_ value: Swift.Int)
  @objc optional func onEarphoneSoundEffectsSettingsUpdate(_ earphoneSoundEffectsSettings: SmartWatchCodingBleKit.BleEarphoneSoundEffectsSettings)
  @objc optional func onReadGoMoreSettings(_ goMoreSettings: SmartWatchCodingBleKit.BleGoMoreSettings)
  @objc optional func onReadRingVibrationSet(_ ringVibrationSettings: SmartWatchCodingBleKit.BleRingVibrationSettings)
  @objc optional func onRingVibrationSetUpdate(_ ringVibrationSettings: SmartWatchCodingBleKit.BleRingVibrationSettings)
  @objc optional func onReadBloodPressureCalibration(_ value: Swift.Int)
  @objc optional func onReadFilePath(_ filelist: SmartWatchCodingBleKit.BleFileList)
  @objc optional func onReadHeadphoneScreenBrightness(_ value: Swift.Int)
  @objc optional func onHeadphoneScreenBrightnessUpdate(_ value: Swift.Int)
  @objc optional func onReadNetworkFirmwareVersion(_ version: Swift.String)
  @objc optional func onReadEcgSettings(_ ecgSettings: SmartWatchCodingBleKit.BleEcgSettings)
  @objc optional func onReadEcg(_ ecgSettings: [SmartWatchCodingBleKit.BleEcg])
  @objc optional func onReadHanBaoVibration(_ hanBaoVibrations: [SmartWatchCodingBleKit.BleHanBaoVibration])
  @objc optional func onWatchFaceIndexCreate(_ state: Swift.Bool)
  @objc optional func onReadWatchFaceIndex(_ watchFaceIndex: SmartWatchCodingBleKit.BleWatchFaceIndex)
  @objc optional func onWatchFaceIndexUpdate(_ watchFaceIndex: SmartWatchCodingBleKit.BleWatchFaceIndex)
  @objc optional func onReadSosContact(_ sosContact: SmartWatchCodingBleKit.BleSosContact)
  @objc optional func onSosContactUpdate(_ sosContact: SmartWatchCodingBleKit.BleSosContact)
  @objc optional func onReadGirlCareMonthly(_ girlCareMonthly: SmartWatchCodingBleKit.BleGirlCareMonthly)
  @objc optional func onReadCheckInEveryDay(_ checkInEveryDay: SmartWatchCodingBleKit.BleCheckInEveryDay)
  @objc optional func onCheckInEveryDayUpdate(_ checkInEveryDay: SmartWatchCodingBleKit.BleCheckInEveryDay)
  @objc optional func onReadSosCallLog(_ sosCallLogArray: [SmartWatchCodingBleKit.BleSosCallLog])
  @objc optional func onReadGestureWake2(_ gestureWake2: SmartWatchCodingBleKit.BleGestureWake2)
  @objc optional func onGestureWake2Update(_ gestureWake2: SmartWatchCodingBleKit.BleGestureWake2)
  @objc optional func onReadEarphoneKey(_ earphoneKey: SmartWatchCodingBleKit.BleEarphoneKey)
  @objc optional func onEarphoneKeyUpdate(_ earphoneKey: SmartWatchCodingBleKit.BleEarphoneKey)
  @objc optional func onReadFindEarphone(_ findEarphone: SmartWatchCodingBleKit.BleFindEarphone)
  @objc optional func onFindEarphoneUpdate(_ findEarphone: SmartWatchCodingBleKit.BleFindEarphone)
  @objc optional func onReadDeviceAppStoreInfo(_ deviceAppStoreInfoArr: [SmartWatchCodingBleKit.BleDeviceAppStoreInfo])
  @objc optional func onReadAppInfoList(_ appInfo: SmartWatchCodingBleKit.BleAppInfoList)
  @objc optional func onAppOpUpdate(_ appOp: SmartWatchCodingBleKit.BleAppOp)
  @objc optional func onReadHanBaoSettings(_ hanBaoSettings: SmartWatchCodingBleKit.BleHanBaoSettings)
  @objc optional func onHanBaoVibrationStateChange(_ value: Swift.Int)
  @objc optional func onReadQiblaSettings(_ qiblaSettings: SmartWatchCodingBleKit.BleQiblaSettings)
  @objc optional func onQiblaSettingsUpdate()
  @objc optional func onMeasurementUpdate(_ measurement: SmartWatchCodingBleKit.BleMeasurement)
}
extension Swift.String {
  public var bytes: Swift.Array<Swift.UInt8> {
    get
  }
  public subscript(bounds: Swift.CountableRange<Swift.Int>) -> Swift.String {
    get
  }
  public subscript(bounds: Swift.CountableClosedRange<Swift.Int>) -> Swift.String {
    get
  }
  public subscript(index: Swift.Int) -> Swift.String {
    get
  }
}
extension Foundation.Data {
  public var bytes: Swift.Array<Swift.UInt8> {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleBleAddress : SmartWatchCodingBleKit.BleReadable {
  public var mAddress: Swift.String
  public func decode()
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleHmTime : SmartWatchCodingBleKit.BleWritable {
  public var mHour: Swift.Int
  public var mMinute: Swift.Int
  public init(mHour: Swift.Int, mMinute: Swift.Int)
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleHmTime
  public func toDictionary() -> [Swift.String : Any]
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public enum BleMedicationType : Swift.Int {
  case TYPE_TABLET
  case TYPE_CAPSULE
  case TYPE_DROPS
  case TYPE_CREAM
  case TYPE_SPRAY
  case TYPE_SOLUTION
  case TYPE_INJECTABLE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BleMedicationUNIT : Swift.Int {
  case UNIT_MILLIGRAM
  case UNIT_MICROGRAM
  case UNIT_GRAM
  case UNIT_MILLILITER
  case UNIT_PERCENTAGE
  case UNIT_PIECE
  case UNIT_INTERNATIONAL
  case UNIT_MILLICURIE
  case UNIT_MILLIEQUIVALENT
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleMedicationReminder : SmartWatchCodingBleKit.BleIdObject {
  public var mType: Swift.Int
  public var mUnit: Swift.Int
  public var mDosage: Swift.Int
  public var mRepeat: Swift.Int
  public var mRemindTimes: Swift.Int
  public var mRemindTime1: SmartWatchCodingBleKit.BleHmTime
  public var mRemindTime2: SmartWatchCodingBleKit.BleHmTime
  public var mRemindTime3: SmartWatchCodingBleKit.BleHmTime
  public var mRemindTime4: SmartWatchCodingBleKit.BleHmTime
  public var mRemindTime5: SmartWatchCodingBleKit.BleHmTime
  public var mRemindTime6: SmartWatchCodingBleKit.BleHmTime
  public var mStartYear: Swift.Int
  public var mStartMonth: Swift.Int
  public var mStartDay: Swift.Int
  public var mEndYear: Swift.Int
  public var mEndMonth: Swift.Int
  public var mEndDay: Swift.Int
  public var mName: Swift.String
  public var mLabel: Swift.String
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleMedicationReminder
  public func toDictionary() -> [Swift.String : Any]
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleDeviceAppStoreInfo : SmartWatchCodingBleKit.BleReadable {
  public var mPackageName: Swift.String
  public var mVerApp: Swift.String
  public var mName: Swift.String
  public var mSize: Swift.Int
  public var mVerApiReq: Swift.String
  public var mPermissionsReq: Swift.Int
  public var mAttribute: Swift.Int
  public var mPlatform: Swift.Int
  public var mPeripheralReq: Swift.Int
  public var mResHorizontal: Swift.Int
  public var mResVertical: Swift.Int
  public static let ITEM_LENGTH: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAddressBook : SmartWatchCodingBleKit.BleWritable {
  public var addBook: [SmartWatchCodingBleKit.BleContactPerson]
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(array: [SmartWatchCodingBleKit.BleContactPerson])
  required public init(from decoder: any Swift.Decoder) throws
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleAddressBook
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleBloodPressureCalibration : SmartWatchCodingBleKit.BleWritable {
  public var mSystolic: Swift.Int
  public var mDiastolic: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public struct Element {
  public var type: Swift.UInt8
  public var isAlpha: Swift.UInt8
  public var w: Swift.UInt16
  public var h: Swift.UInt16
  public var gravity: Swift.UInt8
  public var ignoreBlack: Swift.UInt8
  public var x: Swift.UInt16
  public var y: Swift.UInt16
  public var bottomOffset: Swift.UInt8
  public var leftOffset: Swift.UInt8
  public var imageCount: Swift.UInt8
  public var imageSizes: [Swift.UInt32]
  public var imageBuffer: Foundation.Data
  public init(type: Swift.Int, isAlpha: Swift.UInt8)
  public mutating func setElementData(point: CoreFoundation.CGPoint, size: CoreFoundation.CGSize, ignoreBlack: Swift.Int, watchRes: SmartWatchCodingBleKit.WatchElementResult)
  public mutating func setElementForPointerData(isPoint: Swift.Bool, rawSize: CoreFoundation.CGSize, size: CoreFoundation.CGSize, watchRes: SmartWatchCodingBleKit.WatchElementResult)
}
@objc @_inheritsConvenienceInitializers open class BleWatchFaceBin : SmartWatchCodingBleKit.BleWritable {
  public var header: SmartWatchCodingBleKit.BleWatchFaceBinToHeader?
  public var ElementInfo: [SmartWatchCodingBleKit.BleWatchFaceBinElementInfo]
  public var imageCount: [Swift.UInt32]
  public var imageBuffer: Foundation.Data
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(mheader: SmartWatchCodingBleKit.BleWatchFaceBinToHeader, mElementInfo: [SmartWatchCodingBleKit.BleWatchFaceBinElementInfo], mImageCount: [Swift.UInt32], mImageBuffer: Foundation.Data)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class WatchFaceBuilder : ObjectiveC.NSObject {
  final public let PNG_ARGB_8888: Swift.Int
  final public let BMP_565: Swift.Int
  final public let GRAVITY_X_LEFT: Swift.Int
  final public let GRAVITY_X_RIGHT: Swift.Int
  final public let GRAVITY_X_CENTER: Swift.Int
  final public let GRAVITY_Y_TOP: Swift.Int
  final public let GRAVITY_Y_BOTTOM: Swift.Int
  final public let GRAVITY_Y_CENTER: Swift.Int
  final public let GRAVITY_X_CENTER_R: Swift.Int
  final public let GRAVITY_X_RIGHT_R: Swift.Int
  final public let GRAVITY_Y_CENTER_R: Swift.Int
  final public let GRAVITY_Y_BOTTOM_R: Swift.Int
  final public let ELEMENT_PREVIEW: Swift.Int
  final public let ELEMENT_BACKGROUND: Swift.Int
  final public let ELEMENT_NEEDLE_HOUR: Swift.Int
  final public let ELEMENT_NEEDLE_MIN: Swift.Int
  final public let ELEMENT_NEEDLE_SEC: Swift.Int
  final public let ELEMENT_DIGITAL_YEAR: Swift.Int
  final public let ELEMENT_DIGITAL_MONTH: Swift.Int
  final public let ELEMENT_DIGITAL_DAY: Swift.Int
  final public let ELEMENT_DIGITAL_HOUR: Swift.Int
  final public let ELEMENT_DIGITAL_MIN: Swift.Int
  final public let ELEMENT_DIGITAL_SEC: Swift.Int
  final public let ELEMENT_DIGITAL_AMPM: Swift.Int
  final public let ELEMENT_DIGITAL_WEEKDAY: Swift.Int
  final public let ELEMENT_DIGITAL_STEP: Swift.Int
  final public let ELEMENT_DIGITAL_HEART: Swift.Int
  final public let ELEMENT_DIGITAL_CALORIE: Swift.Int
  final public let ELEMENT_DIGITAL_DISTANCE: Swift.Int
  final public let ELEMENT_DIGITAL_BAT: Swift.Int
  final public let ELEMENT_DIGITAL_BT: Swift.Int
  final public let ELEMENT_DIGITAL_DIV_HOUR: Swift.Int
  final public let ELEMENT_DIGITAL_DIV_MONTH: Swift.Int
  final public let WATCHFACE_ELEMENT_ICON: Swift.Int
  final public let ELEMENT_SIFLI_BACKGROUND_IMAGE_ARRAY: Swift.Int
  final public let ELEMENT_BG_CONTROL: Swift.Int
  final public let ELEMENT_BG_CONTROL_SYMBOL: Swift.Int
  public static let sharedInstance: SmartWatchCodingBleKit.WatchFaceBuilder
  @objc deinit
}
public struct WatchElementResult {
  public let rawImageSize: CoreFoundation.CGSize
  public let imageSize: CoreFoundation.CGSize
  public let imageData: Foundation.Data
  public let imageCount: Swift.UInt8
  public let imageDataSize: [Swift.UInt32]
  public init(rawImageSize: CoreFoundation.CGSize, imageSize: CoreFoundation.CGSize, imageData: Foundation.Data, imageCount: Swift.UInt8, imageDataSize: [Swift.UInt32])
}
@objc @_inheritsConvenienceInitializers open class BleSchedule : SmartWatchCodingBleKit.BleIdObject {
  public var mYear: Swift.Int
  public var mMonth: Swift.Int
  public var mDay: Swift.Int
  public var mHour: Swift.Int
  public var mMinute: Swift.Int
  public var mAdvance: Swift.Int
  public var mTitle: Swift.String
  public var mContent: Swift.String
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ year: Swift.Int, _ month: Swift.Int, _ day: Swift.Int, _ hour: Swift.Int, _ minute: Swift.Int, _ advance: Swift.Int, _ title: Swift.String, _ content: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleSchedule
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAerobicSettings : SmartWatchCodingBleKit.BleWritable {
  public var mHour: Swift.Int
  public var mMin: Swift.Int
  public var mHRMin: Swift.Int
  public var mHRMax: Swift.Int
  public var mHRMinTime: Swift.Int
  public var mHRMinVibration: Swift.Int
  public var mHRMaxTime: Swift.Int
  public var mHRMaxVibration: Swift.Int
  public var mHRIntermediate: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleAerobicSettings
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleGoMoreSettings : SmartWatchCodingBleKit.BleWritable {
  public var mUuid: Swift.String
  public var mKey: Swift.String
  public var mUuidLength: Swift.Int
  public var mKeyLength: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMindStatus : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mValue: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMatchLog2 : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mPeriodTime: Swift.Int
  public var mPeriodNumber: Swift.Int
  public var mType: Swift.Int
  public var mCount: Swift.Int
  public var mCancelType: Swift.Int
  public var mTeam: Swift.Int
  public var mPlayer: Swift.Int
  public var mOtherType: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension SmartWatchCodingBleKit.BleMatchLog2 {
  public enum EventType : Swift.Int {
    case KICK_OFF
    case TIME_START
    case TIME_STOP
    case PERIOD_END
    case PERIOD_RESET
    case PENALTY
    case GOAL_HOME
    case GOAL_GUEST
    case UNDO_LAST
    case MERCY_END
    case INCIDENT_BREAK
    case YELLOW_CARD
    case RED_CARD
    case SUBSTITUTION
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers open class BleRecordPacket : SmartWatchCodingBleKit.BleReadable {
  public var mYear: Swift.Int
  public var mMonth: Swift.Int
  public var mDay: Swift.Int
  public var mHour: Swift.Int
  public var mMinute: Swift.Int
  public var mSecond: Swift.Int
  public var mLength: Swift.Int
  public var mStatus: Swift.Int
  public var mMode: Swift.Int
  public var mLanguage: Swift.Int
  public var mToLanguage: Swift.Int
  public var mPacket: Foundation.Data
  public enum VoiceModel : Swift.Int {
    case NORMAL
    case AI_WATCHFACE
    case AI_TRANSLATION
    case Headphone_Recording
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum TransferStatus : Swift.Int {
    case start
    case go_On
    case end
    case suspend
    case endContext
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleEarphoneState : SmartWatchCodingBleKit.BleReadable {
  public var mLeftState: Swift.Int
  public var mRightState: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public enum BleEarphoneStateType : Swift.Int {
  case STATE_CHARGING
  case STATE_CHARGE_CONNECTED
  case STATE_PHONE_CONNECTED
  case STATE_SHUTDOWN
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BlePushAppType : Swift.String {
  case MIRROR_PHONE
  case CALL
  case SMS
  case EMAIL
  case SKYPE
  case FACEBOOK
  case WHATS_APP
  case LINE
  case INSTAGRAM
  case KAKAO_TALK
  case GMAIL
  case TWITTER
  case LINKED_IN
  case SINA_WEIBO
  case QQ
  case WE_CHAT
  case Messenger
  case TELEGRAM
  case BETWEEN
  case NAVERCAFE
  case YOUTUBE
  case NETFLIX
  case Tik_Tok
  case SNAPCHAT
  case AMAZON
  case UBER
  case LYFT
  case GOOGLE_MAPS
  case SLACK
  case Discord
  case TumBlr
  case Pinterest
  case Zalo
  case IMO
  case VKontakte
  case TikTok_KOR
  case Naver_Band
  case NAVER_APP
  case Naver_Cafe
  case Signal
  case Nate_On
  case Daangn_Market
  case Kiwoom_Securities
  case Daum_Cafe
  case Vieber_Push
  case Meituan_Push
  case Dingding_Push
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleNotificationSettings2 : SmartWatchCodingBleKit.BleWritable {
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public func isEnabled(_ bundleId: Swift.String) -> Swift.Bool
  public func enable(_ bundleId: Swift.String)
  public func disable(_ bundleId: Swift.String)
  public func toggle(_ bundleId: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleNotificationSettings2
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleFindEarphone : SmartWatchCodingBleKit.BleWritable {
  public var mLeft: Swift.Int
  public var mRight: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc open class BleDevice : ObjectiveC.NSObject {
  public var mPeripheral: CoreBluetooth.CBPeripheral
  public var mAdvertisementData: [Swift.String : Any]
  public var mRssi: Swift.Int
  public var name: Swift.String {
    get
  }
  public var identifier: Swift.String {
    get
  }
  public var address: Swift.String {
    get
  }
  public var ota_address: Swift.String {
    get
  }
  public init(_ peripheral: CoreBluetooth.CBPeripheral, _ advertisementData: [Swift.String : Any], _ RSSI: Foundation.NSNumber)
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  public func isJLOTA() -> Swift.Bool
  public func isTuYaDevice() -> Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BleMatchPlayer : SmartWatchCodingBleKit.BleWritable {
  public var mName: Swift.String
  public var mNum: Swift.Int
  public var hasYellowCard: Swift.Int
  public var isCaptain: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BlePressureTimingMeasurement : SmartWatchCodingBleKit.BleWritable {
  public var mBleTimeRange: SmartWatchCodingBleKit.BleTimeRange
  public var mInterval: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleEcg : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mValue: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleLanguagePackVersion : SmartWatchCodingBleKit.BleReadable {
  public var mVersion: Swift.String
  public var mLanguageCode: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleLanguagePackVersion
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMatchPeriod2 : SmartWatchCodingBleKit.BleReadable {
  public var mDuration: Swift.Int
  public var mDistance: Swift.Int
  public var mStep: Swift.Int
  public var mCalorie: Swift.Int
  public var mSpeed: Swift.Int
  public var mAvgBpm: Swift.Int
  public var mMaxBpm: Swift.Int
  public var mMaxSpeed: Swift.Int
  public var mAltitude: Swift.Int
  public var mMaxAltitude: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleLocation : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mActivityMode: Swift.Int
  public var mAltitude: Swift.Int
  public var mLongitude: Swift.Float
  public var mLatitude: Swift.Float
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleLocation
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleBAC : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mValue: Swift.Int
  public var mColor: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleReadable : SmartWatchCodingBleKit.BleData, Swift.Codable {
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleEcgSettings : SmartWatchCodingBleKit.BleWritable {
  public var mBleTimeRange: SmartWatchCodingBleKit.BleTimeRange
  public var mInterval: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleGameTimeReminder : SmartWatchCodingBleKit.BleWritable {
  public var mEnabled: Swift.Int
  public var mMinute: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleDoubleScreenSettings : SmartWatchCodingBleKit.BleWritable {
  public var mEnabled: Swift.Int
  public var mBleTimeRange1: SmartWatchCodingBleKit.BleTimeRange
  public var mBleTimeRange2: SmartWatchCodingBleKit.BleTimeRange
  public var mBleTimeRange3: SmartWatchCodingBleKit.BleTimeRange
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleNoDisturbSettings
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMatchProSettings : SmartWatchCodingBleKit.BleWritable {
  public var mPeriods: Swift.Int
  public var mPeriodTime: [Swift.Int]
  public var mBreakTime: [Swift.Int]
  public var mVibration: Swift.Int
  public var mButtonType: Swift.Int
  public var mHomeTeamColor: Swift.Int
  public var mGuestTeamColor: Swift.Int
  public var mGps: Swift.Int
  public var mScreen: Swift.Int
  public var mMatchView: Swift.Int
  public var mTeamNames: [Swift.String]
  public var mRefereeRole: [Swift.String]
  public var mGoalTypes: [Swift.String]
  public var mYellowCardTypes: [Swift.String]
  public var mRedCardTypes: [Swift.String]
  public var mGoalTypesEnable: Swift.Int
  public var mYellowCardTypesEnable: Swift.Int
  public var mRedCardTypesEnable: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleEarphoneKey : SmartWatchCodingBleKit.BleWritable {
  public var mLeftClick: Swift.Int
  public var mLeftDoubleClick: Swift.Int
  public var mLeftTripleClick: Swift.Int
  public var mLeftLongClick: Swift.Int
  public var mRightClick: Swift.Int
  public var mRightDoubleClick: Swift.Int
  public var mRightTripleClick: Swift.Int
  public var mRightLongClick: Swift.Int
  public var mType: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public enum BleEarphoneKeyType : Swift.Int {
  case KEY_NONE
  case KEY_PRE
  case KEY_NEXT
  case KEY_PLAY_PAUSE
  case KEY_SWITCH_ENV
  case KEY_VOL_UP
  case KEY_VOL_DOWN
  case KEY_VOICE_ASSISTANT
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleStock : SmartWatchCodingBleKit.BleIdObject {
  public var mColorType: Swift.Int
  public var mStockCode: Swift.String
  public var mSharePrice: Swift.Float
  public var mNetChangePoint: Swift.Float
  public var mNetChangePercent: Swift.Float
  public var mMarketCapitalization: Swift.Float
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ companyName: Swift.String = "", _ sharePrice: Swift.Float = 0.0, _ netChangePoint: Swift.Float = 0.0, _ netChangePercent: Swift.Float = 0.0, _ marketCapitalization: Swift.Float = 0.0)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleStock
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleWeatherForecast2 : SmartWatchCodingBleKit.BleWritable {
  public var mTime: Swift.Int
  public var mCityName: Swift.String
  public var mWeather1: SmartWatchCodingBleKit.BleWeather2?
  public var mWeather2: SmartWatchCodingBleKit.BleWeather2?
  public var mWeather3: SmartWatchCodingBleKit.BleWeather2?
  public var mWeather4: SmartWatchCodingBleKit.BleWeather2?
  public var mWeather5: SmartWatchCodingBleKit.BleWeather2?
  public var mWeather6: SmartWatchCodingBleKit.BleWeather2?
  public var mWeather7: SmartWatchCodingBleKit.BleWeather2?
  public init(time: Swift.Int, cityName: Swift.String, weather1: SmartWatchCodingBleKit.BleWeather2? = nil, weather2: SmartWatchCodingBleKit.BleWeather2? = nil, weather3: SmartWatchCodingBleKit.BleWeather2? = nil, weather4: SmartWatchCodingBleKit.BleWeather2? = nil, weather5: SmartWatchCodingBleKit.BleWeather2? = nil, weather6: SmartWatchCodingBleKit.BleWeather2? = nil, weather7: SmartWatchCodingBleKit.BleWeather2? = nil)
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleWeatherForecast2
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleHeartRateVariability : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mHRVValue: Swift.Int
  public var mAvgHRVValue: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleHeartRateVariability
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleNotificationSettings : SmartWatchCodingBleKit.BleWritable {
  public static let MIRROR_PHONE: Swift.String
  public static let CALL: Swift.String
  public static let SMS: Swift.String
  public static let EMAIL: Swift.String
  public static let SKYPE: Swift.String
  public static let FACEBOOK: Swift.String
  public static let WHATS_APP: Swift.String
  public static let LINE: Swift.String
  public static let INSTAGRAM: Swift.String
  public static let KAKAO_TALK: Swift.String
  public static let GMAIL: Swift.String
  public static let TWITTER: Swift.String
  public static let LINKED_IN: Swift.String
  public static let SINA_WEIBO: Swift.String
  public static let QQ: Swift.String
  public static let WE_CHAT: Swift.String
  public static let Messenger: Swift.String
  public static let TELEGRAM: Swift.String
  public static let BETWEEN: Swift.String
  public static let NAVERCAFE: Swift.String
  public static let YOUTUBE: Swift.String
  public static let NETFLIX: Swift.String
  public static let Tik_Tok: Swift.String
  public static let SNAPCHAT: Swift.String
  public static let AMAZON: Swift.String
  public static let UBER: Swift.String
  public static let LYFT: Swift.String
  public static let GOOGLE_MAPS: Swift.String
  public static let SLACK: Swift.String
  public static let Discord: Swift.String
  public static let ORIGIN_BUNDLE_IDS: [Swift.String]
  public static let BIT_MASKS: [Swift.String : Swift.Int]
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public func isEnabled(_ bundleId: Swift.String) -> Swift.Bool
  public func enable(_ bundleId: Swift.String)
  public func disable(_ bundleId: Swift.String)
  public func toggle(_ bundleId: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleNotificationSettings
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleWorkOut : SmartWatchCodingBleKit.BleReadable {
  public var mStart: Swift.Int
  public var mEnd: Swift.Int
  public var mDuration: Swift.Int
  public var mAltitude: Swift.Int
  public var mAirPressure: Swift.Int
  public var mSpm: Swift.Int
  public var mMode: Swift.Int
  public var mStep: Swift.Int
  public var mDistance: Swift.Int
  public var mCalorie: Swift.Int
  public var mSpeed: Swift.Int
  public var mPace: Swift.Int
  public var mAvgBpm: Swift.Int
  public var mMaxBpm: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleWorkOut
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum BleMeasurementType : Swift.Int {
  case STATE_START
  case STATE_GOING
  case STATE_END
  case STATE_FAILED
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleMeasurement : SmartWatchCodingBleKit.BleWritable {
  public var mType: Swift.Int
  public var mState: SmartWatchCodingBleKit.BleMeasurementType
  public var mTime: SmartWatchCodingBleKit.BleTime
  public var mLength: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMeasurementPPG : SmartWatchCodingBleKit.BleReadable {
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleVoice : SmartWatchCodingBleKit.BleWritable {
  public var mCategory: Swift.Int
  public var mTime: Swift.Int
  public var mContent: Swift.String
  public var mStatus: Swift.Int
  public static let CATEGORY_INPUT_TEXT: Swift.Int
  public static let CATEGORY_OUTPUT_TEXT: Swift.Int
  public static var CONTENT_MAX_LENGTH: Swift.Int {
    get
  }
  public static let STATUS_DONE: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc open class BleData : ObjectiveC.NSObject {
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  @objc deinit
}
public enum BleWatchFaceType : Swift.Int {
  case BUILTIN
  case CLOUDY
  case CUSTOM
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleWatchFaceIndex : SmartWatchCodingBleKit.BleWritable {
  @objc public var mType: Swift.Int
  @objc public var mIndex: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public protocol BleBuffer {
  func toData() -> Foundation.Data
}
@objc @_inheritsConvenienceInitializers open class BleSleepQuality : SmartWatchCodingBleKit.BleWritable {
  public var mLight: Swift.Int
  public var mDeep: Swift.Int
  public var mTotal: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ light: Swift.Int, _ deep: Swift.Int, _ total: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleQrcode2 : SmartWatchCodingBleKit.BleWritable {
  @objc public var mId: Swift.Int
  @objc public var mTitle: Swift.String
  public var mWidth: Swift.Int
  @objc public var mQRData: Foundation.Data
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleGestureWake : SmartWatchCodingBleKit.BleWritable {
  @objc public var mBleTimeRange: SmartWatchCodingBleKit.BleTimeRange
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ timeRange: SmartWatchCodingBleKit.BleTimeRange)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleGestureWake
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleSettingWatchPassword : SmartWatchCodingBleKit.BleWritable {
  public var mEnabled: Swift.Int
  public var mPassword: Swift.String
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleHealthCare : SmartWatchCodingBleKit.BleWritable {
  @objc public var mEnabled: Swift.Int
  public var mReminderEnable: Swift.Int
  public var mReminderHour: Swift.Int
  public var mReminderMinute: Swift.Int
  public var mMenstruationReminderAdvance: Swift.Int
  public var mOvulationReminderAdvance: Swift.Int
  public var mLatestYear: Swift.Int
  public var mLatestMonth: Swift.Int
  public var mLatestDay: Swift.Int
  @objc public var mMenstruationDuration: Swift.Int
  @objc public var mMenstruationPeriod: Swift.Int
  public init(_ reminderH: Swift.Int, _ reminderM: Swift.Int, _ menstruation: Swift.Int, _ ovulation: Swift.Int, _ LastMensY: Swift.Int, _ LastMensM: Swift.Int, _ LastMensD: Swift.Int, _ cycle: Swift.Int, _ mSwitch: Swift.Int, _ period: Swift.Int)
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleHealthCare
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleHanBaoSettings : SmartWatchCodingBleKit.BleWritable {
  public var mVibration: Swift.Int
  public var mInterval: Swift.Int
  public var mSpo2Threshold: Swift.Int
  public var mBleTimeRange1: SmartWatchCodingBleKit.BleTimeRange
  public var mBleTimeRange2: SmartWatchCodingBleKit.BleTimeRange
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleEarphoneSoundEffectsSettings : SmartWatchCodingBleKit.BleWritable {
  public var mMode: Swift.Int
  public var mDynamic: Swift.Int
  public var mValue: Foundation.Data
  public var mFreqs: [Swift.Int]
  public var mCount: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public enum BleEarphoneSoundEffectsType : Swift.Int {
  case MODE_NORMAL
  case MODE_ROCK
  case MODE_POP
  case MODE_CLASSICAL
  case MODE_JAZZ
  case MODE_COUNTRY
  case MODE_USER
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BleWatchFaceId : SmartWatchCodingBleKit.BleReadable {
  public var mIdList: [Swift.Int]
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleWatchFaceId
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleBWNaviInfo : SmartWatchCodingBleKit.BleWritable {
  public enum NaviMode : Swift.Int {
    case WALK
    case BIKE
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum NaviState : Swift.Int {
    case START
    case GOING
    case PAUSE
    case RESUME
    case END
    case GUIDE_END
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var mState: SmartWatchCodingBleKit.BleBWNaviInfo.NaviState
  public var mTime: Swift.Int
  public var mMode: SmartWatchCodingBleKit.BleBWNaviInfo.NaviMode
  public var mSpeed: Swift.Int
  public var mAltitude: Swift.Int
  public var mTurnType: Swift.Int
  public var mRemainTime: Swift.String
  public var mRemainDistance: Swift.String
  public var mRoadGuide: Swift.String
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleBloodPressure : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mSystolic: Swift.Int
  public var mDiastolic: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleBloodPressure
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleLoveTapUser : SmartWatchCodingBleKit.BleIdObject {
  public var mName: Swift.String
  public init(_ mId: Swift.Int, _ mName: Swift.String = "")
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleLoveTapUser
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleWatchFaceBinToHeader : SmartWatchCodingBleKit.BleWritable {
  public static let ITEM_LENGTH: Swift.Int
  public var headerImageTotal: Swift.UInt16
  public var headerElementCount: Swift.UInt8
  public var headerImageFormat: Swift.UInt8
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(ImageTotal: Swift.UInt16, ElementCount: Swift.UInt8, ImageFormat: Swift.UInt8)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleDrinkWaterSettings : SmartWatchCodingBleKit.BleWritable {
  @objc public var mEnabled: Swift.Int
  @objc public var mRepeat: Swift.Int
  @objc public var mStartHour: Swift.Int
  @objc public var mStartMinute: Swift.Int
  @objc public var mEndHour: Swift.Int
  @objc public var mEndMinute: Swift.Int
  @objc public var mInterval: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleDrinkWaterSettings
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleGirlCarePeriodDate : SmartWatchCodingBleKit.BleWritable {
  public var mYear: Swift.Int
  public var mMonth: Swift.Int
  public var mDay: Swift.Int
  public var mType: Swift.Int
  public static let TYPE_MENSTRUAL: Swift.Int
  public static let TYPE_OVULATION: Swift.Int
  public static let TYPE_SAFE: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleGirlCarePeriod : SmartWatchCodingBleKit.BleReadable {
  public var mPeriodDateList: [SmartWatchCodingBleKit.BleGirlCarePeriodDate]
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAirPressureCalibration : SmartWatchCodingBleKit.BleWritable {
  public var mAirPressure: Swift.Int
  public var mAltitude: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BleRepeat {
  public static let MONDAY: Swift.Int
  public static let TUESDAY: Swift.Int
  public static let WEDNESDAY: Swift.Int
  public static let THURSDAY: Swift.Int
  public static let FRIDAY: Swift.Int
  public static let SATURDAY: Swift.Int
  public static let SUNDAY: Swift.Int
  public static let ONCE: Swift.Int
  public static let WORKDAY: Swift.Int
  public static let WEEKEND: Swift.Int
  public static let EVERYDAY: Swift.Int
  public static func toWeekdayText(repeat: Swift.Int, transfer: (Swift.Int) -> Swift.String) -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BleMatchPlayerSettings : SmartWatchCodingBleKit.BleWritable {
  public var mMatchSetType: Swift.Int
  public var mPlayerList: [SmartWatchCodingBleKit.BleMatchPlayer]
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleTimeZone : SmartWatchCodingBleKit.BleWritable {
  public var mOffset: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleNoDisturbSettings : SmartWatchCodingBleKit.BleWritable {
  @objc public var mEnabled: Swift.Int
  @objc public var mBleTimeRange1: SmartWatchCodingBleKit.BleTimeRange
  @objc public var mBleTimeRange2: SmartWatchCodingBleKit.BleTimeRange
  @objc public var mBleTimeRange3: SmartWatchCodingBleKit.BleTimeRange
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleNoDisturbSettings
  @objc deinit
}
public enum Stage : Swift.Int {
  case WARM_UP, GO_FOR, RECOVERY, REST_FOR, COOL_DOWN, OTHER
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CompletionCondition : Swift.Int {
  case DURATION, MANUAL, DURATION_IN_HR_ZONE, HR_ABOVE, HR_BELOW
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum HrZone : Swift.Int {
  case LOW, NORMAL, MODERATE, HARD, MAXIMUM
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SegmentActivity : Swift.Int {
  case TIMER, RUN, JUMP_JACKS, PUSH_UP, DISTANCE, RUN_FAS, WALK, SWIM, BICYCLE, WORKOUT, REST, STRETCH, SPINNING, SIT_UP, WARM_UP, COOL_DOWN
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleCoachingSegment : SmartWatchCodingBleKit.BleWritable {
  public var mCompletionCondition: Swift.Int
  public var mName: Swift.String
  public var mActivity: Swift.Int
  public var mStage: Swift.Int
  public var mCompletionValue: Swift.Int
  public var mHrZone: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ completionCondition: Swift.Int, _ name: Swift.String, _ activity: Swift.Int, _ state: Swift.Int, _ completionValue: Swift.Int, _ hrZone: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleSedentarinessSettings : SmartWatchCodingBleKit.BleWritable {
  @objc public var mEnabled: Swift.Int
  @objc public var mRepeat: Swift.Int
  @objc public var mStartHour: Swift.Int
  @objc public var mStartMinute: Swift.Int
  @objc public var mEndHour: Swift.Int
  @objc public var mEndMinute: Swift.Int
  @objc public var mInterval: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleSedentarinessSettings
  @objc deinit
}
public enum OTAStatus : Swift.Int {
  case OTA_PREPARE
  case OTA_PREPARE_FAILED
  case OTA_START
  case OTA_CHECKING
  case OTA_UPGRADEING
  case OTA_DONE
  case OTA_FAILED
  case OTA_BACK_LINK
  case OTA_ERROR_RETRYING
  case UNKNOWN
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SdkMethod : Swift.String {
  case onOTAProgress
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class SMFirmwareOTAProgressModel : ObjectiveC.NSObject {
  @objc public var otaStatus: Swift.Int
  @objc public var progress: Swift.Double
  @objc public var info: Swift.String
  @objc public var error: Swift.String
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol SMFirmwareOTAProgressDelegate {
  @objc func bleConnectorInvokeMethod(_ method: Swift.String, _ argModel: SmartWatchCodingBleKit.SMFirmwareOTAProgressModel)
}
@objc @_inheritsConvenienceInitializers open class BleWeatherRealtime : SmartWatchCodingBleKit.BleWritable {
  public var mTime: Swift.Int
  public var mWeather: SmartWatchCodingBleKit.BleWeather?
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(time: Swift.Int, weather: SmartWatchCodingBleKit.BleWeather? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleWeatherRealtime
  @objc deinit
}
public enum BleQiblaMethodType : Swift.Int {
  case MUSLIM_WORLD_LEAGUE
  case EGYPTIAN
  case KARACHI
  case UMM_AL_QURA
  case DUBAI
  case MOON_SIGHTING_COMMITTEE
  case NORTH_AMERICA
  case KUWAIT
  case QATAR
  case SINGAPORE
  case TURKEY
  case OTHER
  case SIHAT_KEMENAG
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BlePrayerTimes : SmartWatchCodingBleKit.BleWritable {
  public var mFajrHour: Swift.Int
  public var mFajrMinite: Swift.Int
  public var mSunriseHour: Swift.Int
  public var mSunriseMinite: Swift.Int
  public var mDhuhrHour: Swift.Int
  public var mDhuhrMinite: Swift.Int
  public var mAsrHour: Swift.Int
  public var mAsrMinite: Swift.Int
  public var mMaghribHour: Swift.Int
  public var mMaghribMinite: Swift.Int
  public var mIshaHour: Swift.Int
  public var mIshaMinite: Swift.Int
  public static let ITEM_LENGTH: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleQiblaSettings : SmartWatchCodingBleKit.BleWritable {
  public var mEnabled: Swift.Int
  public var mMethod: Swift.Int
  public var mReminderMinute: Swift.Int
  public var mHijriYear: Swift.Int
  public var mHijriMonth: Swift.Int
  public var mHijriDay: Swift.Int
  public var mStartTime: Swift.Int
  public var mPrayerTimes: [SmartWatchCodingBleKit.BlePrayerTimes]
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleWorkOut2 : SmartWatchCodingBleKit.BleReadable {
  public var mStart: Swift.Int
  public var mEnd: Swift.Int
  public var mDuration: Swift.Int
  public var mAltitude: Swift.Int
  public var mAirPressure: Swift.Int
  public var mSpm: Swift.Int
  public var mMode: Swift.Int
  public var mStep: Swift.Int
  public var mDistance: Swift.Int
  public var mCalorie: Swift.Int
  public var mSpeed: Swift.Int
  public var mPace: Swift.Int
  public var mAvgBpm: Swift.Int
  public var mMaxBpm: Swift.Int
  public var mMinBpm: Swift.Int
  public var mUndefined: Swift.Int
  public var mMaxSpm: Swift.Int
  public var mMinSpm: Swift.Int
  public var mMaxPace: Swift.Int
  public var mMinPace: Swift.Int
  public var mMaxAltitude: Swift.Int
  public var mMinAltitude: Swift.Int
  public var mMinStress: Swift.Int
  public var mMaxStress: Swift.Int
  public var mAvgStress: Swift.Int
  public var mMaxSpeed: Swift.Int
  public var mMinSpeed: Swift.Int
  public var mRestDuration: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleWorkOut2
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleNewsFeed : SmartWatchCodingBleKit.BleWritable {
  public var mCategory: Swift.Int
  public var mUid: Swift.Int
  public var mTime: Swift.Int
  public var mTitle: Swift.String
  public var mContent: Swift.String
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleNewsFeed
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMedicationAlarm : SmartWatchCodingBleKit.BleIdObject {
  public var mEnabled: Swift.Int
  public var mRepeat: Swift.Int
  public var mYear: Swift.Int
  public var mMonth: Swift.Int
  public var mDay: Swift.Int
  public var mHour: Swift.Int
  public var mMinute: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ enabled: Swift.Int = 1, _ repeat: Swift.Int = 0, _ year: Swift.Int = 2000, _ month: Swift.Int = 1, _ day: Swift.Int = 1, _ hour: Swift.Int = 0, _ minute: Swift.Int = 0)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleGirlCareMenstruationDate : SmartWatchCodingBleKit.BleWritable {
  public var mType: Swift.Int
  public var mTime: SmartWatchCodingBleKit.BleTime
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum BleConnectorType {
  case macAddress
  case systemUUID
  public static func == (a: SmartWatchCodingBleKit.BleConnectorType, b: SmartWatchCodingBleKit.BleConnectorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers open class BaseBleConnector : ObjectiveC.NSObject {
  public var mPeripheral: CoreBluetooth.CBPeripheral?
  public var mBleScanner: SmartWatchCodingBleKit.BleScanner
  public var isConnecting: Swift.Bool {
    get
    set
  }
  public var isConnected: Swift.Bool
  public var mBaseBleMessenger: SmartWatchCodingBleKit.BaseBleMessenger!
  public func setTargetIdentifier(_ identifier: Swift.String, _ mConnecType: SmartWatchCodingBleKit.BleConnectorType)
  public func setTargetDevice(_ bleDevice: SmartWatchCodingBleKit.BleDevice, _ mConnecType: SmartWatchCodingBleKit.BleConnectorType)
  @objc public func setTargetDevice(_ peripheral: CoreBluetooth.CBPeripheral)
  @objc public func setTargetDevice(macAddrress: Swift.String)
  public func setTargetDevice(_ macAddrress: Swift.String, _ mConnecType: SmartWatchCodingBleKit.BleConnectorType)
  public func connect(_ connect: Swift.Bool)
  public func closeConnection(_ stopReconnecting: Swift.Bool)
  @objc deinit
}
extension SmartWatchCodingBleKit.BaseBleConnector : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @available(iOS 13.0, *)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didUpdateANCSAuthorizationFor peripheral: CoreBluetooth.CBPeripheral)
}
extension SmartWatchCodingBleKit.BaseBleConnector : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheralIsReady(toSendWriteWithoutResponse peripheral: CoreBluetooth.CBPeripheral)
}
extension SmartWatchCodingBleKit.BaseBleConnector : SmartWatchCodingBleKit.BleScanDelegate {
  public func onBluetoothDisabled()
  public func onBluetoothEnabled()
  public func onScan(_ scan: Swift.Bool)
  public func onDeviceFound(_ device: SmartWatchCodingBleKit.BleDevice)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BleMatchTrainingSettings : SmartWatchCodingBleKit.BleWritable {
  public var mPeriods: Swift.Int
  public var mTrainingTime: Swift.Int
  public var mRestingTime: Swift.Int
  public var mFinshRestingTime: Swift.Int
  public var mVibration: Swift.Int
  public var mScreen: Swift.Int
  public init(mPeriods: Swift.Int, mTrainingTime: Swift.Int, mRestingTime: Swift.Int, mFinshRestingTime: Swift.Int, mVibration: Swift.Int, mScreen: Swift.Int)
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleWorldClock : SmartWatchCodingBleKit.BleIdObject {
  public var mLocal: Swift.Int
  public var mTimeZoneOffset: Swift.Int
  public var mReversed: Swift.Int
  public var mCityName: Swift.String
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ local: Swift.Int = 0, _ timeZoneOffset: Swift.Int = 0, _ cityName: Swift.String = "")
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleWorldClock
  @objc deinit
}
public let ID_ALL: Swift.Int
@_hasMissingDesignatedInitializers public class CameraState {
  public static let EXIT: Swift.Int
  public static let ENTER: Swift.Int
  public static let CAPTURE: Swift.Int
  public static let FLIP: Swift.Int
  public static func getState(_ state: Swift.Int) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SyncState {
  public static let DISCONNECTED: Swift.Int
  public static let TIMEOUT: Swift.Int
  public static let COMPLETED: Swift.Int
  public static let SYNCING: Swift.Int
  public static func getState(_ state: Swift.Int) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WorkoutState {
  public static let START: Swift.Int
  public static let ONGOING: Swift.Int
  public static let PAUSE: Swift.Int
  public static let END: Swift.Int
  public static func getState(_ state: Swift.Int) -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleTemperatureDetecting : SmartWatchCodingBleKit.BleWritable {
  public var mBleTimeRange: SmartWatchCodingBleKit.BleTimeRange
  public var mInterval: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleTemperatureDetecting
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleLoveTap : SmartWatchCodingBleKit.BleWritable {
  public static let ACTION_DOWN: Swift.Int
  public static let ACTION_UP: Swift.Int
  public var mTime: Swift.Int
  public var mId: Swift.Int
  public var mActionType: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleLoveTap
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAvgHeartRate : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mValue: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleFileInfo : SmartWatchCodingBleKit.BleReadable {
  public var mSize: Swift.Int
  public var mAttribute: Swift.Int
  public var mName: Swift.String
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleFileList : SmartWatchCodingBleKit.BleReadable {
  public var mList: [SmartWatchCodingBleKit.BleFileInfo]
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleDeviceInfo : SmartWatchCodingBleKit.BleReadable {
  public static let PLATFORM_NORDIC: Swift.String
  public static let PLATFORM_REALTEK: Swift.String
  public static let PLATFORM_MTK: Swift.String
  public static let PLATFORM_GOODIX: Swift.String
  public static let PLATFORM_JL: Swift.String
  public static let PLATFORM_SIFLI: Swift.String
  public static let PLATFORM_ZKLX: Swift.String
  public static let PLATFORM_JL707: Swift.String
  public static let PROTOTYPE_10G: Swift.String
  public static let PROTOTYPE_GTM5: Swift.String
  public static let PROTOTYPE_F1N: Swift.String
  public static let PROTOTYPE_ND09: Swift.String
  public static let PROTOTYPE_ND08: Swift.String
  public static let PROTOTYPE_FA86: Swift.String
  public static let PROTOTYPE_MC11: Swift.String
  public static let PROTOTYPE_R4: Swift.String
  public static let PROTOTYPE_R5: Swift.String
  public static let PROTOTYPE_F1RT: Swift.String
  public static let PROTOTYPE_F2: Swift.String
  public static let PROTOTYPE_F3C: Swift.String
  public static let PROTOTYPE_F3R: Swift.String
  public static let PROTOTYPE_F3L: Swift.String
  public static let PROTOTYPE_R7: Swift.String
  public static let PROTOTYPE_F13: Swift.String
  public static let PROTOTYPE_F13J: Swift.String
  public static let PROTOTYPE_B5CRT: Swift.String
  public static let PROTOTYPE_R10: Swift.String
  public static let PROTOTYPE_R10Pro: Swift.String
  public static let PROTOTYPE_R11: Swift.String
  public static let PROTOTYPE_R11S: Swift.String
  public static let PROTOTYPE_F5: Swift.String
  public static let PROTOTYPE_F6: Swift.String
  public static let PROTOTYPE_F7: Swift.String
  public static let PROTOTYPE_F9: Swift.String
  public static let PROTOTYPE_R9: Swift.String
  public static let PROTOTYPE_SW01: Swift.String
  public static let PROTOTYPE_F2R: Swift.String
  public static let PROTOTYPE_GTM5R: Swift.String
  public static let PROTOTYPE_F1: Swift.String
  public static let PROTOTYPE_F2D: Swift.String
  public static let PROTOTYPE_T78: Swift.String
  public static let PROTOTYPE_SMAV1: Swift.String
  public static let PROTOTYPE_Y1: Swift.String
  public static let PROTOTYPE_Y2: Swift.String
  public static let PROTOTYPE_V2: Swift.String
  public static let PROTOTYPE_Y3: Swift.String
  public static let PROTOTYPE_R3Pro: Swift.String
  public static let PROTOTYPE_F2Pro: Swift.String
  public static let PROTOTYPE_Match_S1: Swift.String
  public static let PROTOTYPE_S2: Swift.String
  public static let PROTOTYPE_S03: Swift.String
  public static let PROTOTYPE_B9: Swift.String
  public static let PROTOTYPE_V5: Swift.String
  public static let PROTOTYPE_V3: Swift.String
  public static let PROTOTYPE_LG19T: Swift.String
  public static let PROTOTYPE_F2K: Swift.String
  public static let PROTOTYPE_W9: Swift.String
  public static let PROTOTYPE_Explorer: Swift.String
  public static let PROTOTYPE_NY58: Swift.String
  public static let PROTOTYPE_F12: Swift.String
  public static let PROTOTYPE_AM01: Swift.String
  public static let PROTOTYPE_F11: Swift.String
  public static let PROTOTYPE_F13A: Swift.String
  public static let PROTOTYPE_F2R_NEW: Swift.String
  public static let PROTOTYPE_F1_NEW: Swift.String
  public static let PROTOTYPE_S4: Swift.String
  public static let PROTOTYPE_R6_PRO_DK: Swift.String
  public static let PROTOTYPE_GB1: Swift.String
  public static let PROTOTYPE_SPORT4: Swift.String
  public static let PROTOTYPE_R3H: Swift.String
  public static let PROTOTYPE_R3Q: Swift.String
  public static let PROTOTYPE_R2: Swift.String
  public static let PROTOTYPE_F3: Swift.String
  public static let PROTOTYPE_M3: Swift.String
  public static let PROTOTYPE_M4: Swift.String
  public static let PROTOTYPE_M4C: Swift.String
  public static let PROTOTYPE_M5C: Swift.String
  public static let PROTOTYPE_M4S: Swift.String
  public static let PROTOTYPE_M7: Swift.String
  public static let PROTOTYPE_M7S: Swift.String
  public static let PROTOTYPE_M6: Swift.String
  public static let PROTOTYPE_M6C: Swift.String
  public static let PROTOTYPE_M7C: Swift.String
  public static let PROTOTYPE_R9J: Swift.String
  public static let PROTOTYPE_F13B: Swift.String
  public static let PROTOTYPE_A7: Swift.String
  public static let PROTOTYPE_A8: Swift.String
  public static let PROTOTYPE_AM01J: Swift.String
  public static let PROTOTYPE_F17: Swift.String
  public static let PROTOTYPE_AM02J: Swift.String
  public static let PROTOTYPE_HW01: Swift.String
  public static let PROTOTYPE_F12Pro: Swift.String
  public static let PROTOTYPE_K18: Swift.String
  public static let PROTOTYPE_AW12: Swift.String
  public static let PROTOTYPE_AM05: Swift.String
  public static let PROTOTYPE_K30: Swift.String
  public static let PROTOTYPE_FC1: Swift.String
  public static let PROTOTYPE_FC2: Swift.String
  public static let PROTOTYPE_F6Pro: Swift.String
  public static let PROTOTYPE_FT5: Swift.String
  public static let PROTOTYPE_R16: Swift.String
  public static let PROTOTYPE_A8_Ultra_Pro: Swift.String
  public static let PROTOTYPE_AM08: Swift.String
  public static let PROTOTYPE_JX621D: Swift.String
  public static let PROTOTYPE_V61: Swift.String
  public static let PROTOTYPE_AM11: Swift.String
  public static let PROTOTYPE_AW37: Swift.String
  public static let PROTOTYPE_WS001: Swift.String
  public static let PROTOTYPE_B9C_JL: Swift.String
  public static let PROTOTYPE_A9mini: Swift.String
  public static let PROTOTYPE_AM25: Swift.String
  public static let PROTOTYPE_AM22: Swift.String
  public static let PROTOTYPE_K10: Swift.String
  public static let PROTOTYPE_X3: Swift.String
  public static let PROTOTYPE_X5L: Swift.String
  public static let PROTOTYPE_X6: Swift.String
  public static let PROTOTYPE_BC01: Swift.String
  public static let PROTOTYPE_SF15GUC: Swift.String
  public static let AGPS_NONE: Swift.Int
  public static let AGPS_EPO: Swift.Int
  public static let AGPS_UBLOX: Swift.Int
  public static let AGPS_AGNSS: Swift.Int
  public static let AGPS_EPO_ONLY: Swift.Int
  public static let AGPS_LTO: Swift.Int
  public static let AGPS_6228: Swift.Int
  public static let WATCH_FACE_NONE: Swift.Int
  public static let WATCH_FACE_10G: Swift.Int
  public static let WATCH_FACE_F3: Swift.Int
  public static let WATCH_FACE_REALTEK: Swift.Int
  public static let WATCH_FACE_240x280: Swift.Int
  public static let WATCH_FACE_320x385: Swift.Int
  public static let WATCH_FACE_320x363: Swift.Int
  public static let WATCH_FACE_REALTEK_ROUND: Swift.Int
  public static let WATCH_FACE_GOODIX: Swift.Int
  public static let WATCH_FACE_REALTEK_RACKET: Swift.Int
  public static let WATCH_FACE_REALTEK_SQUARE_240x280: Swift.Int
  public static let WATCH_FACE_REALTEK_ROUND_240x240: Swift.Int
  public static let WATCH_FACE_REALTEK_SQUARE_240x240: Swift.Int
  public static let WATCH_FACE_240_240: Swift.Int
  public static let WATCH_FACE_REALTEK_SQUARE_80x160: Swift.Int
  public static let WATCH_FACE_REALTEK_ROUND_360x360: Swift.Int
  public static let WATCH_FACE_REALTEK_SQUARE_240x280_2: Swift.Int
  public static let WATCH_FACE_REALTEK_ROUND_454x454: Swift.Int
  public static let WATCH_FACE_REALTEK_ROUND_CENTER_240x240: Swift.Int
  public static let WATCH_FACE_REALTEK_SQUARE_240x280_19: Swift.Int
  public static let WATCH_FACE_REALTEK_SQUARE_240x280_20: Swift.Int
  public static let WATCH_FACE_REALTEK_SQUARE_240x295_21: Swift.Int
  public static let WATCH_FACE_SERVER: Swift.Int
  public var mId: Swift.Int {
    get
  }
  public var mDataKeys: [Swift.Int] {
    get
  }
  public var mBleName: Swift.String {
    get
  }
  public var mBleCustomName: Swift.String {
    get
  }
  public var mBleAddress: Swift.String {
    get
  }
  public var mPlatform: Swift.String {
    get
  }
  public var mPrototype: Swift.String {
    get
  }
  public var mFirmwareFlag: Swift.String {
    get
  }
  public var mAGpsType: Swift.Int {
    get
  }
  public var mWatchFaceType: Swift.Int {
    get
  }
  public var mClassicAddress: Swift.String {
    get
  }
  public var mHideDigitalPower: Swift.Int {
    get
  }
  public var mAntiLostSwitch: Swift.Int {
    get
  }
  public var mSleepAlgorithmType: Swift.Int {
    get
  }
  public var mDateFormat: Swift.Int {
    get
  }
  public var mSupportReadDeviceInfo: Swift.Int {
    get
  }
  public var mTemperatureUnit: Swift.Int {
    get
  }
  public var mDrinkWater: Swift.Int {
    get
  }
  public var mChangeClassicBluetoothState: Swift.Int {
    get
  }
  public var mAppSport: Swift.Int {
    get
  }
  public var mBloodOxyGenSet: Swift.Int {
    get
  }
  public var mWashSet: Swift.Int {
    get
  }
  public var mDemandWeather: Swift.Int {
    get
  }
  public var mSupportHID: Swift.Int {
    get
  }
  public var miBeacon: Swift.Int {
    get
  }
  public var mSupportWatchFaceId: Swift.Int {
    get
  }
  public var mSupportNewTransportMode: Swift.Int {
    get
  }
  public var mSupportJLWatchFace: Swift.Int {
    get
  }
  public var mSupportFindWatch: Swift.Int {
    get
  }
  public var mSupportWorldClock: Swift.Int {
    get
  }
  public var mSupportStock: Swift.Int {
    get
  }
  public var mSupportSMSQuickReply: Swift.Int {
    get
  }
  public var mSupportNoDisturbSet: Swift.Int {
    get
  }
  public var mSupportSetWatchPassword: Swift.Int {
    get
  }
  public var mSupportRealTimeMeasurement: Swift.Int {
    get
  }
  public var mSupportPowerSaveMode: Swift.Int {
    get
  }
  public var mSupportLoveTap: Swift.Int {
    get
  }
  public var mSupportNewsfeed: Swift.Int {
    get
  }
  public var mSupportMedicationReminder: Swift.Int {
    get
  }
  public var mSupportQrcode: Swift.Int {
    get
  }
  public var mSupportWeather2: Swift.Int {
    get
  }
  public var mSupportAlipay: Swift.Int {
    get
  }
  public var mSupportStandbySet: Swift.Int {
    get
  }
  public var mSupport2DAcceleration: Swift.Int {
    get
  }
  public var mSupportTuyaKey: Swift.Int {
    get
  }
  public var mSupportMedicationAlarm: Swift.Int {
    get
  }
  public var mSupportReadPackageStatus: Swift.Int {
    get
  }
  public var mSupportContactSize: Swift.Int {
    get
  }
  public var mSupportVoice: Swift.Int {
    get
  }
  public var mSupportNavigation: Swift.Int {
    get
  }
  public var mSupportHrWarnSet: Swift.Int {
    get
  }
  public var mBleDefaultName: Swift.String? {
    get
  }
  public var mSupportMusicTransfer: Swift.Int {
    get
  }
  public var mSupportNoDisturbSet2: Swift.Int {
    get
  }
  public var mSupportSOSSet: Swift.Int {
    get
  }
  public var mSupportReadLanguages: Swift.Int {
    get
  }
  public var mSupportGirlCareReminder: Swift.Int {
    get
  }
  public var mSupportAppPushSwitch: Swift.Int {
    get
  }
  public var mSupportReceiptCodeSize: Swift.Int {
    get
  }
  public var mSupportGameTimeReminder: Swift.Int {
    get
  }
  public var mSupportMyCardCodeSize: Swift.Int {
    get
  }
  public var mSupportDeviceSportData: Swift.Int {
    get
  }
  public var mSupportEbookTransfer: Swift.Int {
    get
  }
  public var mSupportDoubleScreen: Swift.Int {
    get
  }
  public var mSupportCustomLogo: Swift.Int {
    get
  }
  public var mSupportPressureTimingMeasurement: Swift.Int {
    get
  }
  public var mSupportTimerStandbySet: Swift.Int {
    get
  }
  public var mSupportSOSSet2: Swift.Int {
    get
  }
  public var mSupportFallSet: Swift.Int {
    get
  }
  public var mSupportWalkAndBike: Swift.Int {
    get
  }
  public var mSupportConnectReminder: Swift.Int {
    get
  }
  public var mSupportSDCardInfo: Swift.Int {
    get
  }
  public var mSupportIncomingCallRing: Swift.Int {
    get
  }
  public var mSupportNotificationLightScreenSet: Swift.Int {
    get
  }
  public var mSupportBloodPressureCalibration: Swift.Int {
    get
  }
  public var mSupportOTAFile: Swift.Int {
    get
  }
  public var mSupportGPSFirmwareFile: Swift.Int {
    get
  }
  public var mSupportGoMoreSet: Swift.Int {
    get
  }
  public var mSupportRingVibrationSet: Swift.Int {
    get
  }
  public var mSupportNetwork: Swift.Int {
    get
  }
  public var mSupportContactSort: Swift.Int {
    get
  }
  public var mQrcodeSize: Swift.Int {
    get
  }
  public var mQrcodeContentSize: Swift.UInt {
    get
  }
  public var mSupportStringQrcode: Swift.Int {
    get
  }
  public var mSupportWatchFaceIndex: Swift.Int {
    get
  }
  public var mSupportSosContact: Swift.Int {
    get
  }
  public var mSupportGirlCareMonthly: Swift.Int {
    get
  }
  public var mSupportWearWay: Swift.Int {
    get
  }
  public var mSupportGestureWake2: Swift.Int {
    get
  }
  public var mSupportNavImage: Swift.Int {
    get
  }
  public var mSupportVoiceMaxLength: Swift.Int {
    get
  }
  public var mSupportAudioBooks: Swift.Int {
    get
  }
  public var mSupportStudyCards: Swift.Int {
    get
  }
  public var mSupportAppStore: Swift.Int {
    get
  }
  public var mSupportSHSYAlgorithm: Swift.Int {
    get
  }
  public var mSupportQiblaSet: Swift.Int {
    get
  }
  public var mSupportMeasurementBloodGlucose: Swift.Int {
    get
  }
  required public init(_ data: Foundation.Data?, _ byteOrder: SmartWatchCodingBleKit.ByteOrder)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public func updateSupportNewTransportMode(_ value: Swift.Int)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary(_ status: Swift.Bool) -> [Swift.String : Any]
  @objc deinit
}
extension Foundation.Data {
  public var mHexString: Swift.String {
    get
  }
  public init(boolValue value: Swift.Bool)
  public init(int8 value: Swift.Int)
  public init(int16 value: Swift.Int, _ order: SmartWatchCodingBleKit.ByteOrder)
  public init(int24 value: Swift.Int, _ order: SmartWatchCodingBleKit.ByteOrder)
  public init(int32 value: Swift.Int, _ order: SmartWatchCodingBleKit.ByteOrder)
  public func getUInt(_ start: Swift.Int, _ length: Swift.Int, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = ByteOrder.BIG_ENDIAN) -> Swift.Int
  public func splitWith0(beginAt: Swift.Int = 0) -> Swift.Array<Foundation.Data>
}
@_hasMissingDesignatedInitializers open class Languages {
  public static let DEFAULT_CODE: Swift.Int
  public static let INVALID_CODE: Swift.Int
  public static let DEFAULT_LANGUAGE: Swift.String
  public static func languageToCode(language: Swift.String = String(NSLocale.current.identifier.prefix(2)), default: Swift.Int = Languages.DEFAULT_CODE) -> Swift.Int
  public static func codeToLanguage(code: Swift.Int, default: Swift.String = DEFAULT_LANGUAGE) -> Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class BleConnector : SmartWatchCodingBleKit.BaseBleConnector {
  @objc public static let shared: SmartWatchCodingBleKit.BleConnector
  public static let SERVICE_MTK: Swift.String
  public static let CH_MTK_OTA_META: Swift.String
  public var isDeletionRecords: Swift.Bool
  public var isOnlineConnection: Swift.Bool
  @objc public func launch()
  @objc public func addBleHandleDelegate(_ tag: Swift.String, _ bleHandleDelegate: any SmartWatchCodingBleKit.BleHandleDelegate)
  public func removeBleHandleDelegate(_ tag: Swift.String)
  public func getResumeBleKey() -> SmartWatchCodingBleKit.BleKey
  public func sendData(_ bleKey: SmartWatchCodingBleKit.BleKey, _ bleKeyFlag: SmartWatchCodingBleKit.BleKeyFlag, _ data: Foundation.Data? = nil, _ reply: Swift.Bool = false, _ nack: Swift.Bool = false) -> Swift.Bool
  public func sendBool(_ bleKey: SmartWatchCodingBleKit.BleKey, _ bleKeyFlag: SmartWatchCodingBleKit.BleKeyFlag, _ value: Swift.Bool, _ reply: Swift.Bool = false, _ nack: Swift.Bool = false) -> Swift.Bool
  @objc public func sendInt8(_ bleKey: SmartWatchCodingBleKit.BleKey, _ bleKeyFlag: SmartWatchCodingBleKit.BleKeyFlag, _ value: Swift.Int, _ reply: Swift.Bool = false, _ nack: Swift.Bool = false) -> Swift.Bool
  public func sendInt16(_ bleKey: SmartWatchCodingBleKit.BleKey, _ bleKeyFlag: SmartWatchCodingBleKit.BleKeyFlag, _ value: Swift.Int, _ order: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN, _ reply: Swift.Bool = false, _ nack: Swift.Bool = false) -> Swift.Bool
  public func sendInt24(_ bleKey: SmartWatchCodingBleKit.BleKey, _ bleKeyFlag: SmartWatchCodingBleKit.BleKeyFlag, _ value: Swift.Int, _ order: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN, _ reply: Swift.Bool = false, _ nack: Swift.Bool = false) -> Swift.Bool
  public func sendInt32(_ bleKey: SmartWatchCodingBleKit.BleKey, _ bleKeyFlag: SmartWatchCodingBleKit.BleKeyFlag, _ value: Swift.Int, _ order: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN, _ reply: Swift.Bool = false, _ nack: Swift.Bool = false) -> Swift.Bool
  public func sendObject<T>(_ bleKey: SmartWatchCodingBleKit.BleKey, _ bleKeyFlag: SmartWatchCodingBleKit.BleKeyFlag, _ object: T?, _ reply: Swift.Bool = false, _ nack: Swift.Bool = false) -> Swift.Bool where T : SmartWatchCodingBleKit.BleWritable
  public func sendArray<T>(_ bleKey: SmartWatchCodingBleKit.BleKey, _ bleKeyFlag: SmartWatchCodingBleKit.BleKeyFlag, _ objects: [T]?, _ reply: Swift.Bool = false, _ nack: Swift.Bool = false) -> Swift.Bool where T : SmartWatchCodingBleKit.BleWritable
  public func sendStream(_ bleKey: SmartWatchCodingBleKit.BleKey, _ data: Foundation.Data, _ type: Swift.Int = 0) -> Swift.Bool
  public func sendStream(_ bleKey: SmartWatchCodingBleKit.BleKey, forResource name: Swift.String, ofType ext: Swift.String, _ type: Swift.Int = 0) -> Swift.Bool
  public func sendStream(_ bleKey: SmartWatchCodingBleKit.BleKey, _ url: Foundation.URL, _ type: Swift.Int = 0) -> Swift.Bool
  public func sendStream(_ bleKey: SmartWatchCodingBleKit.BleKey, _ path: Swift.String, _ type: Swift.Int = 0) -> Swift.Bool
  public func mtkOta(_ data: Foundation.Data)
  public func mtkOta(forResource name: Swift.String, ofType ext: Swift.String)
  public func mtkOta(_ url: Foundation.URL)
  public func mtkOta(_ path: Swift.String)
  public func read(_ service: Swift.String, _ characteristic: Swift.String) -> Swift.Bool
  public func unbind()
  public func isBound() -> Swift.Bool
  public func isAvailable() -> Swift.Bool
  @objc deinit
}
extension SmartWatchCodingBleKit.BleConnector {
  public func clearQueueAll()
}
@objc @_inheritsConvenienceInitializers open class BleWeather : SmartWatchCodingBleKit.BleWritable {
  public static let SUNNY: Swift.Int
  public static let CLOUDY: Swift.Int
  public static let OVERCAST: Swift.Int
  public static let RAINY: Swift.Int
  public static let THUNDER: Swift.Int
  public static let THUNDERSHOWER: Swift.Int
  public static let HIGH_WINDY: Swift.Int
  public static let SNOWY: Swift.Int
  public static let FOGGY: Swift.Int
  public static let SAND_STORM: Swift.Int
  public static let HAZE: Swift.Int
  public static let OTHER: Swift.Int
  public var mCurrentTemperature: Swift.Int
  public var mMaxTemperature: Swift.Int
  public var mMinTemperature: Swift.Int
  public var mWeatherCode: Swift.Int
  public var mWindSpeed: Swift.Int
  public var mHumidity: Swift.Int
  public var mVisibility: Swift.Int
  public var mUltraVioletIntensity: Swift.Int
  public var mPrecipitation: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(currentTemperature: Swift.Int = 0, maxTemperature: Swift.Int = 0, minTemperature: Swift.Int = 0, weatherType: Swift.Int = 0, windSpeed: Swift.Int = 0, humidity: Swift.Int = 0, visibility: Swift.Int = 0, ultraVioletIntensity: Swift.Int = 0, precipitation: Swift.Int = 0)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleWeather
  public func transformWeatherCode(code: Swift.Int) -> Swift.Int
  @objc deinit
}
extension Foundation.Date {
  public var year: Swift.Int {
    get
  }
  public var month: Swift.Int {
    get
  }
  public var day: Swift.Int {
    get
  }
  public var hour: Swift.Int {
    get
  }
  public var minute: Swift.Int {
    get
  }
  public var second: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleSDCardInfo : SmartWatchCodingBleKit.BleReadable {
  public var mTotalSize: Swift.UInt
  public var mFreeSize: Swift.UInt
  public var mClustSize: Swift.UInt
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleHanBaoVibration : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mVibration: Swift.Int
  public var mBOValue: Swift.Int
  public var mIsSnore: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAppSportState : SmartWatchCodingBleKit.BleWritable {
  public var mMode: Swift.Int
  public var mState: Swift.Int
  public init(_ dic: [Swift.String : Any])
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public init(_ mode: Swift.Int, _ status: Swift.Int)
  public func toDictionary() -> [Swift.String : Any]
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class BleAppSportStateType {
  public static let modeStart: Swift.Int
  public static let modeContinues: Swift.Int
  public static let modePause: Swift.Int
  public static let modeEnd: Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleSleep : SmartWatchCodingBleKit.BleReadable, Foundation.NSCopying {
  public static let DEEP: Swift.Int
  public static let LIGHT: Swift.Int
  public static let AWAKE: Swift.Int
  public static let REM: Swift.Int
  public static let TOTAL_LENGTH: Swift.Int
  public static let DEEP_LENGTH: Swift.Int
  public static let LIGHT_LENGTH: Swift.Int
  public static let AWAKE_LENGTH: Swift.Int
  public static let PIECEMEAL: Swift.Int
  public static let START: Swift.Int
  public static let END: Swift.Int
  public var mTime: Swift.Int
  public var mMode: Swift.Int
  public var mSoft: Swift.Int
  public var mStrong: Swift.Int
  public var mLocalTime: Foundation.TimeInterval {
    get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ time: Swift.Int, _ mode: Swift.Int, _ soft: Swift.Int = 0, _ strong: Swift.Int = 0)
  required public init(from decoder: any Swift.Decoder) throws
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleSleep
  public class func analyseSleep(origin: [SmartWatchCodingBleKit.BleSleep], algorithmType: Swift.Int = 0) -> [SmartWatchCodingBleKit.BleSleep]
  public class func getSleepStatusDuration(sleeps: [SmartWatchCodingBleKit.BleSleep], _ algorithmType: Swift.Int = 0) -> [Swift.Int : Swift.Int]
  public class func analyseSleepAllDay(_ sleeps: [SmartWatchCodingBleKit.BleSleep], todayStart: Foundation.TimeInterval, todayEnd: Foundation.TimeInterval, zeroClockTime: Foundation.TimeInterval) -> [SmartWatchCodingBleKit.BleSleep]
  public class func getSleepAllDaySegmentStatus(_ sleeps: [SmartWatchCodingBleKit.BleSleep]) -> [Swift.Int : Swift.Int]
  public class func getSleepAllDayStatus(_ sleeps: [SmartWatchCodingBleKit.BleSleep]) -> [Swift.Int : Swift.Int]
  public class func getSleepAllDayViewDatas(_ sleeps: [SmartWatchCodingBleKit.BleSleep]) -> [SmartWatchCodingBleKit.BleSleep]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleActivity : SmartWatchCodingBleKit.BleReadable {
  public static let AUTO_NONE: Swift.Int
  public static let AUTO_WALK: Swift.Int
  public static let AUTO_RUN: Swift.Int
  public static let RUNNING: Swift.Int
  public static let INDOOR: Swift.Int
  public static let OUTDOOR: Swift.Int
  public static let CYCLING: Swift.Int
  public static let SWIMMING: Swift.Int
  public static let WALKING: Swift.Int
  public static let CLIMBING: Swift.Int
  public static let YOGA: Swift.Int
  public static let SPINNING: Swift.Int
  public static let BASKETBALL: Swift.Int
  public static let FOOTBALL: Swift.Int
  public static let BADMINTON: Swift.Int
  public static let MARATHON: Swift.Int
  public static let INDOOR_WALK: Swift.Int
  public static let FREE_TRAINING: Swift.Int
  public static let WEIGHTTRANNING: Swift.Int
  public static let WEIGHTLIFTING: Swift.Int
  public static let BOXING: Swift.Int
  public static let JUMP_ROPE: Swift.Int
  public static let CLIMB_STAIRS: Swift.Int
  public static let SKI: Swift.Int
  public static let SKATE: Swift.Int
  public static let ROLLER_SKATING: Swift.Int
  public static let HULA_HOOP: Swift.Int
  public static let GOLF: Swift.Int
  public static let BASEBALL: Swift.Int
  public static let DANCE: Swift.Int
  public static let PING_PONG: Swift.Int
  public static let HOCKEY: Swift.Int
  public static let PILATES: Swift.Int
  public static let TAEKWONDO: Swift.Int
  public static let HANDBALL: Swift.Int
  public static let DANCE_STREET: Swift.Int
  public static let VOLLEYBALL: Swift.Int
  public static let TENNIS: Swift.Int
  public static let DARTS: Swift.Int
  public static let GYMNASTICS: Swift.Int
  public static let STEPPING: Swift.Int
  public static let ELLIPIICAL: Swift.Int
  public static let ZUMBA: Swift.Int
  public static let CRICHKET: Swift.Int
  public static let TREKKING: Swift.Int
  public static let AEROBICS: Swift.Int
  public static let ROWING_MACHINE: Swift.Int
  public static let RUGBY: Swift.Int
  public static let SIT_UP: Swift.Int
  public static let DUM_BLE: Swift.Int
  public static let BODY_EXERCISE: Swift.Int
  public static let KARATE: Swift.Int
  public static let FENCING: Swift.Int
  public static let MARTIAL_ARTS: Swift.Int
  public static let TAI_CHI: Swift.Int
  public static let FRISBEE: Swift.Int
  public static let ARCHERY: Swift.Int
  public static let HORSE_RIDING: Swift.Int
  public static let BOWLING: Swift.Int
  public static let SURF: Swift.Int
  public static let SOFTBALL: Swift.Int
  public static let SQUASH: Swift.Int
  public static let SAILBOAT: Swift.Int
  public static let PULL_UP: Swift.Int
  public static let SKATEBOARD: Swift.Int
  public static let TRAMPOLINE: Swift.Int
  public static let FISHING: Swift.Int
  public static let POLE_DANCING: Swift.Int
  public static let SQUARE_DANCE: Swift.Int
  public static let JAZZ_DANCE: Swift.Int
  public static let BALLET: Swift.Int
  public static let DISCO: Swift.Int
  public static let TAP_DANCE: Swift.Int
  public static let MODERN_DANCE: Swift.Int
  public static let PUSH_UPS: Swift.Int
  public static let SCOOTER: Swift.Int
  public static let PLANK: Swift.Int
  public static let BILLIARDS: Swift.Int
  public static let ROCK_CLIMBING: Swift.Int
  public static let DISCUS: Swift.Int
  public static let RACE_RIDING: Swift.Int
  public static let WRESTLING: Swift.Int
  public static let HIGH_JUMP: Swift.Int
  public static let PARACHUTE: Swift.Int
  public static let SHOT_PUT: Swift.Int
  public static let LONG_JUMP: Swift.Int
  public static let JAVELIN: Swift.Int
  public static let HAMMER: Swift.Int
  public static let SQUAT: Swift.Int
  public static let LEG_PRESS: Swift.Int
  public static let OFF_ROAD_BIKE: Swift.Int
  public static let MOTOCROSS: Swift.Int
  public static let ROWING: Swift.Int
  public static let CROSSFIT: Swift.Int
  public static let WATER_BIKE: Swift.Int
  public static let KAYAK: Swift.Int
  public static let CROQUET: Swift.Int
  public static let FLOOR_BALL: Swift.Int
  public static let THAI: Swift.Int
  public static let JAI_BALL: Swift.Int
  public static let TENNIS_DOUBLES: Swift.Int
  public static let BACK_TRAINING: Swift.Int
  public static let WATER_VOLLEYBALL: Swift.Int
  public static let WATER_SKIING: Swift.Int
  public static let MOUNTAIN_CLIMBER: Swift.Int
  public static let HIIT: Swift.Int
  public static let BODY_COMBAT: Swift.Int
  public static let BODY_BALANCE: Swift.Int
  public static let TRX: Swift.Int
  public static let TAE_BO: Swift.Int
  public static let GAME: Swift.Int
  public static let BARBELL: Swift.Int
  public static let KETTLEBELL: Swift.Int
  public static let FIGHTING: Swift.Int
  public static let UPPER_LIMBS: Swift.Int
  public static let LOWER_LIMBS: Swift.Int
  public static let SINGLE_POLE: Swift.Int
  public static let DOUBLE_ROD: Swift.Int
  public static let BATTLE_ROPES: Swift.Int
  public static let HANDWHEEL: Swift.Int
  public static let TRACK_AND_FIELD: Swift.Int
  public static let CORE_TRAINING: Swift.Int
  public static let STRETCH: Swift.Int
  public static let MIXED_AEROBICS: Swift.Int
  public static let CROSS_TRAINING: Swift.Int
  public static let STEP_TRAINING: Swift.Int
  public static let ICE_HOCKEY: Swift.Int
  public static let BOBSLEIGH: Swift.Int
  public static let SLED: Swift.Int
  public static let PADDLE_BOARD: Swift.Int
  public static let KAYAK_RAFTING: Swift.Int
  public static let HUNT: Swift.Int
  public static let TUG_OF_WAR: Swift.Int
  public static let FLYING_KITES: Swift.Int
  public static let KITE_KICKING: Swift.Int
  public static let CHESS: Swift.Int
  public static let DRAUGHTS: Swift.Int
  public static let GO: Swift.Int
  public static let BRIDGE: Swift.Int
  public static let BOARD_GAMES: Swift.Int
  public static let PLAYING: Swift.Int
  public static let BOATING: Swift.Int
  public static let MOTORBOAT: Swift.Int
  public static let POLO: Swift.Int
  public static let WATER_POLO: Swift.Int
  public static let SHUTTLECOCK: Swift.Int
  public static let BEACH_SOCCER: Swift.Int
  public static let BEACH_VOLLEYBALL: Swift.Int
  public static let SANDBAG_BALL: Swift.Int
  public static let BOCCE_BALL: Swift.Int
  public static let GATEBALL: Swift.Int
  public static let DODGEBALL: Swift.Int
  public static let FOLK_DANCE: Swift.Int
  public static let LATIN_DANCE: Swift.Int
  public static let HIPHOP_DANCE: Swift.Int
  public static let BREAK_DANCE: Swift.Int
  public static let BALLROOM_DANCE: Swift.Int
  public static let BEGIN: Swift.Int
  public static let ONGOING: Swift.Int
  public static let PAUSE: Swift.Int
  public static let RESUME: Swift.Int
  public static let END: Swift.Int
  public var mTime: Swift.Int
  public var mMode: Swift.Int
  public var mState: Swift.Int
  public var mStep: Swift.Int
  public var mCalorie: Swift.Int
  public var mDistance: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleActivity
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum ByteOrder {
  case BIG_ENDIAN
  case LITTLE_ENDIAN
  public static func == (a: SmartWatchCodingBleKit.ByteOrder, b: SmartWatchCodingBleKit.ByteOrder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleCoachingIds : SmartWatchCodingBleKit.BleReadable {
  public var mCount: Swift.Int
  public var mIds: [Swift.Int]
  required public init(_ data: Foundation.Data?, _ byteOrder: SmartWatchCodingBleKit.ByteOrder)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleRingVibrationSettings : SmartWatchCodingBleKit.BleWritable {
  public var mVibration: Swift.Int
  public var mRing: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleCheckInEveryDay : SmartWatchCodingBleKit.BleWritable {
  public var mStartHour: Swift.Int
  public var mStartMinute: Swift.Int
  public var mEndHour: Swift.Int
  public var mEndMinute: Swift.Int
  public var mStepRanking: Swift.Int
  public var mEarnPoints: Swift.Int
  public var mCheckTime: Swift.Int
  public var mStatus: Swift.Int
  public static let ITEM_LENGTH: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleStandbyWatchFaceSet : SmartWatchCodingBleKit.BleWritable {
  public var mStandbyEnable: Swift.Int
  public var mEnabled: Swift.Int
  public var mBleTimeRange1: SmartWatchCodingBleKit.BleTimeRange
  public var mReserved: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleStandbyWatchFaceSet
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleWashSettings : SmartWatchCodingBleKit.BleWritable {
  public var mEnabled: Swift.Int
  public var mRepeat: Swift.Int
  public var mStartHour: Swift.Int
  public var mStartMinute: Swift.Int
  public var mEndHour: Swift.Int
  public var mEndMinute: Swift.Int
  public var mInterval: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMatchPeriod : SmartWatchCodingBleKit.BleReadable {
  public var mDuration: Swift.Int
  public var mDistance: Swift.Int
  public var mStep: Swift.Int
  public var mCalorie: Swift.Int
  public var mSpeed: Swift.Int
  public var mAvgBpm: Swift.Int
  public var mMaxBpm: Swift.Int
  public var mAltitude: Swift.Int
  public var mMaxAltitude: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleRealTimeMeasurement : SmartWatchCodingBleKit.BleWritable {
  @objc public var mHRSwitch: Swift.Int
  @objc public var mBOSwitch: Swift.Int
  @objc public var mBPSwitch: Swift.Int
  @objc public var mStressSwitch: Swift.Int
  @objc public var mState: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension UIKit.UIColor {
  public func hex(hashPrefix: Swift.Bool = true) -> Swift.String
  public var isDark: Swift.Bool {
    get
  }
  public var isBlackOrWhite: Swift.Bool {
    get
  }
  public var isBlack: Swift.Bool {
    get
  }
  public var isWhite: Swift.Bool {
    get
  }
  public func isDistinct(from color: UIKit.UIColor) -> Swift.Bool
  public func isContrasting(with color: UIKit.UIColor) -> Swift.Bool
}
extension Swift.Array where Element : UIKit.UIColor {
  public func gradient(_ transform: ((_ gradient: inout QuartzCore.CAGradientLayer) -> QuartzCore.CAGradientLayer)? = nil) -> QuartzCore.CAGradientLayer
}
extension UIKit.UIColor {
  public var redComponent: CoreFoundation.CGFloat {
    get
  }
  public var greenComponent: CoreFoundation.CGFloat {
    get
  }
  public var blueComponent: CoreFoundation.CGFloat {
    get
  }
  public var alphaComponent: CoreFoundation.CGFloat {
    get
  }
  public var hueComponent: CoreFoundation.CGFloat {
    get
  }
  public var saturationComponent: CoreFoundation.CGFloat {
    get
  }
  public var brightnessComponent: CoreFoundation.CGFloat {
    get
  }
}
extension UIKit.UIColor {
  public func add(hue: CoreFoundation.CGFloat, saturation: CoreFoundation.CGFloat, brightness: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat) -> UIKit.UIColor
  public func add(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat) -> UIKit.UIColor
  public func add(hsb color: UIKit.UIColor) -> UIKit.UIColor
  public func add(rgb color: UIKit.UIColor) -> UIKit.UIColor
  public func add(hsba color: UIKit.UIColor) -> UIKit.UIColor
  public func add(rgba color: UIKit.UIColor) -> UIKit.UIColor
}
public enum BleThirdPartyType : Swift.Int {
  case ALIPAY
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleThirdPartyData : SmartWatchCodingBleKit.BleWritable {
  public var mType: Swift.Int
  public var mSize: Swift.Int
  public var mIndex: Swift.Int
  public var mSubData: Foundation.Data?
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleEarphoneInfo : SmartWatchCodingBleKit.BleReadable {
  public var mBleAddress: Swift.String
  public var mFirmwareVersion: Swift.String
  public var mBleName: Swift.String
  public var mFirmwareFlag: Swift.String
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleDeviceLanguages : SmartWatchCodingBleKit.BleReadable {
  public var mCode: Swift.Int
  public var mSize: Swift.Int
  public var mList: [Swift.Int]
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAppSportData : SmartWatchCodingBleKit.BleWritable {
  public var mStep: Swift.Int
  public var mDistance: Swift.Int
  public var mCalorie: Swift.Int
  public var mDuration: Swift.Int
  public var mSpm: Swift.Int
  public var mAltitude: Swift.Int
  public var mAirPressure: Swift.Int
  public var mPace: Swift.Int
  public var mSpeed: Swift.Float
  public var mMode: Swift.Int
  public init(_ step: Swift.Int, _ distance: Swift.Int, _ calorie: Swift.Int, _ duration: Swift.Int, _ spm: Swift.Int, _ altiude: Swift.Int, _ airPressure: Swift.Int, _ pace: Swift.Int, _ speed: Swift.Float, _ mode: Swift.Int)
  public init(_ dic: [Swift.String : Any])
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAlipayBindInfo : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mResult: Swift.Int
  public enum AliPayResultType : Swift.Int {
    case SUCCESS
    case CONNECT_FAILED
    case COMMUNICATE_FAILED
    case COMMUNICATE_TIMEOUT
    case OTHER
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public protocol BleScanDelegate {
  func onBluetoothDisabled()
  func onBluetoothEnabled()
  func onScan(_ scan: Swift.Bool)
  func onDeviceFound(_ bleDevice: SmartWatchCodingBleKit.BleDevice)
}
@objc @_inheritsConvenienceInitializers open class BleFoodBalance : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mMealCategoryFlag: Swift.Int
  public var mRiceAmount: Swift.Int
  public var mFishAmount: Swift.Int
  public var mMeatAmount: Swift.Int
  public var mVegetableAmount: Swift.Int
  public var mLiquorAmount: Swift.Int
  public static let CATEGORY_BREAKFAST: Swift.Int
  public static let CATEGORY_LUNCH: Swift.Int
  public static let CATEGORY_DINNER: Swift.Int
  public static let CATEGORY_SNACK: Swift.Int
  public static let AMOUNT_NONE: Swift.Int
  public static let AMOUNT_A_LITTLE: Swift.Int
  public static let AMOUNT_NORMAL: Swift.Int
  public static let AMOUNT_A_LOT: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum BleAppStoreCommand : Swift.Int {
  case COMMAND_UNINSTALL
  case COMMAND_HIDE
  case COMMAND_SHOW
  case COMMAND_INSTALL
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BleAppStoreStatus : Swift.Int {
  case STATUS_INSTALLING
  case STATUS_SUCCESS
  case STATUS_FAIL
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BleAppStorePACKAGE : Swift.String {
  case PACKAGE_SPORT
  case PACKAGE_SPORT_RECORD
  case PACKAGE_SLEEP
  case PACKAGE_WORLD_CLOCK
  case PACKAGE_ALIPAY
  case PACKAGE_NAVIGATION
  case PACKAGE_STOCK
  case PACKAGE_CARD_WALLET
  case PACKAGE_CALCULATOR
  case PACKAGE_GAME_PLAN
  case PACKAGE_GAME_2048
  case PACKAGE_GAME_TTT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BleAppStoreType : Swift.Int {
  case TYPE_APP
  case TYPE_GAME
  case TYPE_BUILTIN
  case TYPE_AUDIOBOOKS
  case TYPE_STUDYCARD
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleAppOp : SmartWatchCodingBleKit.BleWritable {
  public var mCommand: Swift.Int
  public var mPackage: Swift.String
  public var mStatus: Swift.Int
  public static let ITEM_LENGTH: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAppInfo : SmartWatchCodingBleKit.BleReadable {
  public var mPackage: Swift.String
  public var mVersion: Foundation.Data
  public var mName: Swift.String
  public var mSize: Swift.Int
  public var mHide: Swift.Int
  public var mIsGame: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAppInfoList : SmartWatchCodingBleKit.BleReadable {
  public var mList: [SmartWatchCodingBleKit.BleAppInfo]
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAppFile : SmartWatchCodingBleKit.BleWritable {
  public var mPackage: Swift.String
  public var mDatas: Foundation.Data
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public struct BrandInfoImageItem {
  public var mX: Swift.Int
  public var mY: Swift.Int
  public var mAnchor: Swift.Int
  public var mPlayInterval: Swift.Int
  public var mImageInfos: [SmartWatchCodingBleKit.BrandInfoImage]
  public init()
  public init(mX: Swift.Int, mY: Swift.Int, mAnchor: Swift.Int, mPlayInterval: Swift.Int, mImageInfos: [SmartWatchCodingBleKit.BrandInfoImage] = [BrandInfoImage]())
}
public enum CdBitmapCompression : Swift.Int {
  case CD_BITMAP_COMPRESSION_NONE
  case CD_BITMAP_COMPRESSION_RLE_LINE
  case CD_BITMAP_COMPRESSION_JL
  case CD_BITMAP_COMPRESSION_JL_JPEG
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct BrandInfoImage {
  public var mWidth: Swift.Int
  public var mHeight: Swift.Int
  public var mCompression: SmartWatchCodingBleKit.CdBitmapCompression
  public var mPixelFormat: Swift.Int
  public var mImageBuffer: Foundation.Data
  public var hasAlpha: Swift.Int
  public init()
  public init(mWidth: Swift.Int, mHeight: Swift.Int, mCompression: SmartWatchCodingBleKit.CdBitmapCompression, mPixelFormat: Swift.Int, mImageBuffer: Foundation.Data = Data(), hasAlpha: Swift.Int)
}
@_hasMissingDesignatedInitializers open class BrandInfoBuilder {
  public static let CD_RGB_565: Swift.Int
  public static let CD_RGB_565_BE: Swift.Int
  public static let CD_RGB_888: Swift.Int
  public static let GRAVITY_X_LEFT: Swift.Int
  public static let GRAVITY_X_RIGHT: Swift.Int
  public static let GRAVITY_X_CENTER: Swift.Int
  public static let GRAVITY_Y_TOP: Swift.Int
  public static let GRAVITY_Y_BOTTOM: Swift.Int
  public static let GRAVITY_Y_CENTER: Swift.Int
  public class func build(bleName: Swift.String, item: SmartWatchCodingBleKit.BrandInfoImageItem) -> Foundation.Data
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleVersion : SmartWatchCodingBleKit.BleReadable {
  public var mVersion: Swift.String
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension CoreBluetooth.CBManagerState {
  public var mDescription: Swift.String {
    get
  }
}
extension ObjectiveC.NSObject {
  public var mIdentifier: Swift.String {
    get
  }
}
extension Swift.String {
  public init(obj: Swift.AnyObject)
}
@objc @_inheritsConvenienceInitializers open class BleTime : SmartWatchCodingBleKit.BleWritable {
  public var mYear: Swift.Int
  public var mMonth: Swift.Int
  public var mDay: Swift.Int
  public var mHour: Swift.Int
  public var mMinute: Swift.Int
  public var mSecond: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ year: Swift.Int, _ month: Swift.Int, _ day: Swift.Int, _ hour: Swift.Int, _ minute: Swift.Int, _ second: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public static func utc() -> SmartWatchCodingBleKit.BleTime
  public static func local() -> SmartWatchCodingBleKit.BleTime
  public static func ofLocal(_ timeIntervalSince1970: Swift.Int) -> SmartWatchCodingBleKit.BleTime
  @objc deinit
}
extension Foundation.Data {
  public mutating func extract(_ strat: Swift.Int = 0, _ end: Swift.Int = 0) -> Foundation.Data?
  public func hexadecimal() -> Swift.String
  public func hexToDecimal() -> Swift.Int
}
@objc @_inheritsConvenienceInitializers open class BleAlipaySettings : SmartWatchCodingBleKit.BleWritable {
  public var mAlipayVersion: Swift.Int
  public var isActivate: Swift.Int
  public var mAddress: Foundation.Data
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAlarm : SmartWatchCodingBleKit.BleIdObject {
  @objc public var mEnabled: Swift.Int
  @objc public var mRepeat: Swift.Int
  @objc public var mYear: Swift.Int
  @objc public var mMonth: Swift.Int
  @objc public var mDay: Swift.Int
  @objc public var mHour: Swift.Int
  @objc public var mMinute: Swift.Int
  @objc public var mTag: Swift.String
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ enabled: Swift.Int = 1, _ repeat: Swift.Int = 0, _ year: Swift.Int = 2000, _ month: Swift.Int = 1, _ day: Swift.Int = 1, _ hour: Swift.Int = 0, _ minute: Swift.Int = 0, _ tag: Swift.String = "")
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleAlarm
  @objc deinit
}
@objc open class JLFirmwareRepairBleDeviceModel : ObjectiveC.NSObject {
  public var mPeripheral: CoreBluetooth.CBPeripheral
  public var mAdvertisementData: [Swift.String : Any]
  public var mRssi: Swift.Int
  public var name: Swift.String {
    get
  }
  public var identifier: Swift.String {
    get
  }
  public var ota_address: Swift.String {
    get
  }
  public func isJLOTA() -> Swift.Bool
  public var address: Swift.String {
    get
  }
  public var isJLDevice: Swift.Bool {
    get
  }
  public init(_ peripheral: CoreBluetooth.CBPeripheral, _ advertisementData: [Swift.String : Any], _ RSSI: Foundation.NSNumber)
  @objc public init(_ peripheral: CoreBluetooth.CBPeripheral, _ advertisementData: [Swift.String : Any], _ RSSI: Foundation.NSNumber, _ flag: Swift.String = "")
  @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class BleCache {
  public static let shared: SmartWatchCodingBleKit.BleCache
  public var mDeviceInfo: SmartWatchCodingBleKit.BleDeviceInfo?
  public var mDataKeys: [Swift.Int] {
    get
  }
  public var mBleName: Swift.String {
    get
  }
  public var mBleAddress: Swift.String {
    get
  }
  public var mPlatform: Swift.String {
    get
  }
  public var mPrototype: Swift.String {
    get
  }
  public var mFirmwareFlag: Swift.String {
    get
  }
  public var mAGpsType: Swift.Int {
    get
  }
  public var mWatchFaceType: Swift.Int {
    get
  }
  public var mHideDigitalPower: Swift.Int {
    get
  }
  public var mAntiLostSwitch: Swift.Int {
    get
  }
  public var mSleepAlgorithmType: Swift.Int {
    get
  }
  public var mDateFormat: Swift.Int {
    get
  }
  public var mSupportReadDeviceInfo: Swift.Int {
    get
  }
  public var mTemperatureUnit: Swift.Int {
    get
  }
  public var mAppSport: Swift.Int {
    get
  }
  public var mDrinkWater: Swift.Int {
    get
  }
  public var mBloodOxyGenSet: Swift.Int {
    get
  }
  public var mWashSet: Swift.Int {
    get
  }
  public var mDemandWeather: Swift.Int {
    get
  }
  public var mSupportHID: Swift.Int {
    get
  }
  public var miBeacon: Swift.Int {
    get
  }
  public var mSupportWatchFaceId: Swift.Int {
    get
  }
  public var mSupportNewTransportMode: Swift.Int {
    get
  }
  public var mSupportJLWatchFace: Swift.Int {
    get
  }
  public var mSupportFindWatch: Swift.Int {
    get
  }
  public var mSupportWorldClock: Swift.Int {
    get
  }
  public var mSupportStock: Swift.Bool {
    get
  }
  public var mSupportSMSQuickReply: Swift.Int {
    get
  }
  public var mSupportNoDisturbSet: Swift.Int {
    get
  }
  public var mSupportSetWatchPassword: Swift.Int {
    get
  }
  public var mSupportRealTimeMeasurement: Swift.Int {
    get
  }
  public var mSupportPowerSaveMode: Swift.Int {
    get
  }
  public var mSupportQrcode: Swift.Int {
    get
  }
  public var mSupportWeather2: Swift.Int {
    get
  }
  public var mSupportAliPay: Swift.Int {
    get
  }
  public var mSupportStandbySetting: Swift.Int {
    get
  }
  public var mSupport2DAcceleration: Swift.Int {
    get
  }
  public var mSupportMedicationAlarm: Swift.Int {
    get
  }
  public var mSupportReadPackageStatus: Swift.Bool {
    get
  }
  public var mSupportContactSize: Swift.Int {
    get
  }
  public var mSupportVoice: Swift.Bool {
    get
  }
  public var mSupportNavigation: Swift.Bool {
    get
  }
  public var mSupportHeartRateAlarmSetting: Swift.Bool {
    get
  }
  public var mSupportMusicTransfer: Swift.Bool {
    get
  }
  public var mSupportNoDisturbSet2: Swift.Bool {
    get
  }
  public var mSupportSOSSet: Swift.Bool {
    get
  }
  public var mSupportReadLanguages: Swift.Bool {
    get
  }
  public var mSupportGirlCareReminder: Swift.Bool {
    get
  }
  public var mSupportAppPushSwitch: Swift.Bool {
    get
  }
  public var mSupportReceiptCodeSize: Swift.Int {
    get
  }
  public var mSupportGameTimeReminder: Swift.Bool {
    get
  }
  public var mSupportMyCardCodeSize: Swift.Int {
    get
  }
  public var mSupportDeviceSportData: Swift.Bool {
    get
  }
  public var mSupportEbookTransfer: Swift.Int {
    get
  }
  public var mSupportDoubleScreen: Swift.Int {
    get
  }
  public var mSupportCustomLogo: Swift.Int {
    get
  }
  public var mSupportPressureTimingMeasurement: Swift.Bool {
    get
  }
  public var mSupportTimerStandbySet: Swift.Bool {
    get
  }
  public var mSupportSOSSet2: Swift.Bool {
    get
  }
  public var mSupportFallSet: Swift.Bool {
    get
  }
  public var mSupportWalkAndBike: Swift.Bool {
    get
  }
  public var mSupportConnectReminder: Swift.Bool {
    get
  }
  public var mSupportSDCardInfo: Swift.Bool {
    get
  }
  public var mSupportIncomingCallRing: Swift.Bool {
    get
  }
  public var mSupportNotificationLightScreenSet: Swift.Bool {
    get
  }
  public var mSupportBloodPressureCalibration: Swift.Bool {
    get
  }
  public var mSupportOTAFile: Swift.Bool {
    get
  }
  public var mSupportGPSFirmwareFile: Swift.Bool {
    get
  }
  public func mSupportGoMoreSet() -> Swift.Bool
  public func mSupportSHSYAlgorithm() -> Swift.Bool
  public var mSupportQiblaSet: Swift.Bool {
    get
  }
  public var mSupportMeasurementBloodGlucose: Swift.Bool {
    get
  }
  public var mSupportRingVibrationSet: Swift.Bool {
    get
  }
  public var mSupportNetwork: Swift.Bool {
    get
  }
  public var mSupportContactSort: Swift.Bool {
    get
  }
  public var mQrcodeSize: Swift.Int {
    get
  }
  public var mQrcodeContentSize: Swift.UInt {
    get
  }
  public var mSupportStringQrcode: Swift.Int {
    get
  }
  public var mSupportWatchFaceIndex: Swift.Bool {
    get
  }
  public var mSupportSosContact: Swift.Bool {
    get
  }
  public var mSupportGirlCareMonthly: Swift.Bool {
    get
  }
  public var mSupportWearWay: Swift.Bool {
    get
  }
  public var mSupportGestureWake2: Swift.Bool {
    get
  }
  public var mSupportNavImage: Swift.Bool {
    get
  }
  public var mSupportVoiceMaxLength: Swift.Bool {
    get
  }
  public var mSupportAudioBooks: Swift.Bool {
    get
  }
  public var mSupportStudyCards: Swift.Bool {
    get
  }
  public var mSupportAppStore: Swift.Bool {
    get
  }
  public var mAGpsFileUrl: Swift.String {
    get
  }
  public var mNotificationBundleIds: [Swift.String] {
    get
  }
  public var mNotificationBundleIds2: [Swift.String] {
    get
  }
  public func putDeviceIdentify(_ identify: Swift.String?)
  public func getDeviceIdentify() -> Swift.String?
  public func getBool(_ bleKey: SmartWatchCodingBleKit.BleKey, _ keyFlag: SmartWatchCodingBleKit.BleKeyFlag? = nil) -> Swift.Bool
  public func putInt(_ bleKey: SmartWatchCodingBleKit.BleKey, _ value: Swift.Int, _ keyFlag: SmartWatchCodingBleKit.BleKeyFlag? = nil)
  public func getInt(_ bleKey: SmartWatchCodingBleKit.BleKey, _ keyFlag: SmartWatchCodingBleKit.BleKeyFlag? = nil) -> Swift.Int
  public func getString(_ bleKey: SmartWatchCodingBleKit.BleKey, _ keyFlag: SmartWatchCodingBleKit.BleKeyFlag? = nil) -> Swift.String
  public func putObject<T>(_ bleKey: SmartWatchCodingBleKit.BleKey, _ object: T?, _ keyFlag: SmartWatchCodingBleKit.BleKeyFlag? = nil) where T : Swift.Encodable
  public func getObject<T>(_ bleKey: SmartWatchCodingBleKit.BleKey, _ keyFlag: SmartWatchCodingBleKit.BleKeyFlag? = nil) -> T? where T : Swift.Decodable
  public func getObject<T>(_ key: Swift.String) -> T? where T : Swift.Decodable
  public func getObjectNotNil<T>(_ bleKey: SmartWatchCodingBleKit.BleKey, _ t: T? = nil, _ keyFlag: SmartWatchCodingBleKit.BleKeyFlag? = nil) -> T where T : SmartWatchCodingBleKit.BleReadable
  public func putArray<T>(_ bleKey: SmartWatchCodingBleKit.BleKey, _ array: [T]?, _ keyFlag: SmartWatchCodingBleKit.BleKeyFlag? = nil) where T : Swift.Encodable
  public func getArray<T>(_ bleKey: SmartWatchCodingBleKit.BleKey, keyFlag: SmartWatchCodingBleKit.BleKeyFlag? = nil) -> [T] where T : Swift.Decodable
  public func putData(_ bleKey: SmartWatchCodingBleKit.BleKey, _ data: Foundation.Data?, _ keyFlag: SmartWatchCodingBleKit.BleKeyFlag? = nil)
  public func getData(_ bleKey: SmartWatchCodingBleKit.BleKey, _ keyFlag: SmartWatchCodingBleKit.BleKeyFlag? = nil) -> Foundation.Data?
  public func getMtkOtaMeta() -> Swift.String
  public func remove(_ bleKey: SmartWatchCodingBleKit.BleKey, _ keyFlag: SmartWatchCodingBleKit.BleKeyFlag? = nil)
  public func clear()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleTimeRange : SmartWatchCodingBleKit.BleWritable {
  @objc public var mEnabled: Swift.Int
  @objc public var mStartHour: Swift.Int
  @objc public var mStartMinute: Swift.Int
  @objc public var mEndHour: Swift.Int
  @objc public var mEndMinute: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ enabled: Swift.Int, _ startHour: Swift.Int, _ startMinute: Swift.Int, _ endHour: Swift.Int, _ endMinute: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMatchLog : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mPeriodTime: Swift.Int
  public var mPeriodNumber: Swift.Int
  public var mType: Swift.Int
  public var mCount: Swift.Int
  public var mCancelType: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleUserProfile : SmartWatchCodingBleKit.BleWritable {
  public static let METRIC: Swift.Int
  public static let IMPERIAL: Swift.Int
  public static let FEMALE: Swift.Int
  public static let MALE: Swift.Int
  public var mUnit: Swift.Int
  public var mGender: Swift.Int
  public var mAge: Swift.Int
  public var mHeight: Swift.Float
  public var mWeight: Swift.Float
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ unit: Swift.Int, _ gender: Swift.Int, _ age: Swift.Int, _ height: Swift.Float, _ weight: Swift.Float)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleUserProfile
  @objc deinit
}
public var BASE_BLE_DEBUG: Swift.Bool
public func bleLog(_ message: Swift.String)
@objc @_inheritsConvenienceInitializers open class BleHeartRate : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  @objc public var mBpm: Swift.Int
  public var mType: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleHeartRate
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAncMode : SmartWatchCodingBleKit.BleWritable {
  public var mLeftMax: Swift.Int
  public var mRightMax: Swift.Int
  public var mLeftCurVal: Swift.Int
  public var mRightCurVal: Swift.Int
  public static let ITEM_LENGTH: Swift.Int
  public init(mLeftMax: Swift.Int, mRightMax: Swift.Int, mLeftCurVal: Swift.Int, mRightCurVal: Swift.Int)
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BleEarphoneAncSettings : SmartWatchCodingBleKit.BleWritable {
  public static let MODE_CLOSE: Swift.Int
  public static let MODE_DENOISE: Swift.Int
  public static let MODE_TRANSPARENT: Swift.Int
  public var mMode: Swift.Int
  public var mAncModeList: [SmartWatchCodingBleKit.BleAncMode]
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BlePhoneGPSSport : SmartWatchCodingBleKit.BleWritable {
  public var locationSpeed: Swift.Float
  public var locationHeight: Swift.Int
  public var locationDistance: Swift.Float
  public init(_ speed: Swift.Float, _ height: Swift.Int, _ distance: Swift.Float, _ asideOne: Swift.Int, _ asideTwo: Swift.Float)
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BlePhoneGPSSport
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleBloodGlucose : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mValue: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleBloodGlucose
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleIdObject : SmartWatchCodingBleKit.BleWritable {
  @objc public var mId: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleWritable : SmartWatchCodingBleKit.BleReadable, SmartWatchCodingBleKit.BleBuffer {
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  public func toData() -> Foundation.Data
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleWeatherRealtime2 : SmartWatchCodingBleKit.BleWritable {
  public var mTime: Swift.Int
  public var mCityName: Swift.String
  public var mWeather: SmartWatchCodingBleKit.BleWeather2?
  public init(time: Swift.Int, cityName: Swift.String = "", weather: SmartWatchCodingBleKit.BleWeather2? = nil)
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleWeatherRealtime2
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension Swift.Int {
  public func boolValue() -> Swift.Bool
  public func decTobin() -> Swift.String
}
@objc @_inheritsConvenienceInitializers open class BleSosItem : SmartWatchCodingBleKit.BleWritable {
  @objc public var mEnabled: Swift.Int
  @objc public var mPhone: Swift.String
  @objc public var mName: Swift.String
  public static let ITEM_LENGTH: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleSosContact : SmartWatchCodingBleKit.BleWritable {
  public var mEnabled: Swift.Int
  @objc public var mList: [SmartWatchCodingBleKit.BleSosItem]
  public static let ITEM_LENGTH: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public enum BleWeather2Type : Swift.Int {
  case OTHER
  case SUNNY
  case CLOUDY
  case OVERCAST
  case RAINY
  case THUNDER
  case THUNDERSHOWER
  case HIGH_WINDY
  case SNOWY
  case FOGGY
  case SAND_STORM
  case HAZE
  case WIND
  case DRIZZLE
  case HEAVY_RAIN
  case LIGHTNING
  case LIGHT_SNOW
  case HEAVY_SNOW
  case SLEET
  case TORNADO
  case SNOWSTORM
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleWeather2 : SmartWatchCodingBleKit.BleWritable {
  public var mCurrentTemperature: Swift.Int
  public var mMaxTemperature: Swift.Int
  public var mMinTemperature: Swift.Int
  public var mWeatherCode: Swift.Int
  public var mWindSpeed: Swift.Int
  public var mHumidity: Swift.Int
  public var mVisibility: Swift.Int
  public var mUltraVioletIntensity: Swift.Int
  public var mPrecipitation: Swift.Int
  public var mSunriseHour: Swift.Int
  public var mSunrisMinute: Swift.Int
  public var mSunrisSecond: Swift.Int
  public var mSunsetHour: Swift.Int
  public var mSunsetMinute: Swift.Int
  public var mSunsetSecond: Swift.Int
  @available(*, deprecated, message: "Altitude has expired and is no longer used. Please use mAQI attribute")
  public var mAltitude: Swift.Int
  public var mAQI: Swift.Int
  public init(mCurrentTemperature: Swift.Int, mMaxTemperature: Swift.Int, mMinTemperature: Swift.Int, mWeatherCode: Swift.Int, mWindSpeed: Swift.Int, mHumidity: Swift.Int, mVisibility: Swift.Int, mUltraVioletIntensity: Swift.Int, mPrecipitation: Swift.Int, mSunriseHour: Swift.Int, mSunrisMinute: Swift.Int, mSunrisSecond: Swift.Int, mSunsetHour: Swift.Int, mSunsetMinute: Swift.Int, mSunsetSecond: Swift.Int, mAQI: Swift.Int)
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleWeather2
  public func transformWeatherCode(code: Swift.Int) -> Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleGameSettings : SmartWatchCodingBleKit.BleWritable {
  public var mEnabled: Swift.Int
  public var mStartHour1: Swift.Int
  public var mStartMinute1: Swift.Int
  public var mEndHour1: Swift.Int
  public var mEndMinute1: Swift.Int
  public var mStartHour2: Swift.Int
  public var mStartMinute2: Swift.Int
  public var mEndHour2: Swift.Int
  public var mEndMinute2: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMatchYouthSettings : SmartWatchCodingBleKit.BleWritable {
  public var mPeriods: Swift.Int
  public var mPeriodTime: [Swift.Int]
  public var mBreakTime: [Swift.Int]
  public var mVibration: Swift.Int
  public var mButtonType: Swift.Int
  public var mHomeTeamColor: Swift.Int
  public var mGuestTeamColor: Swift.Int
  public var mPenaltyTime: Swift.Int
  public var mGps: Swift.Int
  public var mScreen: Swift.Int
  public var mMatchView: Swift.Int
  public var mTeamNames: [Swift.String]
  public var mRefereeRole: [Swift.String]
  public var mEventTime: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleCalorieIntake : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mMealCategoryFlag: Swift.Int
  public var mCalorie: Swift.Int
  public enum CategoryType : Swift.Int {
    case breakFast
    case lunch
    case dinner
    case snack
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleGirlCareMonthly : SmartWatchCodingBleKit.BleReadable {
  @objc public var mList: [Swift.Int]
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc public enum BleCommand : Swift.Int, Swift.CaseIterable {
  case UPDATE = 0x01, SET = 0x02, CONNECT = 0x03, PUSH = 0x04, DATA = 0x05, CONTROL = 0x06, IO = 0x07, NONE = 0xff
  public var mDisplayName: Swift.String {
    get
  }
  public func getBleKeys() -> [SmartWatchCodingBleKit.BleKey]
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [SmartWatchCodingBleKit.BleCommand]
  public typealias RawValue = Swift.Int
  public static var allCases: [SmartWatchCodingBleKit.BleCommand] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BleKey : Swift.Int, Swift.CaseIterable {
  case OTA = 0x0101, XMODEM = 0x0102
  case TIME = 0x0201, TIME_ZONE = 0x0202, POWER = 0x0203, FIRMWARE_VERSION = 0x0204, BLE_ADDRESS = 0x0205, USER_PROFILE = 0x0206, STEP_GOAL = 0x0207, BACK_LIGHT = 0x0208, SEDENTARINESS = 0x0209, NO_DISTURB_RANGE = 0x020A, VIBRATION = 0x020B, GESTURE_WAKE = 0x020C, HR_ASSIST_SLEEP = 0x020D, HOUR_SYSTEM = 0x020E, LANGUAGE = 0x020F, ALARM = 0x0210
  case UNIT_SETTIMG = 0x0211
  case COACHING = 0x0212, FIND_PHONE = 0x0213, NOTIFICATION_REMINDER = 0x0214, ANTI_LOST = 0x0215, HR_MONITORING = 0x0216, UI_PACK_VERSION = 0x0217, LANGUAGE_PACK_VERSION = 0x0218, SLEEP_QUALITY = 0x0219, DRINKWATER = 0x0221, SHUTDOWN = 0x0222, HEALTH_CARE = 0x021A, TEMPERATURE_DETECTING = 0x021B, AEROBIC_EXERCISE = 0x021C, TEMPERATURE_UNIT = 0x021D, DATE_FORMAT = 0x021E, WATCH_FACE_SWITCH = 0x021F, AGPS_PREREQUISITE = 0x0220, APP_SPORT_DATA = 0x0223, REAL_TIME_HEART_RATE = 0x0224, BLOOD_OXYGEN_SET = 0x0225, WASH_SET = 0x0226, REAL_TIME_TEMPERATURE = 0x0230, REAL_TIME_BLOOD_PRESSURE = 0x0231, WATCHFACE_ID = 0x0227, IBEACON_SET = 0x0228, MAC_QRCODE = 0x0229, TEMPERATURE_VALUE = 0x0232, GAME_SET = 0x0233, FIND_WATCH = 0x0234, SET_WATCH_PASSWORD = 0x0235, REALTIME_MEASUREMENT = 0x0236, POWER_SAVE_MODE = 0x0237, BAC = 0x0515, MATCH_RECORD2 = 0x0516, AVG_HEART_RATE = 0x0517, ALIPAY_BIND_INFO = 0x0518, ECG = 0x0520, HANBAO_VIBRATION = 0x0521, SOS_CALL_LOG = 0x0522, BAC_SET = 0x0238, BAC_RESULT = 0x0244, BAC_RESULT_SET = 0x0245, REALTIME_LOG = 0x02F9, GSENSOR_OUTPUT = 0x02FA, GSENSOR_RAW = 0x02FB, MOTION_DETECT = 0x02FC, LOCATION_GGA = 0x02FD, RAW_SLEEP = 0x02FE, NO_DISTURB_GLOBAL = 0x02FF
  case CALORIES_GOAL = 0x0239
  case DISTANCE_GOAL = 0x023A
  case SLEEP_GOAL = 0x023B
  case LOVE_TAP = 0x0608
  case LOVE_TAP_USER = 0x023C
  case MEDICATION_REMINDER = 0x023D
  case DEVICE_INFO2 = 0x023E
  case NEWS_FEER = 0x040B
  case TARGET_COMPLETION = 0x040F
  case HR_WARNING_SET = 0x023F
  case SLEEP_DETECTION_PERIOC = 0x0240
  case STANDBY_SETTING = 0x0241
  case MEDICATION_ALARM = 0x0246
  case MATCH_SET = 0x0247
  case PACKAGE_STATUS = 0x0249
  case ALIPAY_SET = 0x024A
  case RECORD_PACKET = 0x024B
  case NAVI_INFO = 0x024D
  case SOS_SET = 0x024E, DEVICE_LANGUAGES = 0x024F
  case NOTIFICATION_REMINDER2 = 0x0250
  case GAME_TIME_REMINDER = 0x0251
  case DEVICE_SPORT_DATA = 0x0252
  case PRESSURE_TIMING_MEASUREMENT = 0x0253
  case STANDBY_WATCH_FACE_SET = 0x0254
  case FALL_SET = 0x0255
  case BW_NAVI_INFO = 0x0256
  case CONNECT_REMINDER = 0x0257
  case SDCARD_INFO = 0x0258
  case ACTIVITY_DETAIL = 0x0259
  case NOTIFICATION_LIGHT_SCREEN_SET = 0x025A
  case EARPHONE_POWER = 0x025D
  case EARPHONE_ANC_SET = 0x025E
  case EARPHONE_SOUND_EFFECTS_SET = 0x025F
  case SCREEN_BRIGHTNESS_SET = 0x0260
  case EARPHONE_INFO = 0x0261
  case EARPHONE_STATE = 0x0262
  case EARPHONE_CALL = 0x0263
  case GPS_FIRMWARE_VERSION = 0x0264
  case GOMORE_SET = 0x0265
  case RING_VIBRATION_SET = 0x0266
  case NETWORK_FIRMWARE_VERSION = 0x0267
  case ECG_SET = 0x0268
  case SPORT_DURATION_GOAL = 0x0269
  case WATCHFACE_INDEX = 0x026A
  case SOS_CONTACT = 0x026B
  case GIRL_CARE_MONTHLY = 0x026C
  case GIRL_CARE_MENSTRUATION_UPDATE = 0x026D
  case HEALTH_INDEX = 0x026E
  case CHECK_INEVERY_DAY = 0x026F
  case WEAR_WAY = 0x0270
  case GESTURE_WAKE2 = 0x0271
  case EARPHONE_KEY = 0x0272
  case FIND_EARPHONE = 0x0273
  case HANBAO_SET = 0x0274
  case QIBLA_SET = 0x0275
  case IDENTITY = 0x0301, SESSION = 0x0302, PAIR = 0x0303
  case ANCS_PAIR = 0x0304
  case MUSIC_CONTROL = 0x0402, SCHEDULE = 0x0403
  case WEATHER_REALTIME = 0x0404
  case WEATHER_FORECAST = 0x0405
  case WEATHER_REALTIME2 = 0x040C
  case WEATHER_FORECAST2 = 0x040D
  case LOGIN_DAYS = 0x040E
  case WORLD_CLOCK = 0x0407, STOCK = 0x0408, SMS_QUICK_REPLY_CONTENT = 0x0409, NOTIFICATION2 = 0x040A
  case AUDIO_TEXT = 0x0410
  case DATA_ALL = 0x05ff, ACTIVITY_REALTIME = 0x0501, ACTIVITY = 0x0502, HEART_RATE = 0x0503, BLOOD_PRESSURE = 0x0504, SLEEP = 0x0505, WORKOUT = 0x0506, LOCATION = 0x0507, TEMPERATURE = 0x0508, BLOODOXYGEN = 0x0509, BLOOD_GLUCOSE = 0x0510, HRV = 0x050A, LOG = 0x050B, SLEEP_RAW_DATA = 0x050C, PRESSURE = 0x050D, WORKOUT2 = 0x050E, MATCH_RECORD = 0x050F
  case BODY_STATUS = 0x0511
  case MIND_STATUS = 0x0512
  case CALORIE_INTAKE = 0x0513
  case FOOD_BALANCE = 0x0514
  case CAMERA = 0x0601, PHONE_GPSSPORT = 0x0602, APP_SPORT_STATE = 0x0604, CLASSIC_BLUETOOTH_STATE = 0x0605, IBEACON_CONTROL = 0x0606, DEVICE_SMS_QUICK_REPLY = 0x0607
  case DOUBLE_SCREEN = 0x060A
  case INCOMING_CALL_RING = 0x060C
  case SPORT_END_NOTIFY = 0x060D
  case FILE_PATH = 0x060E
  case APP_OP = 0x060F
  case HANBAO_VIBRATION_STATE = 0x0610
  case MEASUREMENT = 0x0611
  case WATCH_FACE = 0x0701
  case AGPS_FILE = 0x0702
  case FONT_FILE = 0x0703
  case CONTACT = 0x0704
  case UI_FILE = 0x0705
  case MEDIA_FILE = 0x0706
  case LANGUAGE_FILE = 0x0707
  case BRAND_INFO_FILE = 0x0708
  case QRCode = 0x0709
  case THIRD_PARTY_DATA = 0x070A
  case QRCode2 = 0x070B
  case CUSTOM_LOGO = 0x070C
  case OTA_FILE = 0x070D
  case GPS_FIRMWARE_FILE = 0x070E
  case CONTACT_SORT = 0x070F
  case NAVI_IMAGE = 0x0710
  case BLOOD_PRESSURE_CALIBRATION = 0x025B
  case AIR_PRESSURE_CALIBRATION = 0x025C
  case APP_FILE = 0x0711
  case WORKOUT3 = 0x0523
  case NONE = 0xffff
  public var mDisplayName: Swift.String {
    get
  }
  public func getBleKeyFlags() -> [SmartWatchCodingBleKit.BleKeyFlag]
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [SmartWatchCodingBleKit.BleKey]
  public typealias RawValue = Swift.Int
  public static var allCases: [SmartWatchCodingBleKit.BleKey] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BleKeyFlag : Swift.Int {
  case UPDATE = 0x00, READ = 0x10, READ_CONTINUE = 0x11, CREATE = 0x20, DELETE = 0x30, RESET = 0x40, NONE = 0xff
  public var mDisplayName: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleCoaching : SmartWatchCodingBleKit.BleIdObject {
  public var mTitle: Swift.String
  public var mDescription: Swift.String
  public var mRepeat: Swift.Int
  public var mSegments: [SmartWatchCodingBleKit.BleCoachingSegment]
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(_ title: Swift.String, _ description: Swift.String, _ repeat: Swift.Int, _ segments: [SmartWatchCodingBleKit.BleCoachingSegment])
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleWeatherForecast : SmartWatchCodingBleKit.BleWritable {
  public var mTime: Swift.Int
  public var mWeather1: SmartWatchCodingBleKit.BleWeather?
  public var mWeather2: SmartWatchCodingBleKit.BleWeather?
  public var mWeather3: SmartWatchCodingBleKit.BleWeather?
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(time: Swift.Int, weather1: SmartWatchCodingBleKit.BleWeather? = nil, weather2: SmartWatchCodingBleKit.BleWeather? = nil, weather3: SmartWatchCodingBleKit.BleWeather? = nil)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleWeatherForecast
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleSosCallLog : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mDuration: Swift.Int
  public var mType: Swift.Int
  public var mPhone: Swift.String
  public var mLastHrTime: Swift.Int
  public var mLastBOTime: Swift.Int
  public var mBpm: Swift.Int
  public var mBOValue: Swift.Int
  public static let ITEM_LENGTH: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleHrWarningSettings : SmartWatchCodingBleKit.BleWritable {
  public var mHighSwitch: Swift.Int
  public var mHighValue: Swift.Int
  public var mLowSwitch: Swift.Int
  public var mLowValue: Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Swift.Int]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleHrWarningSettings
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleGestureWake2 : SmartWatchCodingBleKit.BleWritable {
  public var mEnabled: Swift.Int
  public var mBleTimeRange: SmartWatchCodingBleKit.BleTimeRange
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleGestureWake2
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMatchRecord : SmartWatchCodingBleKit.BleReadable {
  public var mStart: Swift.Int
  public var mType: Swift.Int
  public var mPeriodListSize: Swift.Int
  public var mLogListSize: Swift.Int
  public var mUndefined: Swift.Int
  public var mPeriod: SmartWatchCodingBleKit.BleMatchPeriod
  public var mPeriodArray: [SmartWatchCodingBleKit.BleMatchPeriod]
  public var mLogArray: [SmartWatchCodingBleKit.BleMatchLog]
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleBACResultSettings : SmartWatchCodingBleKit.BleWritable {
  public var mLow: Swift.Int
  public var mHigh: Swift.Int
  public var mNormal: Swift.Int
  public var mDuration: Swift.Int
  public var mVibrate: Swift.Int
  public static let LEVE_BLACK: Swift.Int
  public static let LEVE_RED: Swift.Int
  public static let LEVE_GREEN: Swift.Int
  public static let LEVE_BLUE: Swift.Int
  public static let LEVE_WHITE: Swift.Int
  public static let LEVE_YELLOW: Swift.Int
  public static let LEVE_PURPLE: Swift.Int
  public static let LEVE_CYAN_BLUE: Swift.Int
  public init(mLow: Swift.Int, mHigh: Swift.Int, mNormal: Swift.Int, mDuration: Swift.Int, mVibrate: Swift.Int)
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BlePressure : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mPressure: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BlePressure
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleLogText : SmartWatchCodingBleKit.BleReadable {
  public var mContent: Swift.String
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleDeviceInfo2 : SmartWatchCodingBleKit.BleReadable {
  public var mBleAddress: Swift.String {
    get
  }
  public var mClassicAddress: Swift.String {
    get
  }
  public var mFirmwareVersion: Swift.String {
    get
  }
  public var mUiVersion: Swift.String {
    get
  }
  public var mLanguageVersion: Swift.String {
    get
  }
  public var mLanguageCode: Swift.Int {
    get
  }
  public var mBleName: Swift.String {
    get
  }
  public var mPlatform: Swift.String {
    get
  }
  public var mPrototype: Swift.String {
    get
  }
  public var mFirmwareFlag: Swift.String {
    get
  }
  public var mFullVersion: Swift.String {
    get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleDeviceInfo2
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleAgpsPrerequisite : SmartWatchCodingBleKit.BleWritable {
  public var mLongitude: Swift.Float
  public var mLatitude: Swift.Float
  public var mAltitude: Swift.Int
  public init(_ longitude: Swift.Float, _ latitude: Swift.Float, _ altitude: Swift.Int)
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleAgpsPrerequisite
  @objc deinit
}
public let BLE_MAIN_SERVICE: Swift.String
public enum QRCodeStremType : Swift.Int {
  case NUCLEIC_ACID_CODE
  case RECEIPT_CODE
  case MY_CARD_CODE
  case QRCODE_CODE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleQRcodeList : SmartWatchCodingBleKit.BleWritable {
  public var qrList: [SmartWatchCodingBleKit.BleQrcode2]
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(array: [SmartWatchCodingBleKit.BleQrcode2])
  public func getStreamType(_ isStr: Swift.Bool, _ codeType: SmartWatchCodingBleKit.QRCodeStremType) -> Swift.Int
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleEarphonePower : SmartWatchCodingBleKit.BleWritable {
  public var mLeftPower: Swift.Int
  public var mRightPower: Swift.Int
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc open class BleScanner : ObjectiveC.NSObject {
  public var mBleScanDelegate: (any SmartWatchCodingBleKit.BleScanDelegate)?
  public var mBleScanFilter: (any SmartWatchCodingBleKit.BleScanFilter)?
  public var mCentralManager: CoreBluetooth.CBCentralManager!
  public var isScanning: Swift.Bool
  public var mScanDuration: Swift.Double
  public init(_ serviceUuids: [CoreBluetooth.CBUUID]? = nil)
  public func scan(_ scan: Swift.Bool)
  public func exit()
  public func getConnectedDevices() -> [SmartWatchCodingBleKit.BleDevice]
  @objc deinit
}
extension SmartWatchCodingBleKit.BleScanner : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @available(iOS 13.0, *)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didUpdateANCSAuthorizationFor peripheral: CoreBluetooth.CBPeripheral)
}
@objc @_inheritsConvenienceInitializers open class BleFilePath : SmartWatchCodingBleKit.BleWritable {
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleActivityDetail : SmartWatchCodingBleKit.BleReadable {
  public var mType: SmartWatchCodingBleKit.BleActivityDetail.ActivityDetailType
  public var mList: [Swift.Int]
  public enum ActivityDetailType : Swift.UInt {
    case TYPE_STEP
    case TYPE_CAL
    case TYPE_DISTANCE
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleContactPerson : SmartWatchCodingBleKit.BleWritable {
  public var userName: Swift.String
  public var userPhone: Swift.String
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  public init(username: Swift.String, userphone: Swift.String)
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleContactPerson
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JLFirmwareUpgradeViewModel : ObjectiveC.NSObject, SmartWatchCodingBleKit.SMFirmwareOTAProgressDelegate {
  weak public var delegate: (any SmartWatchCodingBleKit.SMFirmwareOTAProgressDelegate)?
  public init(filePath: Swift.String, mainServiceUUID: Swift.String, uuid: Swift.String, isDfu: Swift.Bool, address: Swift.String)
  public func startJL_OTA()
  public func destroy()
  @objc public func bleConnectorInvokeMethod(_ method: Swift.String, _ argModel: SmartWatchCodingBleKit.SMFirmwareOTAProgressModel)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleDeviceSportData : SmartWatchCodingBleKit.BleReadable {
  public var mDuration: Swift.Int
  public var mBpm: Swift.Int
  public var mSpm: Swift.Int
  public var mStep: Swift.Int
  public var mDistance: Swift.Int
  public var mCalorie: Swift.Int
  public var mSpeed: Swift.Int
  public var mPace: Swift.Int
  public var mAltitude: Swift.Int
  public var mRiseAltitude: Swift.Int
  public var mMode: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleDeviceSportData
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleWorkOut3 : SmartWatchCodingBleKit.BleReadable {
  public var mStart: Swift.Int
  public var mEnd: Swift.Int
  public var mDuration: Swift.Int
  public var mAltitude: Swift.Int
  public var mAirPressure: Swift.Int
  public var mSpm: Swift.Int
  public var mMode: Swift.Int
  public var mStep: Swift.Int
  public var mDistance: Swift.Int
  public var mCalorie: Swift.Int
  public var mSpeed: Swift.Int
  public var mPace: Swift.Int
  public var mAvgBpm: Swift.Int
  public var mMaxBpm: Swift.Int
  public var mMinBpm: Swift.Int
  public var mMaxSpm: Swift.Int
  public var mMinSpm: Swift.Int
  public var mMaxPace: Swift.Int
  public var mMinPace: Swift.Int
  public var mMaxAltitude: Swift.Int
  public var mMinAltitude: Swift.Int
  public var mMinStress: Swift.Int
  public var mMaxStress: Swift.Int
  public var mAvgStress: Swift.Int
  public var mMaxSpeed: Swift.Int
  public var mMinSpeed: Swift.Int
  public var mMetTotal: Swift.Int
  public var mAerobic: Swift.Float
  public var mAnaerobic: Swift.Float
  public var mStamina: Swift.Int
  public var mAvgSpeed: Swift.Float
  public var mCadence: Swift.Int
  public var mMaxCadence: Swift.Int
  public var mCnt: Swift.Int
  public var mBpmZoneCount: [Swift.Int]
  public var mPersonalZone: [Swift.Int]
  public var mLactateThresholdPace: Swift.Int
  public var mRecoveryTime: Swift.Int
  public var mTrainingLoad: Swift.Int
  public var mMaxVO2: Swift.Int
  public var mLactateThresholdHr: Swift.Int
  public var mAlgorithmMarking: Swift.Int
  public var mPathCount: Swift.Int
  public var mPathSampleInterval: Swift.Int
  public var mPathPoints: [[Swift.Float]]
  public var mHrPathCount: Swift.Int
  public var mHrPathSampleInterval: Swift.Int
  public var mHrPathPoints: [Swift.Int]
  public var mPacePathCount: Swift.Int
  public var mPacePathSampleInterval: Swift.Int
  public var mPacePathPoints: [Swift.Int]
  public var mSpeedPathCount: Swift.Int
  public var mSpeedPathSampleInterval: Swift.Int
  public var mSpeedPathPoints: [Swift.Int]
  public var mCadencePathCount: Swift.Int
  public var mCadencePathSampleInterval: Swift.Int
  public var mCadencePathPoints: [Swift.Int]
  public var mAltitudePathCount: Swift.Int
  public var mAltitudePathSampleInterval: Swift.Int
  public var mAltitudePathPoints: [Swift.Int]
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleBloodOxygen : SmartWatchCodingBleKit.BleReadable {
  @objc public var mTime: Swift.Int
  @objc public var mValue: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleBloodOxygen
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMatchRecord2 : SmartWatchCodingBleKit.BleReadable {
  public var mStart: Swift.Int
  public var mType: Swift.Int
  public var mPeriodListSize: Swift.Int
  public var mLogListSize: Swift.Int
  public var mIsStopWatchData: Swift.Int
  public var mPeriod: SmartWatchCodingBleKit.BleMatchPeriod2
  public var mPeriodList: [SmartWatchCodingBleKit.BleMatchPeriod2]
  public var mLogList: [SmartWatchCodingBleKit.BleMatchLog2]
  public var mStopWatchList: [Swift.Int]
  public var mTeamInfo: SmartWatchCodingBleKit.BleMatchRecordTeam
  public var mWeather: SmartWatchCodingBleKit.BleWeather
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
extension SmartWatchCodingBleKit.BleMatchRecord2 {
  public enum MatchType : Swift.Int {
    case YOUTH
    case CLASSIC
    case PROFILE
    case TRAINING
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers open class BleSleepMonitoringSettings : SmartWatchCodingBleKit.BleWritable {
  public var mEnabled: Swift.Int
  public var mStartHour: Swift.Int
  public var mStartMinute: Swift.Int
  public var mEndHour: Swift.Int
  public var mEndMinute: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleTemperature : SmartWatchCodingBleKit.BleReadable {
  public var mTime: Swift.Int
  public var mTemperature: Swift.Int
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  public func toDictionary() -> [Swift.String : Any]
  public func dictionaryToObjct(_ dic: [Swift.String : Any]) -> SmartWatchCodingBleKit.BleTemperature
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public protocol BleScanFilter {
  func match(_ bleDevice: SmartWatchCodingBleKit.BleDevice) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class IdentifierFilter : SmartWatchCodingBleKit.BleScanFilter {
  public var mIdentifier: Swift.String
  public var mConnecType: SmartWatchCodingBleKit.BleConnectorType
  public func match(_ bleDevice: SmartWatchCodingBleKit.BleDevice) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers open class BaseBleMessenger {
  public func getPacketSize() -> Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BleMatchRecordTeam : SmartWatchCodingBleKit.BleReadable {
  public var mTeamNames: [Swift.String]
  public var mHomeTeamColor: Swift.Int
  public var mGuestTeamColor: Swift.Int
  public var mRefereeRoles: [Swift.String]
  public var mHomePlayers: [SmartWatchCodingBleKit.BleMatchRecordPlayer]
  public var mGuestPlayers: [SmartWatchCodingBleKit.BleMatchRecordPlayer]
  public var mGoalTypes: [Swift.String]
  public var mYellowCardTypes: [Swift.String]
  public var mRedCardTypes: [Swift.String]
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = super)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
public enum MatchSetType : Swift.Int {
  case YOUTH_MATCH
  case CLASSIC_MATCH
  case PRO_MATCH
  case INTERVAL_TRAINING
  case HOME_TEAM_PLAYER_LIST
  case GUEST_TEAM_PLAYER_LIST
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MatchColor : Swift.Int {
  case RED
  case BLUE
  case GREEN
  case YELLOW
  case ORANGE
  case PURPLE
  case PINK
  case BROWN
  case GREY
  case BLACK
  case WHITE
  case MAX
  public static func rawToUIColor(_ num: Swift.Int) -> UIKit.UIColor?
  public func tranToUIColor() -> UIKit.UIColor
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MatchButtomType : Swift.Int {
  case SHORT_PRESS
  case LONG_PRESS
  case DOUBLE_PRESS
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MatchMainView : Swift.Int {
  case ORIGINAL
  case HIGH_VISIBILITY
  case DAYLIGHT
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class BleMatchClassicSettings : SmartWatchCodingBleKit.BleWritable {
  public var mPeriods: Swift.Int
  public var mPeriodTime: [Swift.Int]
  public var mBreakTime: [Swift.Int]
  public var mVibration: Swift.Int
  public var mButtonType: Swift.Int
  public var mGps: Swift.Int
  public var mScreen: Swift.Int
  public var mMatchView: Swift.Int
  public var mTeamNames: [Swift.String]
  public var mRefereeRole: [Swift.String]
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  required public init(_ data: Foundation.Data? = nil, _ byteOrder: SmartWatchCodingBleKit.ByteOrder = .BIG_ENDIAN)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension SmartWatchCodingBleKit.FileCompanion : Swift.Equatable {}
extension SmartWatchCodingBleKit.FileCompanion : Swift.Hashable {}
extension SmartWatchCodingBleKit.FileCompanion : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleContactSortType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleContactSortType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleContactSortType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleNavigationState : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleNavigationState : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleNavigationState : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleNavTurnType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleNavTurnType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleNavTurnType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleNaviMode : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleNaviMode : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleNaviMode : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleMedicationType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleMedicationType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleMedicationType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleMedicationUNIT : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleMedicationUNIT : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleMedicationUNIT : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleMatchLog2.EventType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleMatchLog2.EventType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleMatchLog2.EventType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleRecordPacket.VoiceModel : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleRecordPacket.VoiceModel : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleRecordPacket.VoiceModel : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleRecordPacket.TransferStatus : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleRecordPacket.TransferStatus : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleRecordPacket.TransferStatus : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleEarphoneStateType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleEarphoneStateType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleEarphoneStateType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BlePushAppType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BlePushAppType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BlePushAppType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleEarphoneKeyType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleEarphoneKeyType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleEarphoneKeyType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleMeasurementType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleMeasurementType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleMeasurementType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleWatchFaceType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleWatchFaceType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleWatchFaceType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleEarphoneSoundEffectsType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleEarphoneSoundEffectsType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleEarphoneSoundEffectsType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleBWNaviInfo.NaviMode : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleBWNaviInfo.NaviMode : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleBWNaviInfo.NaviMode : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleBWNaviInfo.NaviState : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleBWNaviInfo.NaviState : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleBWNaviInfo.NaviState : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.Stage : Swift.Equatable {}
extension SmartWatchCodingBleKit.Stage : Swift.Hashable {}
extension SmartWatchCodingBleKit.Stage : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.CompletionCondition : Swift.Equatable {}
extension SmartWatchCodingBleKit.CompletionCondition : Swift.Hashable {}
extension SmartWatchCodingBleKit.CompletionCondition : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.HrZone : Swift.Equatable {}
extension SmartWatchCodingBleKit.HrZone : Swift.Hashable {}
extension SmartWatchCodingBleKit.HrZone : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.SegmentActivity : Swift.Equatable {}
extension SmartWatchCodingBleKit.SegmentActivity : Swift.Hashable {}
extension SmartWatchCodingBleKit.SegmentActivity : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.OTAStatus : Swift.Equatable {}
extension SmartWatchCodingBleKit.OTAStatus : Swift.Hashable {}
extension SmartWatchCodingBleKit.OTAStatus : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.SdkMethod : Swift.Equatable {}
extension SmartWatchCodingBleKit.SdkMethod : Swift.Hashable {}
extension SmartWatchCodingBleKit.SdkMethod : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleQiblaMethodType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleQiblaMethodType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleQiblaMethodType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleConnectorType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleConnectorType : Swift.Hashable {}
extension SmartWatchCodingBleKit.ByteOrder : Swift.Equatable {}
extension SmartWatchCodingBleKit.ByteOrder : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleThirdPartyType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleThirdPartyType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleThirdPartyType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleAlipayBindInfo.AliPayResultType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleAlipayBindInfo.AliPayResultType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleAlipayBindInfo.AliPayResultType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleAppStoreCommand : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleAppStoreCommand : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleAppStoreCommand : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleAppStoreStatus : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleAppStoreStatus : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleAppStoreStatus : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleAppStorePACKAGE : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleAppStorePACKAGE : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleAppStorePACKAGE : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleAppStoreType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleAppStoreType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleAppStoreType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.CdBitmapCompression : Swift.Equatable {}
extension SmartWatchCodingBleKit.CdBitmapCompression : Swift.Hashable {}
extension SmartWatchCodingBleKit.CdBitmapCompression : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleWeather2Type : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleWeather2Type : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleWeather2Type : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleCalorieIntake.CategoryType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleCalorieIntake.CategoryType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleCalorieIntake.CategoryType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleCommand : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleCommand : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleCommand : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleKey : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleKey : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleKey : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleKeyFlag : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleKeyFlag : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleKeyFlag : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.QRCodeStremType : Swift.Equatable {}
extension SmartWatchCodingBleKit.QRCodeStremType : Swift.Hashable {}
extension SmartWatchCodingBleKit.QRCodeStremType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleActivityDetail.ActivityDetailType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleActivityDetail.ActivityDetailType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleActivityDetail.ActivityDetailType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.BleMatchRecord2.MatchType : Swift.Equatable {}
extension SmartWatchCodingBleKit.BleMatchRecord2.MatchType : Swift.Hashable {}
extension SmartWatchCodingBleKit.BleMatchRecord2.MatchType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.MatchSetType : Swift.Equatable {}
extension SmartWatchCodingBleKit.MatchSetType : Swift.Hashable {}
extension SmartWatchCodingBleKit.MatchSetType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.MatchColor : Swift.Equatable {}
extension SmartWatchCodingBleKit.MatchColor : Swift.Hashable {}
extension SmartWatchCodingBleKit.MatchColor : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.MatchButtomType : Swift.Equatable {}
extension SmartWatchCodingBleKit.MatchButtomType : Swift.Hashable {}
extension SmartWatchCodingBleKit.MatchButtomType : Swift.RawRepresentable {}
extension SmartWatchCodingBleKit.MatchMainView : Swift.Equatable {}
extension SmartWatchCodingBleKit.MatchMainView : Swift.Hashable {}
extension SmartWatchCodingBleKit.MatchMainView : Swift.RawRepresentable {}
