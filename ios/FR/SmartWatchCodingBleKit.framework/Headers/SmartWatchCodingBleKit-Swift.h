#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef SMARTWATCHCODINGBLEKIT_SWIFT_H
#define SMARTWATCHCODINGBLEKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SmartWatchCodingBleKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC22SmartWatchCodingBleKit9ABHBleLog")
@interface ABHBleLog : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class CBPeripheral;
@class NSString;

/// CBPeripheral的包装类，代表与一个蓝牙设备的连接。
/// 1.在指定连接目标后会一直重连，直到连接成功。
/// 2.重连时会先查找系统已连接的设备，如果未找到，则扫描附近的设备。
/// 3.当检测到手机蓝牙开启时，如果之前有指定连接目标，会重新进行连接。
/// 4.连接成功后自动执行发现服务、开启通知和设置MTU。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BaseBleConnector")
@interface BaseBleConnector : NSObject
/// 使用传递一个外设的方式连接设备
/// \param peripheral 外设
///
- (void)setTargetDevice:(CBPeripheral * _Nonnull)peripheral;
/// 给OC调用的方法
- (void)setTargetDeviceWithMacAddrress:(NSString * _Nonnull)macAddrress;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class CBCentralManager;

@interface BaseBleConnector (SWIFT_EXTENSION(SmartWatchCodingBleKit)) <CBCentralManagerDelegate>
/// 监听手机蓝牙的状态。
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didUpdateANCSAuthorizationForPeripheral:(CBPeripheral * _Nonnull)peripheral SWIFT_AVAILABILITY(ios,introduced=13.0);
@end

@class CBService;
@class CBCharacteristic;

@interface BaseBleConnector (SWIFT_EXTENSION(SmartWatchCodingBleKit)) <CBPeripheralDelegate>
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (void)peripheralIsReadyToSendWriteWithoutResponse:(CBPeripheral * _Nonnull)peripheral;
@end


/// 工具类，为方便Data和Object之间的转换。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit7BleData")
@interface BleData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 工具类，为方便从Data转换为Object。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleReadable")
@interface BleReadable : BleData
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleActivity")
@interface BleActivity : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 每小时步数、卡路里、距离存储
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit17BleActivityDetail")
@interface BleActivityDetail : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 工具类，为方便从Object转换为Data。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleWritable")
@interface BleWritable : BleReadable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleAddressBook")
@interface BleAddressBook : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleAerobicSettings")
@interface BleAerobicSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 手机发送agps前置条件给设备
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit19BleAgpsPrerequisite")
@interface BleAgpsPrerequisite : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 气压标定
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit25BleAirPressureCalibration")
@interface BleAirPressureCalibration : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 特殊的类，放入缓存前必须指定一个0~0xfe之间的，并且与缓存中该类其他实例不同的一id，通过该id可以标识设备和本地缓存上该类的唯一实例。
/// 一般的对象，比如[BleGestureWake]、[BleSedentarinessSettings]和[BleHrMonitoringSettings]等在缓存中最多只有一个实例，
/// 所以无须id，每次修改都是修改该唯一实例。
/// 但是有些对象，比如[BleAlarm]、[BleSchedule]和[BleCoaching]等，缓存的是一个列表。根据协议，修改和删除时必须指定id来确定要操作
/// 是哪个目标实例，该类就是为处理这种情况。
/// id属性是框架内部处理的：
/// 1.当发送创建指令时，调用[BleConnector.sendObject]创建单个对象或[BleConnector.sendArray]创建多个对象，框架内部会为每个对象
/// 分配一个0~0xfe之间还未缓存的id，然后发送给设备并将其追加到本地缓存列表末尾。
/// 2.当发送删除指令时，调用[BleConnector.sendInt8]，在把该id发送给设备后，设备会删除该对象，框架内部也会根据id在已缓存列表找到与之
/// 匹配的实例，并将其从缓存中移除，如果id为[ID_ALL]，会清空设备和本地缓存中该类所有实例。
/// 3.当发送修改指令时，调用[BleConnector.sendObject]，在把该对象发送给设备后，设备会根据id修改该对象，框架内部会根据该对象的id在
/// 已缓存列表找到与之匹配的实例，并将其原地替换。
/// 4.当发送读取指令时，调用[BleConnector.sendInt8]，在把该id发送给设备后，设备会根据id查找与之匹配的实例，并回复给手机，如果id为
/// [ID_ALL]，则设置会查找该类所有实例，并将其返回。
/// 5.当发送重置指令时，框架内部会从0开始依次为其分配一个id，然后先[BleConnector.sendInt8]让设备删除已有的所有实例，接着调用
/// [BleConnector.sendArray]创新新的列表以实现重置的效果，同时本地也会用新的列表覆盖旧的列表。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleIdObject")
@interface BleIdObject : BleWritable
@property (nonatomic) NSInteger mId;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit8BleAlarm")
@interface BleAlarm : BleIdObject
@property (nonatomic) NSInteger mEnabled;
@property (nonatomic) NSInteger mRepeat;
@property (nonatomic) NSInteger mYear;
@property (nonatomic) NSInteger mMonth;
@property (nonatomic) NSInteger mDay;
@property (nonatomic) NSInteger mHour;
@property (nonatomic) NSInteger mMinute;
@property (nonatomic, copy) NSString * _Nonnull mTag;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit17BleAlipayBindInfo")
@interface BleAlipayBindInfo : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit17BleAlipaySettings")
@interface BleAlipaySettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleAncMode")
@interface BleAncMode : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// app文件
/// 包名：内置应用以 built-in 开头，安装内置时APP可以发空数据进行伪下载流程，设备端在伪下载后进行伪安装
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleAppFile")
@interface BleAppFile : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleAppInfo")
@interface BleAppInfo : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleAppInfoList")
@interface BleAppInfoList : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit8BleAppOp")
@interface BleAppOp : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 由BlePhoneWorkOut类名, 更改为: BleAppSportData
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleAppSportData")
@interface BleAppSportData : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BleAppSportState")
@interface BleAppSportState : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 平均心率
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleAvgHeartRate")
@interface BleAvgHeartRate : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 酒精浓度
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit6BleBAC")
@interface BleBAC : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 酒精含量测试结果提示设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit20BleBACResultSettings")
@interface BleBACResultSettings : BleWritable
@end


/// 骑行和步行导航信息
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleBWNaviInfo")
@interface BleBWNaviInfo : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleBleAddress")
@interface BleBleAddress : BleReadable
@end


/// 血糖
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleBloodGlucose")
@interface BleBloodGlucose : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit22BleBloodOxyGenSettings")
@interface BleBloodOxyGenSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleBloodOxygen")
@interface BleBloodOxygen : BleReadable
@property (nonatomic) NSInteger mTime;
@property (nonatomic) NSInteger mValue;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BleBloodPressure")
@interface BleBloodPressure : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 血压标定
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit27BleBloodPressureCalibration")
@interface BleBloodPressureCalibration : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 身体数据
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleBodyStatus")
@interface BleBodyStatus : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BleCalorieIntake")
@interface BleCalorieIntake : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleCheckInEveryDay")
@interface BleCheckInEveryDay : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 不支持[BleConnector.sendArray]，所以不能一次创建多个，也不能执行重置操作。
/// 也不支持[BleConnector.sendInt8]，删除时只需要删除本地缓存。
/// 读取时只支持[ID_ALL]，不支持读取单个，而且设备并不是返回该类的列表，而是[BleCoachingIds]对象，里面包含了设备上已存在的实例的id列表。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleCoaching")
@interface BleCoaching : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleCoachingIds")
@interface BleCoachingIds : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleCoachingSegment")
@interface BleCoachingSegment : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

typedef SWIFT_ENUM(NSInteger, BleCommand, open) {
  BleCommandUPDATE = 0x01,
  BleCommandSET = 0x02,
  BleCommandCONNECT = 0x03,
  BleCommandPUSH = 0x04,
  BleCommandDATA = 0x05,
  BleCommandCONTROL = 0x06,
  BleCommandIO = 0x07,
  BleCommandNONE = 0xff,
};

@protocol BleHandleDelegate;
enum BleKey : NSInteger;
enum BleKeyFlag : NSInteger;

SWIFT_CLASS("_TtC22SmartWatchCodingBleKit12BleConnector")
@interface BleConnector : BaseBleConnector
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BleConnector * _Nonnull shared;)
+ (BleConnector * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (void)launch;
- (void)addBleHandleDelegate:(NSString * _Nonnull)tag :(id <BleHandleDelegate> _Nonnull)bleHandleDelegate;
- (BOOL)sendInt8:(enum BleKey)bleKey :(enum BleKeyFlag)bleKeyFlag :(NSInteger)value :(BOOL)reply :(BOOL)nack SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BleContactPerson")
@interface BleContactPerson : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 联系人排序设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleContactSort")
@interface BleContactSort : BleWritable
@end


/// 联系人排序设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleContactSortItem")
@interface BleContactSortItem : BleWritable
@end



SWIFT_CLASS("_TtC22SmartWatchCodingBleKit9BleDevice")
@interface BleDevice : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// 读取设备已经安装的应用信息
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit21BleDeviceAppStoreInfo")
@interface BleDeviceAppStoreInfo : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleDeviceInfo")
@interface BleDeviceInfo : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 精简的设备信息
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleDeviceInfo2")
@interface BleDeviceInfo2 : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleDeviceLanguages")
@interface BleDeviceLanguages : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleDeviceSportData")
@interface BleDeviceSportData : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleDoubleScreenSettings")
@interface BleDoubleScreenSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit21BleDrinkWaterSettings")
@interface BleDrinkWaterSettings : BleWritable
@property (nonatomic) NSInteger mEnabled;
@property (nonatomic) NSInteger mRepeat;
@property (nonatomic) NSInteger mStartHour;
@property (nonatomic) NSInteger mStartMinute;
@property (nonatomic) NSInteger mEndHour;
@property (nonatomic) NSInteger mEndMinute;
@property (nonatomic) NSInteger mInterval;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 耳机降噪设置，参考杰里的结构
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit22BleEarphoneAncSettings")
@interface BleEarphoneAncSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 耳机信息
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleEarphoneInfo")
@interface BleEarphoneInfo : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 耳机按键
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleEarphoneKey")
@interface BleEarphoneKey : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BleEarphonePower")
@interface BleEarphonePower : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit31BleEarphoneSoundEffectsSettings")
@interface BleEarphoneSoundEffectsSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BleEarphoneState")
@interface BleEarphoneState : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 心电
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit6BleEcg")
@interface BleEcg : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 定时心电
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleEcgSettings")
@interface BleEcgSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleFileInfo")
@interface BleFileInfo : BleReadable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleFileList")
@interface BleFileList : BleReadable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleFilePath")
@interface BleFilePath : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit19BleFileTransmission")
@interface BleFileTransmission : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 查找耳机
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleFindEarphone")
@interface BleFindEarphone : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleFoodBalance")
@interface BleFoodBalance : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleGameSettings")
@interface BleGameSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit19BleGameTimeReminder")
@interface BleGameTimeReminder : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class BleTimeRange;

SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleGestureWake")
@interface BleGestureWake : BleWritable
@property (nonatomic, strong) BleTimeRange * _Nonnull mBleTimeRange;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleGestureWake2")
@interface BleGestureWake2 : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit27BleGirlCareMenstruationDate")
@interface BleGirlCareMenstruationDate : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 生理期月报
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleGirlCareMonthly")
@interface BleGirlCareMonthly : BleReadable
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull mList;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 女性生理期周期
/// 生理期 -> 安全期 -> 排卵期 -> 安全期 -> 生理期
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit17BleGirlCarePeriod")
@interface BleGirlCarePeriod : BleReadable
@end


/// 女性生理期周期开始日期
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit21BleGirlCarePeriodDate")
@interface BleGirlCarePeriodDate : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit17BleGoMoreSettings")
@interface BleGoMoreSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit17BleHanBaoSettings")
@interface BleHanBaoSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 鼾宝震动数据
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleHanBaoVibration")
@interface BleHanBaoVibration : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class BleSedentarinessSettings;
@class BleNoDisturbSettings;
@class BleMedicationAlarm;
@class BleLanguagePackVersion;
@class BleHeartRate;
@class BleSleep;
@class BleSleepQuality;
@class BleWorkOut;
@class BleWorkOut2;
@class BleWorkOut3;
@class BleMatchRecord;
@class BleMatchRecord2;
@class BleLocation;
@class BleTemperature;
@class BleHeartRateVariability;
@class BlePressure;
@class NSData;
@class BleLogText;
@class BleWashSettings;
@class BleWatchFaceId;
@class BleWorldClock;
@class BleStock;
@class BleRealTimeMeasurement;
@class BleLoveTapUser;
@class BleLoveTap;
@class BleMedicationReminder;
@class BleHrMonitoringSettings;
@class BleThirdPartyData;
@class BleMindStatus;
@class BlePackageStatus;
@class BleUserProfile;
@class BleSettingWatchPassword;
@class BleRecordPacket;
@class BleNaviInfo;
@class BleSOSSettings;
@class BleHealthCare;
@class BlePressureTimingMeasurement;
@class BleStandbyWatchFaceSet;
@class BleNotificationSettings2;
@class BleSDCardInfo;
@class BleRingVibrationSettings;
@class BleWatchFaceIndex;
@class BleSosContact;
@class BleSosCallLog;
@class BleQiblaSettings;
@class BleMeasurement;

SWIFT_PROTOCOL("_TtP22SmartWatchCodingBleKit17BleHandleDelegate_")
@protocol BleHandleDelegate
@optional
/// 设备连接成功时触发。
- (void)onDeviceConnected:(CBPeripheral * _Nonnull)peripheral;
/// 设备正在连接时触发。
- (void)onDeviceConnecting:(BOOL)status;
/// 绑定时触发。
- (void)onIdentityCreate:(BOOL)status :(BleDeviceInfo * _Nullable)deviceInfo;
/// 解绑时触发。
- (void)onIdentityDelete:(BOOL)status;
/// 设备主动解绑时触发。
- (void)onIdentityDeleteByDevice:(BOOL)status;
/// 当读取设备信息时返回
- (void)onReadDeviceInfo:(BOOL)status :(BleDeviceInfo * _Nonnull)deviceInfo;
/// 获取手表信息, 设备基础信息返回
- (void)onReadDeviceInfo2:(BleDeviceInfo2 * _Nonnull)deviceInfo2;
/// 连接状态变化时触发。
- (void)onSessionStateChange:(BOOL)status;
/// 设备回复某些指令时触发。
- (void)onCommandReply:(NSInteger)bleKey :(NSInteger)bleKeyFlag :(BOOL)status;
/// 设备进入OTA时触发。
- (void)onOTA:(BOOL)status;
/// MTK设备返回固件信息，该信息需要通过[BleConnector.SERVICE_MTK]和[BleConnector.CH_MTK_OTA_META]来读取，
/// 设备返回该信息后会通过[BleCache.putMtkOtaMeta]保存该信息，然后通过[BleCache.getMtkOtaMeta]可以获取该信息。
/// mid=xx;mod=xx;oem=xx;pf=xx;p_id=xx;p_sec=xx;ver=xx;d_ty=xx;
- (void)onReadMtkOtaMeta;
- (void)onXModem:(uint8_t)status;
/// 设备主动请求更新时间回调
- (void)onTimeUpdate;
/// 设备返回电量时触发。
- (void)onReadPower:(NSInteger)power;
/// 设备返回固件版本时触发。
- (void)onReadFirmwareVersion:(NSString * _Nonnull)version;
/// 设备返回mac地址时触发。
- (void)onReadBleAddress:(NSString * _Nonnull)address;
/// 设备返回久坐设置时触发。
- (void)onReadSedentariness:(BleSedentarinessSettings * _Nonnull)sedentarinessSettings;
/// 设备返回勿扰设置时触发。
- (void)onReadNoDisturb:(BleNoDisturbSettings * _Nonnull)noDisturbSettings;
/// 设备端修改勿扰设置时触发。
- (void)onNoDisturbUpdate:(BleNoDisturbSettings * _Nonnull)noDisturbSettings;
/// 设备返回闹钟列表时触发。
- (void)onReadAlarm:(NSArray<BleAlarm *> * _Nonnull)alarms;
/// 设备端修改闹钟时触发。
- (void)onAlarmUpdate:(BleAlarm * _Nonnull)alarm;
/// 设备端删除闹钟时触发。
- (void)onAlarmDelete:(NSInteger)id;
/// 设备端创建闹钟时触发。
- (void)onAlarmAdd:(BleAlarm * _Nonnull)alarm;
/// 设备返回吃药闹钟列表时触发。
- (void)onReadMedicationAlarm:(NSArray<BleMedicationAlarm *> * _Nonnull)medicationAlarm;
/// 设备端修改吃药闹钟时触发。
- (void)onMedicationAlarmUpdate:(BleMedicationAlarm * _Nonnull)medicationAlarm;
/// 设备端删除吃药闹钟时触发。
- (void)onMedicationAlarmDelete:(NSInteger)id;
/// 设备端创建吃药闹钟时触发。
- (void)onMedicationAlarmAdd:(BleMedicationAlarm * _Nonnull)medicationAlarm;
/// 设备返回Coaching id时触发。
- (void)onReadCoachingIds:(BleCoachingIds * _Nonnull)coachingIds;
/// 当设备发起找手机触发。
- (void)onFindPhone:(BOOL)start;
/// 当设备发起找手表触发。
- (void)onFindWatchUpdate:(NSInteger)start;
/// 设备返回UI包版本时触发，BleDeviceInfo.PLATFORM_REALTEK专属。
- (void)onReadUiPackVersion:(NSString * _Nonnull)version;
/// 设备返回语言包信息时触发，BleDeviceInfo.PLATFORM_REALTEK专属。
- (void)onReadLanguagePackVersion:(BleLanguagePackVersion * _Nonnull)version;
/// 设备返回GPS固件包版本信息时触发
- (void)onReadGPSFirmwareVersion:(NSString * _Nonnull)version;
/// 同步数据时触发。
/// @param syncState SyncState
/// @param bleKey 正在同步的数据类型
- (void)onSyncData:(NSInteger)syncState :(NSInteger)bleKey;
/// 当设备返回BleActivity时触发。
- (void)onReadActivity:(NSArray<BleActivity *> * _Nonnull)activities;
/// 当设备返回BleHeartRate时触发。
- (void)onReadHeartRate:(NSArray<BleHeartRate *> * _Nonnull)heartRates;
/// 当设备返回BleBloodPressure时触发。
- (void)onReadBloodPressure:(NSArray<BleBloodPressure *> * _Nonnull)bloodPressures;
/// 当设备返回BleSleep时触发。
- (void)onReadSleep:(NSArray<BleSleep *> * _Nonnull)sleeps;
/// 当设备返回BleSleep时触发。
- (void)onReadSleepQuality:(BleSleepQuality * _Nonnull)sleepQuality;
/// 当设备返回BleWorkout时触发。
- (void)onReadWorkOut:(NSArray<BleWorkOut *> * _Nonnull)WorkOut;
- (void)onReadWorkOut2:(NSArray<BleWorkOut2 *> * _Nonnull)WorkOut;
- (void)onReadWorkOut3:(NSArray<BleWorkOut3 *> * _Nonnull)WorkOut;
/// 当设备返回[BleMatchRecord]时触发。
- (void)onReadMatchRecord:(NSArray<BleMatchRecord *> * _Nonnull)matchRecord;
/// 当设备返回[BleMatchRecord2]时触发。
- (void)onReadMatchRecord2:(NSArray<BleMatchRecord2 *> * _Nonnull)matchRecord2;
/// 当设备返回BleLocation时触发。
- (void)onReadLocation:(NSArray<BleLocation *> * _Nonnull)locations;
/// 当设备返回BleTemperature时触发。
- (void)onReadTemperature:(NSArray<BleTemperature *> * _Nonnull)temperatures;
/// 当设备返回BleBloodOxygen时触发。
- (void)onReadBloodOxygen:(NSArray<BleBloodOxygen *> * _Nonnull)BloodOxygen;
/// 当设备返回 [BleBloodGlucose] 血糖时触发。
- (void)onReadBloodGlucose:(NSArray<BleBloodGlucose *> * _Nonnull)bloodGlucose;
/// 当设备返回BleHeartRateVariability时触发。
- (void)onReadHeartRateVariability:(NSArray<BleHeartRateVariability *> * _Nonnull)HeartRateVariability;
/// 当设备返回TemperatureUnit时触发。
/// 0 ->℃
/// 1 ->℉
- (void)onReadTemperatureUnitSettings:(NSInteger)value;
/// 当设备返回DateFormatSetting时触发。
/// 0 ->YYYY/MM/dd
/// 1 ->dd/MM/YYYY
/// 2 ->MM/dd/YYYY
- (void)onReadDateFormatSettings:(NSInteger)status;
/// 当设备返回BleAerobicSettings时触发。
- (void)onReadAerobicSettings:(BleAerobicSettings * _Nonnull)AerobicSettings;
/// 当设备返回BlePressure时触发。
- (void)onReadPressures:(NSArray<BlePressure *> * _Nonnull)pressures;
/// 设备主动执行拍照相关操作时触发。
/// @param cameraState: CameraState
- (void)onCameraStateChange:(NSInteger)cameraState;
/// 设备请求定位时触发，一些无Gps设备在锻炼时会请求手机定位。
/// @param workoutState WorkoutState
- (void)onPhoneGPSSport:(NSInteger)workoutState;
/// 手机执行拍照相关操作，设备回复时触发。
/// 手机发起后设备响应。用于确认设备是否能立即响应手机发起的操作，比如设备在某些特定界面是不能进入相机的，
/// 如果手机发起进入相机指令，设备会回复失败
/// cameraState: CameraState
- (void)onCameraResponse:(BOOL)status :(NSInteger)cameraState;
/// 调用BleConnector.sendStream后触发，用于回传发送进度。
- (void)onStreamProgress:(BOOL)status :(NSInteger)errorCode :(NSInteger)total :(NSInteger)completed;
/// 设备开启Gps时，如果检测到没有aGps文件，或aGps文件已过期，设备发起请求aGps文件。
/// url aGps文件的下载链接。
- (void)onDeviceRequestAGpsFile:(NSString * _Nonnull)url;
/// 读取设备多媒体文件时回调
- (void)onReadMediaFile:(BleFileTransmission * _Nonnull)media;
/// 读取设备多媒体文件时回调, 设备死机log也是可以从这个读取
- (void)onMediaFileUpdate:(BleFileTransmission * _Nonnull)media;
/// 返回设备睡眠原始数据,此数据为固件分析用,保存即可
- (void)onReadSleepRaw:(NSData * _Nonnull)sleepRawData;
/// 设备语言环境主动跟随手机触时发
- (void)onFollowSystemLanguage:(BOOL)systemLanguage;
/// 设备主动要求更新天气信息
- (void)onReadWeatherRealtime:(BOOL)update;
/// 0x050B 设备运行日志
- (void)onReadDataLog:(NSArray<BleLogText *> * _Nonnull)logs;
/// 0x021F 读取设备当前设置表盘
- (void)onReadWatchFaceSwitch:(NSInteger)value;
/// 0x021F 设置表盘callback
/// status -> false 表盘不存在,数组越界
- (void)onUpdateWatchFaceSwitch:(BOOL)status;
/// 0x0220
/// 设备主动调用,app端定位成功后发BleAgpsPrerequisite到设备
- (void)onRequestAgpsPrerequisite;
/// 0x0221
/// * 设备返回喝水提醒设置时触发。
- (void)onReadDrinkWaterSettings:(BleDrinkWaterSettings * _Nonnull)drinkWater;
/// 0x0225
/// * 设备返回血氧监测设置时触发。
- (void)onReadBloodOxyGenSettings:(BleBloodOxyGenSettings * _Nonnull)bloodOxyGenSet;
/// 0x0226
/// * 设备返回洗手提醒设置时触发。
- (void)onReadWashSettings:(BleWashSettings * _Nonnull)washSet;
/// appd端更新设置指令回调
- (void)onUpdateSettings:(NSInteger)bleKey;
/// 设备端主动传输心率
- (void)onUpdateHeartReate:(BleHeartRate * _Nonnull)heartRate;
/// 设备端主动传输体温
- (void)onUpdateRealTimeTemperature:(BleTemperature * _Nonnull)temperature;
/// 设备端主动传输血压
- (void)onUpdateRealTimeBloodPressure:(BleBloodPressure * _Nonnull)bloodPressures;
/// 当用户从设备控制运动状态变化时触发
/// 为了保持统一, 修改BlePhoneWorkOutStatus类名称更改为BleAppSportState;
/// 同时也修改了方法名称
/// @objc optional func onUpdatePhoneWorkOutStatus(_ status: BlePhoneWorkOutStatus)
- (void)onUpdateAppSportState:(BleAppSportState * _Nonnull)status;
/// 设备主动更新震动状态
- (void)onVibrationUpdate:(NSInteger)value;
/// 获取设备iBeacon开关状态
/// 0 -> off
/// 1 -> on
- (void)onReadiBeaconStatus:(NSInteger)value;
/// 获取设备watchface ID列表
- (void)onReadWatchFaceId:(BleWatchFaceId * _Nonnull)watchFaceId;
/// 设置新watchface ID 回调,接到此回调开始传输表盘文件
- (void)onWatchFaceIdUpdate:(BOOL)status;
/// 设置新watchface ID 回调,接到此回调开始传输表盘文件
- (void)onCommandSendTimeout:(NSInteger)bleKey :(NSInteger)bleKeyFlag;
/// 设备返回世界时钟列表时触发
- (void)onReadWorldClock:(NSArray<BleWorldClock *> * _Nonnull)worldClocks;
/// 设备端删除世界时钟时触发
- (void)onWorldClockDelete:(NSInteger)clockID;
/// 设备返回股票列表时触发
- (void)onReadStock:(NSArray<BleStock *> * _Nonnull)stocks;
/// 设备删除股票列表时触发
- (void)onStockDelete:(NSInteger)stockID;
/// 设备主动请求更新股票列表时触发
- (void)onDeviceReadStock:(BOOL)status;
/// 测量结束后会触发回调, 如果超过60s没有响应, 可能测量失败
- (void)onRealTimeMeasurement:(BleRealTimeMeasurement * _Nonnull)measurement;
/// 设备返回当前省电模式状态时触发。
/// @param state [PowerSaveModeState]
- (void)onPowerSaveModeState:(NSInteger)state;
/// 设备的省电模式状态变化时触发。
/// @param state [PowerSaveModeState]
- (void)onPowerSaveModeStateChange:(NSInteger)state;
/// 设备端修改背光设置时触发，返回次数
/// @param value [设置的背光值]
- (void)onBacklightUpdate:(NSInteger)value;
/// 设备返回当前抬手亮屏设置状态时触发。
/// @param state [BleGestureWake]
- (void)onReadGestureWake:(BleGestureWake * _Nonnull)bleGestureWake;
/// 设备的抬手亮屏设置状态变化时触发。
/// @param state [BleGestureWake]
- (void)onGestureWakeUpdate:(BleGestureWake * _Nonnull)bleGestureWake;
/// 设备的双击亮屏设置状态变化时触发。
/// @param state [BleGestureWake]
- (void)onDoubleScreenUpdate:(BleDoubleScreenSettings * _Nonnull)bleDoubleScreen;
/// 设备返回当前双击亮屏设置状态时触发。
/// @param state [BleGestureWake]
- (void)onReadDoubleScreen:(BleDoubleScreenSettings * _Nonnull)bleDoubleScreen;
/// 设备返回LoveTap 用户列表时触发
/// \param loveTapUsers LoveTap 用户列表
///
- (void)onReadLoveTapUser:(NSArray<BleLoveTapUser *> * _Nonnull)loveTapUsers;
/// 设备端修改LoveTap用户时触发
/// \param loveTapUser LoveTap用户
///
- (void)onLoveTapUserUpdate:(BleLoveTapUser * _Nonnull)loveTapUser;
/// 设备返回LoveTap 数据触发
/// \param loveTap LoveTap 数据
///
- (void)onLoveTapUpdate:(BleLoveTap * _Nonnull)loveTap;
/// 设备端删除LoveTap用户时触发
/// \param id 要删除用户的mId
///
- (void)onLoveTapUserDelete:(NSInteger)id;
/// 设备返回吃药提醒列表时触发
/// \param medicationReminders 吃药提醒列表
///
- (void)onReadMedicationReminder:(NSArray<BleMedicationReminder *> * _Nonnull)medicationReminders;
/// 设备端修改吃药提醒时触发
/// \param medicationReminder 需要修改的吃药提醒
///
- (void)onMedicationReminderUpdate:(BleMedicationReminder * _Nonnull)medicationReminder;
/// 设备端删除吃药提醒时触发
/// \param id 需要删除的吃药提醒mId
///
- (void)onMedicationReminderDelete:(NSInteger)id;
/// 设备返回心率设置时触发
/// \param hrMonitoringSettings 心率设置数据
///
- (void)onReadHrMonitoringSettings:(BleHrMonitoringSettings * _Nonnull)hrMonitoringSettings;
/// 读取设备端单位设置
/// \param id 公制英制设置 0: 公制  1: 英制
///
- (void)onReadUnit:(NSInteger)temperatureFormat;
/// 设备返回第三方应用数据时触发
- (void)onBleThirdPartyDataUpdate:(BleThirdPartyData * _Nonnull)bleThirdPartyData;
/// 设备返回 [BleBodyData] 数据时候触发
- (void)onReadBodyStatus:(NSArray<BleBodyStatus *> * _Nonnull)bodyStatus;
/// 设备返回 [BleFeelingData] 数据时候触发
- (void)onReadMindStatus:(NSArray<BleMindStatus *> * _Nonnull)mindStatus;
/// 设备返回 摄入卡路里 [BleCalorieIntake] 数据时候触发
- (void)onReadCalorieIntake:(NSArray<BleCalorieIntake *> * _Nonnull)calorieIntakes;
/// 设备返回 食物均衡, 饮食均衡 [BleFoodBalance] 数据时候触发
- (void)onReadFoodBalance:(NSArray<BleFoodBalance *> * _Nonnull)foodBalances;
/// 设备返回 :酒精 数据时候触发
- (void)onReadBAC:(NSArray<BleBAC *> * _Nonnull)bacs;
/// 酒精测试结果, 固件会主动发送
- (void)onUpdateBAC:(NSArray<BleBAC *> * _Nonnull)bacs;
/// 当设备返回 [BleAvgHeartRate] 触发
- (void)onReadAvgHeartRate:(NSArray<BleAvgHeartRate *> * _Nonnull)heartRates;
/// 当设备返回 BlePackageStatus 触发
- (void)onReadPackageStatus:(BlePackageStatus * _Nonnull)packageStatus;
/// 当设备返回 alipaySettings
- (void)onReadAlipaySettings:(BleAlipaySettings * _Nonnull)alipaySettings;
/// 当设备返回 BleUserProfile
- (void)onReadUserPorfile:(BleUserProfile * _Nonnull)userProfile;
/// 设备返回目标步数时触发
- (void)onReadStepGoal:(NSInteger)stepGoal;
/// 返回当前小时制,  0: 24-hourly; 1: 12-hourly 小时制
- (void)onReadHourSystem:(NSInteger)value;
/// 设备上更新了小时制后回调方法,  0: 24-hourly; 1: 12-hourly 小时制
- (void)onHourSystemUpdate:(NSInteger)value;
/// 设备上结束了运动后通知App, value值1
- (void)onSportEndNotifyUpdate:(NSInteger)value;
/// 返回背光数据值
- (void)onReadBacklight:(NSInteger)value;
/// 设备返回目标卡路里时触发
- (void)onReadCaloriesGoal:(NSInteger)value;
/// 设备返回目标距离时触发
- (void)onReadDistanceGoal:(NSInteger)value;
/// 设备返回目标距离时触发
- (void)onReadSleepGoal:(NSInteger)value;
/// 设备返回目标运动时间时触发
- (void)onReadSportDurationGoal:(NSInteger)value;
/// 设备返回手表密码时触发
- (void)onReadWatchPassword:(BleSettingWatchPassword * _Nonnull)watchPassword;
/// 设备更新密码时触发
- (void)onWatchPasswordUpdate:(BleSettingWatchPassword * _Nonnull)watchPassword;
/// 设备返回录音文件
- (void)onReceiveRecordPacket:(BleRecordPacket * _Nonnull)recordPacket;
/// 设备骑车导航返回导航状态, 目前仅仅mState状态有效
- (void)onNavigationState:(BleNaviInfo * _Nonnull)naviInfo;
/// 设备步行, 骑行导航返回导航状态, 目前仅仅mState状态有效
- (void)onBWNaviInfoState:(BleBWNaviInfo * _Nonnull)bwNaviInfo;
/// 设备返回手表支持的语言列表时触发
- (void)onReadDeviceLanguages:(BleDeviceLanguages * _Nonnull)deviceLanguages;
/// 设备返回手表的SOS数据时候触发
- (void)onReadSOSSettings:(BleSOSSettings * _Nonnull)sosSettings;
/// 设备的双击亮屏设置状态变化时触发。
/// @param state [BleGestureWake]
- (void)onSOSUpdate:(BleSOSSettings * _Nonnull)sosSettings;
/// 设备返回BleHealthCare时候触发
- (void)onReadGirlCareSettings:(BleHealthCare * _Nonnull)healthCare;
/// 当前语言时候触发
- (void)onReadLanguages:(NSInteger)value;
/// 设备返回游戏提醒时间时候触发
- (void)onReadGameTimeReminder:(BleGameTimeReminder * _Nonnull)gameTimeReminder;
/// 设备主动返回 BleDeviceSportData 触发
- (void)onDeviceSportDataUpdate:(BleDeviceSportData * _Nonnull)deviceSportData;
/// 设备主动返回 BleGirlCarePeriod 触发
- (void)onReadGirlCarePeriod:(BleGirlCarePeriod * _Nonnull)girlCarePeriod;
- (void)onGirlCarePeriodUpdate:(BleGirlCarePeriod * _Nonnull)girlCarePeriod;
/// 设备返回ANCS状态触发
- (void)didUpdateANCSAuthorization:(CBPeripheral * _Nonnull)peripheral SWIFT_AVAILABILITY(ios,introduced=13.0);
/// 设备返回步数时触发
- (void)onStepGoalUpdate:(NSInteger)value;
/// 设备返回卡路里目标时触发
- (void)onCaloriesGoalUpdate:(NSInteger)value;
/// 设备返回距离目标时触发
- (void)onDistanceGoalUpdate:(NSInteger)value;
/// 设备返回时长目标时触发
- (void)onDurationGoalUpdate:(NSInteger)value;
/// 支付宝返回绑定信息
- (void)onReadAlipayBindInfo:(NSArray<BleAlipayBindInfo *> * _Nonnull)alipayBindInfos;
/// 发送读取指令, 返回定时压力测量时触发
- (void)onReadPressureTimingMeasurement:(BlePressureTimingMeasurement * _Nonnull)pressureTimingMeasurement;
/// 发送读取指令, 设备返回待机表盘时间设置时触发
- (void)onReadStandbyWatchFaceSet:(BleStandbyWatchFaceSet * _Nonnull)standbyWatchFaceSet;
/// 设备端修改待机表盘时间设置时触发
- (void)onStandbyWatchFaceSetUpdate:(BleStandbyWatchFaceSet * _Nonnull)standbyWatchFaceSet;
- (void)onReadClassicBluetoothState:(NSInteger)state;
- (void)onClassicBluetoothStateChange:(NSInteger)state;
/// 发送读取当前消息通知信息的回调, 注意这个是消息通知2
- (void)onReadNotificationSettings2:(BleNotificationSettings2 * _Nonnull)notificationSettings2;
/// 设备端修改消息通知信息的回调, 注意这个是消息通知2
- (void)onNotificationSettings2Update:(BleNotificationSettings2 * _Nonnull)notificationSettings2;
/// 读取设备的跌落检测开关
/// \param state 0:关闭; 1:开启
///
- (void)onReadFallSet:(NSInteger)state;
/// 设备跌落检测开关发生变化时调用
/// \param state 0:关闭; 1:开启
///
- (void)onFallSetUpdate:(NSInteger)state;
/// 返回SD卡信息, 剩余空间等等信息
- (void)onReadSDCardInfo:(BleSDCardInfo * _Nonnull)sdCardInfo;
/// 设备主动返回SD卡信息, 剩余空间等等信息
- (void)onSDCardInfoUpdate:(BleSDCardInfo * _Nonnull)sdCardInfo;
/// 返回每小时步数、卡路里、距离存储
- (void)onReadActivityDetail:(BleActivityDetail * _Nonnull)activityDetail;
/// 设备返回当前是否开启来电铃声的设置  0:关闭;   1:开启
- (void)onReadIncomingCallRing:(NSInteger)value;
/// 设备来电铃声的设置更新执行  0:关闭;   1:开启
- (void)onIncomingCallRingUpdate:(NSInteger)value;
/// 设备返回通知亮屏提醒设置是否开启  0:关闭;   1:开启
- (void)onReadNotificationLightScreenSet:(NSInteger)value;
/// 设备通知亮屏提醒设置更新执行  0:关闭;   1:开启
- (void)onNotificationLightScreenSetUpdate:(NSInteger)value;
/// 读取设备耳机电量数据
- (void)onReadEarphonePower:(BleEarphonePower * _Nonnull)earphonePowers;
/// 读取设备耳机降噪设置
- (void)onReadEarphoneAncSettings:(BleEarphoneAncSettings * _Nonnull)earphoneAncSettings;
/// 设备主动返回耳机降噪设置
- (void)onEarphoneAncSettingsUpdate:(BleEarphoneAncSettings * _Nonnull)earphoneAncSettings;
/// 读取耳机信息
- (void)onReadEarphoneInfo:(BleEarphoneInfo * _Nonnull)earphoneInfo;
/// 读取耳机状态
- (void)onReadEarphoneState:(BleEarphoneState * _Nonnull)earphoneState;
/// 设备状态更新回调方法
- (void)onEarphoneStateUpdate:(BleEarphoneState * _Nonnull)earphoneState;
/// 读取耳机通话状态更新回调方法, 0:关闭;   1:开启
- (void)onReadEarphoneCall:(NSInteger)value;
/// 耳机通话状态更新回调方法, 0:关闭;   1:开启
- (void)onEarphoneCallUpdate:(NSInteger)value;
/// 设备主动返回耳机音效设置
- (void)onEarphoneSoundEffectsSettingsUpdate:(BleEarphoneSoundEffectsSettings * _Nonnull)earphoneSoundEffectsSettings;
/// 读取GoMore 设置的数据
- (void)onReadGoMoreSettings:(BleGoMoreSettings * _Nonnull)goMoreSettings;
/// 读取来电铃声震动的设置
- (void)onReadRingVibrationSet:(BleRingVibrationSettings * _Nonnull)ringVibrationSettings;
/// 来电铃声震动的设置更新后的回调方法
- (void)onRingVibrationSetUpdate:(BleRingVibrationSettings * _Nonnull)ringVibrationSettings;
/// 设备返回血压标定是否开启  0:关闭;   1:开启
- (void)onReadBloodPressureCalibration:(NSInteger)value;
/// 文件路径返回
- (void)onReadFilePath:(BleFileList * _Nonnull)filelist;
/// 设备返回耳机亮度
- (void)onReadHeadphoneScreenBrightness:(NSInteger)value;
/// 设备更新耳机亮度
- (void)onHeadphoneScreenBrightnessUpdate:(NSInteger)value;
/// 返回设备网络固件版本时触发
- (void)onReadNetworkFirmwareVersion:(NSString * _Nonnull)version;
/// 读取ECG 心电设置
- (void)onReadEcgSettings:(BleEcgSettings * _Nonnull)ecgSettings;
/// 返回ECG 心电数据
- (void)onReadEcg:(NSArray<BleEcg *> * _Nonnull)ecgSettings;
/// 返回鼾宝数据
- (void)onReadHanBaoVibration:(NSArray<BleHanBaoVibration *> * _Nonnull)hanBaoVibrations;
/// 表盘ID创建回调
- (void)onWatchFaceIndexCreate:(BOOL)state;
/// 读取当前表盘ID回调
- (void)onReadWatchFaceIndex:(BleWatchFaceIndex * _Nonnull)watchFaceIndex;
/// 当前表盘ID发生变化的回调
- (void)onWatchFaceIndexUpdate:(BleWatchFaceIndex * _Nonnull)watchFaceIndex;
/// 读取SOS联系人列表回调
- (void)onReadSosContact:(BleSosContact * _Nonnull)sosContact;
/// SOS联系人列表发生变化的回调
- (void)onSosContactUpdate:(BleSosContact * _Nonnull)sosContact;
/// 返回生理期月报回调
- (void)onReadGirlCareMonthly:(BleGirlCareMonthly * _Nonnull)girlCareMonthly;
- (void)onReadCheckInEveryDay:(BleCheckInEveryDay * _Nonnull)checkInEveryDay;
- (void)onCheckInEveryDayUpdate:(BleCheckInEveryDay * _Nonnull)checkInEveryDay;
- (void)onReadSosCallLog:(NSArray<BleSosCallLog *> * _Nonnull)sosCallLogArray;
- (void)onReadGestureWake2:(BleGestureWake2 * _Nonnull)gestureWake2;
- (void)onGestureWake2Update:(BleGestureWake2 * _Nonnull)gestureWake2;
- (void)onReadEarphoneKey:(BleEarphoneKey * _Nonnull)earphoneKey;
- (void)onEarphoneKeyUpdate:(BleEarphoneKey * _Nonnull)earphoneKey;
- (void)onReadFindEarphone:(BleFindEarphone * _Nonnull)findEarphone;
- (void)onFindEarphoneUpdate:(BleFindEarphone * _Nonnull)findEarphone;
/// 读取设备安装的应用信息
- (void)onReadDeviceAppStoreInfo:(NSArray<BleDeviceAppStoreInfo *> * _Nonnull)deviceAppStoreInfoArr;
/// 设备安装的应用信息
- (void)onReadAppInfoList:(BleAppInfoList * _Nonnull)appInfo;
/// 读取设备安装的应用信息
- (void)onAppOpUpdate:(BleAppOp * _Nonnull)appOp;
/// 设备返回手表设置的鼾宝设置信息
- (void)onReadHanBaoSettings:(BleHanBaoSettings * _Nonnull)hanBaoSettings;
/// 设备返回手表设置的鼾宝设置信息
- (void)onHanBaoVibrationStateChange:(NSInteger)value;
- (void)onReadQiblaSettings:(BleQiblaSettings * _Nonnull)qiblaSettings;
- (void)onQiblaSettingsUpdate;
/// BleMeasurement 测量信息返回
- (void)onMeasurementUpdate:(BleMeasurement * _Nonnull)measurement;
@end


/// 设置生理健康
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleHealthCare")
@interface BleHealthCare : BleWritable
/// 2023-07-05 经过徐工的测试和沟通, 应该和安卓保持一致, 默认关闭
@property (nonatomic) NSInteger mEnabled;
@property (nonatomic) NSInteger mMenstruationDuration;
@property (nonatomic) NSInteger mMenstruationPeriod;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit12BleHeartRate")
@interface BleHeartRate : BleReadable
@property (nonatomic) NSInteger mBpm;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleHeartRateVariability")
@interface BleHeartRateVariability : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit9BleHmTime")
@interface BleHmTime : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleHrMonitoringSettings")
@interface BleHrMonitoringSettings : BleWritable
@property (nonatomic, strong) BleTimeRange * _Nonnull mBleTimeRange;
@property (nonatomic) NSInteger mInterval;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit20BleHrWarningSettings")
@interface BleHrWarningSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// BLE协议中的key, key的定义包括了其对应的command，使用时直接使用key就行了
/// 增加key时，需要同步修改BleCache.requireCache()、BleCache.getIdObjects()、BleKey.isIdObjectKey()
typedef SWIFT_ENUM(NSInteger, BleKey, open) {
  BleKeyOTA = 0x0101,
  BleKeyXMODEM = 0x0102,
  BleKeyTIME = 0x0201,
  BleKeyTIME_ZONE = 0x0202,
  BleKeyPOWER = 0x0203,
  BleKeyFIRMWARE_VERSION = 0x0204,
  BleKeyBLE_ADDRESS = 0x0205,
  BleKeyUSER_PROFILE = 0x0206,
  BleKeySTEP_GOAL = 0x0207,
  BleKeyBACK_LIGHT = 0x0208,
  BleKeySEDENTARINESS = 0x0209,
  BleKeyNO_DISTURB_RANGE = 0x020A,
  BleKeyVIBRATION = 0x020B,
  BleKeyGESTURE_WAKE = 0x020C,
  BleKeyHR_ASSIST_SLEEP = 0x020D,
  BleKeyHOUR_SYSTEM = 0x020E,
  BleKeyLANGUAGE = 0x020F,
  BleKeyALARM = 0x0210,
/// 单位设置, 公制英制设置 0: 公制  1: 英制
  BleKeyUNIT_SETTIMG = 0x0211,
  BleKeyCOACHING = 0x0212,
  BleKeyFIND_PHONE = 0x0213,
  BleKeyNOTIFICATION_REMINDER = 0x0214,
  BleKeyANTI_LOST = 0x0215,
  BleKeyHR_MONITORING = 0x0216,
  BleKeyUI_PACK_VERSION = 0x0217,
  BleKeyLANGUAGE_PACK_VERSION = 0x0218,
  BleKeySLEEP_QUALITY = 0x0219,
  BleKeyDRINKWATER = 0x0221,
  BleKeySHUTDOWN = 0x0222,
  BleKeyHEALTH_CARE = 0x021A,
  BleKeyTEMPERATURE_DETECTING = 0x021B,
  BleKeyAEROBIC_EXERCISE = 0x021C,
  BleKeyTEMPERATURE_UNIT = 0x021D,
  BleKeyDATE_FORMAT = 0x021E,
  BleKeyWATCH_FACE_SWITCH = 0x021F,
  BleKeyAGPS_PREREQUISITE = 0x0220,
  BleKeyAPP_SPORT_DATA = 0x0223,
  BleKeyREAL_TIME_HEART_RATE = 0x0224,
  BleKeyBLOOD_OXYGEN_SET = 0x0225,
  BleKeyWASH_SET = 0x0226,
  BleKeyREAL_TIME_TEMPERATURE = 0x0230,
  BleKeyREAL_TIME_BLOOD_PRESSURE = 0x0231,
  BleKeyWATCHFACE_ID = 0x0227,
  BleKeyIBEACON_SET = 0x0228,
  BleKeyMAC_QRCODE = 0x0229,
  BleKeyTEMPERATURE_VALUE = 0x0232,
  BleKeyGAME_SET = 0x0233,
  BleKeyFIND_WATCH = 0x0234,
  BleKeySET_WATCH_PASSWORD = 0x0235,
  BleKeyREALTIME_MEASUREMENT = 0x0236,
  BleKeyPOWER_SAVE_MODE = 0x0237,
  BleKeyBAC = 0x0515,
  BleKeyMATCH_RECORD2 = 0x0516,
  BleKeyAVG_HEART_RATE = 0x0517,
  BleKeyALIPAY_BIND_INFO = 0x0518,
  BleKeyECG = 0x0520,
  BleKeyHANBAO_VIBRATION = 0x0521,
  BleKeySOS_CALL_LOG = 0x0522,
  BleKeyBAC_SET = 0x0238,
  BleKeyBAC_RESULT = 0x0244,
  BleKeyBAC_RESULT_SET = 0x0245,
  BleKeyREALTIME_LOG = 0x02F9,
  BleKeyGSENSOR_OUTPUT = 0x02FA,
  BleKeyGSENSOR_RAW = 0x02FB,
  BleKeyMOTION_DETECT = 0x02FC,
  BleKeyLOCATION_GGA = 0x02FD,
  BleKeyRAW_SLEEP = 0x02FE,
  BleKeyNO_DISTURB_GLOBAL = 0x02FF,
/// 卡路里目标设置, 单位：1cal
  BleKeyCALORIES_GOAL = 0x0239,
/// 距离目标设置, 单位：1m
  BleKeyDISTANCE_GOAL = 0x023A,
/// 睡眠目标设置
  BleKeySLEEP_GOAL = 0x023B,
/// 发送LoveTap 消息
  BleKeyLOVE_TAP = 0x0608,
/// LoveTap 联系人
  BleKeyLOVE_TAP_USER = 0x023C,
/// 吃药提醒设置
  BleKeyMEDICATION_REMINDER = 0x023D,
/// 精简的设备信息
  BleKeyDEVICE_INFO2 = 0x023E,
/// 推送, Newsfeed 消息
  BleKeyNEWS_FEER = 0x040B,
/// 目标完成进度
  BleKeyTARGET_COMPLETION = 0x040F,
/// 心率警报设置
  BleKeyHR_WARNING_SET = 0x023F,
/// 睡眠检测时间段
  BleKeySLEEP_DETECTION_PERIOC = 0x0240,
/// 待机设置,  待机表盘
  BleKeySTANDBY_SETTING = 0x0241,
/// 吃药提醒设置2, 简化版本的吃药提醒, 类似闹钟
  BleKeyMEDICATION_ALARM = 0x0246,
/// 比赛设置
  BleKeyMATCH_SET = 0x0247,
/// 获取手表字库/UI/语言包状态信息
  BleKeyPACKAGE_STATUS = 0x0249,
/// 支付宝设置
  BleKeyALIPAY_SET = 0x024A,
/// 音频数据传输, 手表通过这个命令key，上传给APP音频数据
  BleKeyRECORD_PACKET = 0x024B,
/// 导航数据
  BleKeyNAVI_INFO = 0x024D,
/// SOS_SET: 设置SOS,  DEVICE_LANGUAGES: 设备语言列表
  BleKeySOS_SET = 0x024E,
/// SOS_SET: 设置SOS,  DEVICE_LANGUAGES: 设备语言列表
  BleKeyDEVICE_LANGUAGES = 0x024F,
/// 旧的推送协议已经满了, 无法扩展, 新增加一个
  BleKeyNOTIFICATION_REMINDER2 = 0x0250,
  BleKeyGAME_TIME_REMINDER = 0x0251,
/// 手表运动中实时传输运动数据给APP
  BleKeyDEVICE_SPORT_DATA = 0x0252,
/// 压力定时测量
  BleKeyPRESSURE_TIMING_MEASUREMENT = 0x0253,
/// 定时待机表盘设置
  BleKeySTANDBY_WATCH_FACE_SET = 0x0254,
/// 设置跌落状态开关
  BleKeyFALL_SET = 0x0255,
/// 骑行和步行导航数据
  BleKeyBW_NAVI_INFO = 0x0256,
/// 连接提醒
  BleKeyCONNECT_REMINDER = 0x0257,
/// SD卡信息, 返回SD卡剩余空间等等信息
  BleKeySDCARD_INFO = 0x0258,
/// 活动详情
  BleKeyACTIVITY_DETAIL = 0x0259,
/// 通知亮屏提醒设置
  BleKeyNOTIFICATION_LIGHT_SCREEN_SET = 0x025A,
/// 耳机电量
  BleKeyEARPHONE_POWER = 0x025D,
/// 耳机降噪设置
  BleKeyEARPHONE_ANC_SET = 0x025E,
/// 耳机音效设置
  BleKeyEARPHONE_SOUND_EFFECTS_SET = 0x025F,
/// 屏幕亮度设置
  BleKeySCREEN_BRIGHTNESS_SET = 0x0260,
/// 耳机信息
  BleKeyEARPHONE_INFO = 0x0261,
/// 耳机状态
  BleKeyEARPHONE_STATE = 0x0262,
/// 耳机通话设置
  BleKeyEARPHONE_CALL = 0x0263,
/// GPS固件版本
  BleKeyGPS_FIRMWARE_VERSION = 0x0264,
/// GOMORE设置
  BleKeyGOMORE_SET = 0x0265,
/// 来电铃声和震动设置
  BleKeyRING_VIBRATION_SET = 0x0266,
/// 网络固件(如4G固件)版本
  BleKeyNETWORK_FIRMWARE_VERSION = 0x0267,
/// 心电定时测量设置
  BleKeyECG_SET = 0x0268,
/// 运动时长目标
  BleKeySPORT_DURATION_GOAL = 0x0269,
/// 表盘索引指令
  BleKeyWATCHFACE_INDEX = 0x026A,
/// SOS联系人, 最多支持5个
  BleKeySOS_CONTACT = 0x026B,
/// 生理期月报
  BleKeyGIRL_CARE_MONTHLY = 0x026C,
/// 生理期开始和结束日修正
  BleKeyGIRL_CARE_MENSTRUATION_UPDATE = 0x026D,
/// 健康指数
  BleKeyHEALTH_INDEX = 0x026E,
/// 每日打卡
  BleKeyCHECK_INEVERY_DAY = 0x026F,
/// 佩戴方式, 0：左， 1：右
  BleKeyWEAR_WAY = 0x0270,
/// 翻腕亮屏2
  BleKeyGESTURE_WAKE2 = 0x0271,
/// 耳机按键
  BleKeyEARPHONE_KEY = 0x0272,
/// 查找耳机
  BleKeyFIND_EARPHONE = 0x0273,
/// 鼾宝设置
  BleKeyHANBAO_SET = 0x0274,
/// 朝拜设置
  BleKeyQIBLA_SET = 0x0275,
  BleKeyIDENTITY = 0x0301,
  BleKeySESSION = 0x0302,
  BleKeyPAIR = 0x0303,
  BleKeyANCS_PAIR = 0x0304,
  BleKeyMUSIC_CONTROL = 0x0402,
  BleKeySCHEDULE = 0x0403,
/// 推送实时天气
  BleKeyWEATHER_REALTIME = 0x0404,
/// 推送预报天气
  BleKeyWEATHER_FORECAST = 0x0405,
/// 推送实时天气 2
  BleKeyWEATHER_REALTIME2 = 0x040C,
/// 推送预报天气 2
  BleKeyWEATHER_FORECAST2 = 0x040D,
/// 在线天数
  BleKeyLOGIN_DAYS = 0x040E,
  BleKeyWORLD_CLOCK = 0x0407,
  BleKeySTOCK = 0x0408,
  BleKeySMS_QUICK_REPLY_CONTENT = 0x0409,
  BleKeyNOTIFICATION2 = 0x040A,
  BleKeyAUDIO_TEXT = 0x0410,
  BleKeyDATA_ALL = 0x05ff,
  BleKeyACTIVITY_REALTIME = 0x0501,
  BleKeyACTIVITY = 0x0502,
  BleKeyHEART_RATE = 0x0503,
  BleKeyBLOOD_PRESSURE = 0x0504,
  BleKeySLEEP = 0x0505,
  BleKeyWORKOUT = 0x0506,
  BleKeyLOCATION = 0x0507,
  BleKeyTEMPERATURE = 0x0508,
  BleKeyBLOODOXYGEN = 0x0509,
  BleKeyBLOOD_GLUCOSE = 0x0510,
  BleKeyHRV = 0x050A,
  BleKeyLOG = 0x050B,
  BleKeySLEEP_RAW_DATA = 0x050C,
  BleKeyPRESSURE = 0x050D,
  BleKeyWORKOUT2 = 0x050E,
  BleKeyMATCH_RECORD = 0x050F,
/// 身体状态
  BleKeyBODY_STATUS = 0x0511,
/// 心情状态
  BleKeyMIND_STATUS = 0x0512,
/// 摄入卡路里
  BleKeyCALORIE_INTAKE = 0x0513,
  BleKeyFOOD_BALANCE = 0x0514,
  BleKeyCAMERA = 0x0601,
  BleKeyPHONE_GPSSPORT = 0x0602,
  BleKeyAPP_SPORT_STATE = 0x0604,
  BleKeyCLASSIC_BLUETOOTH_STATE = 0x0605,
  BleKeyIBEACON_CONTROL = 0x0606,
  BleKeyDEVICE_SMS_QUICK_REPLY = 0x0607,
/// 双击亮屏
  BleKeyDOUBLE_SCREEN = 0x060A,
/// 来电铃声
  BleKeyINCOMING_CALL_RING = 0x060C,
/// 设备结束运动的停止通知
  BleKeySPORT_END_NOTIFY = 0x060D,
  BleKeyFILE_PATH = 0x060E,
/// APP应用控制
  BleKeyAPP_OP = 0x060F,
/// 鼾宝震动状态
  BleKeyHANBAO_VIBRATION_STATE = 0x0610,
/// 测量血糖指令, 支持第三方算法的血糖
  BleKeyMEASUREMENT = 0x0611,
  BleKeyWATCH_FACE = 0x0701,
  BleKeyAGPS_FILE = 0x0702,
  BleKeyFONT_FILE = 0x0703,
  BleKeyCONTACT = 0x0704,
  BleKeyUI_FILE = 0x0705,
  BleKeyMEDIA_FILE = 0x0706,
  BleKeyLANGUAGE_FILE = 0x0707,
/// BrandInfo传输协议(关联蓝牙名和logo)
  BleKeyBRAND_INFO_FILE = 0x0708,
/// 发送二维码到设备
  BleKeyQRCode = 0x0709,
/// 第三方应用的通信
  BleKeyTHIRD_PARTY_DATA = 0x070A,
/// 发送二维码到设备
  BleKeyQRCode2 = 0x070B,
/// 自定义logo
  BleKeyCUSTOM_LOGO = 0x070C,
/// OTA固件
  BleKeyOTA_FILE = 0x070D,
/// gps固件
  BleKeyGPS_FIRMWARE_FILE = 0x070E,
/// 通讯录排序协议
  BleKeyCONTACT_SORT = 0x070F,
/// 导航图片
  BleKeyNAVI_IMAGE = 0x0710,
/// 血压标定
  BleKeyBLOOD_PRESSURE_CALIBRATION = 0x025B,
/// 气压标定
  BleKeyAIR_PRESSURE_CALIBRATION = 0x025C,
/// app文件
  BleKeyAPP_FILE = 0x0711,
/// app文件
  BleKeyWORKOUT3 = 0x0523,
  BleKeyNONE = 0xffff,
};

typedef SWIFT_ENUM(NSInteger, BleKeyFlag, open) {
  BleKeyFlagUPDATE = 0x00,
  BleKeyFlagREAD = 0x10,
  BleKeyFlagREAD_CONTINUE = 0x11,
  BleKeyFlagCREATE = 0x20,
  BleKeyFlagDELETE = 0x30,
  BleKeyFlagRESET = 0x40,
  BleKeyFlagNONE = 0xff,
};


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit22BleLanguagePackVersion")
@interface BleLanguagePackVersion : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleLocation")
@interface BleLocation : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleLogText")
@interface BleLogText : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleLoveTap")
@interface BleLoveTap : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleLoveTapUser")
@interface BleLoveTapUser : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleMatchClassicSettings")
@interface BleMatchClassicSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleMatchLog")
@interface BleMatchLog : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 比赛事件2
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit12BleMatchLog2")
@interface BleMatchLog2 : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleMatchPeriod")
@interface BleMatchPeriod : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 比赛周期2
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleMatchPeriod2")
@interface BleMatchPeriod2 : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 比赛设置球员信息
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleMatchPlayer")
@interface BleMatchPlayer : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 比赛球员设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit22BleMatchPlayerSettings")
@interface BleMatchPlayerSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit19BleMatchProSettings")
@interface BleMatchProSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleMatchRecord")
@interface BleMatchRecord : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 比赛记录2
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleMatchRecord2")
@interface BleMatchRecord2 : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



SWIFT_CLASS("_TtC22SmartWatchCodingBleKit20BleMatchRecordPlayer")
@interface BleMatchRecordPlayer : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 比赛记录团队信息
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleMatchRecordTeam")
@interface BleMatchRecordTeam : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 间歇训练设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit24BleMatchTrainingSettings")
@interface BleMatchTrainingSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 青年赛设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit21BleMatchYouthSettings")
@interface BleMatchYouthSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleMeasurement")
@interface BleMeasurement : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 测量返回的ppg数据
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit17BleMeasurementPPG")
@interface BleMeasurementPPG : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 简化版本的吃药提醒, 药物提醒, 和闹钟类似
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleMedicationAlarm")
@interface BleMedicationAlarm : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 吃药提醒
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit21BleMedicationReminder")
@interface BleMedicationReminder : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 心情数据
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleMindStatus")
@interface BleMindStatus : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 导航图片
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit12BleNaviImage")
@interface BleNaviImage : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleNaviInfo")
@interface BleNaviInfo : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleNewsFeed")
@interface BleNewsFeed : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit20BleNoDisturbSettings")
@interface BleNoDisturbSettings : BleWritable
/// mEnabled -> off or open
/// mBleTimeRange1、2、3 function activation time
/// *** Note **
/// the device is restricted by hardware, currently only mBleTimeRange1 can be used to turn on or off the function
/// *** Note **
@property (nonatomic) NSInteger mEnabled;
@property (nonatomic, strong) BleTimeRange * _Nonnull mBleTimeRange1;
@property (nonatomic, strong) BleTimeRange * _Nonnull mBleTimeRange2;
@property (nonatomic, strong) BleTimeRange * _Nonnull mBleTimeRange3;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleNotificationSettings")
@interface BleNotificationSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit24BleNotificationSettings2")
@interface BleNotificationSettings2 : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BlePackageStatus")
@interface BlePackageStatus : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 手机定位成功返回数据给设备
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BlePhoneGPSSport")
@interface BlePhoneGPSSport : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BlePrayerTimes")
@interface BlePrayerTimes : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BlePressure")
@interface BlePressure : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit28BlePressureTimingMeasurement")
@interface BlePressureTimingMeasurement : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleQRcodeList")
@interface BleQRcodeList : BleWritable
@end


/// 朝拜设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16BleQiblaSettings")
@interface BleQiblaSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleQrcode2")
@interface BleQrcode2 : BleWritable
@property (nonatomic) NSInteger mId;
@property (nonatomic, copy) NSString * _Nonnull mTitle;
@property (nonatomic, copy) NSData * _Nonnull mQRData;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 酒精浓度检测设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit8BleRange")
@interface BleRange : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



/// APP控制设备进入心率，血压，血氧，压力测量模式
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit22BleRealTimeMeasurement")
@interface BleRealTimeMeasurement : BleWritable
@property (nonatomic) NSInteger mHRSwitch;
@property (nonatomic) NSInteger mBOSwitch;
@property (nonatomic) NSInteger mBPSwitch;
@property (nonatomic) NSInteger mStressSwitch;
/// 测量状态, 0：测量成功/结果，1：测量停止/失败，2：测试开始
@property (nonatomic) NSInteger mState;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleRecordPacket")
@interface BleRecordPacket : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 铃声和震动设置
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit24BleRingVibrationSettings")
@interface BleRingVibrationSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleSDCardInfo")
@interface BleSDCardInfo : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleSOSSettings")
@interface BleSOSSettings : BleWritable
/// SOS开关, 0:关闭;  1:开启
@property (nonatomic) NSInteger mEnabled;
/// 电话号码
@property (nonatomic, copy) NSString * _Nonnull mPhone;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleScanner")
@interface BleScanner : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

@interface BleScanner (SWIFT_EXTENSION(SmartWatchCodingBleKit)) <CBCentralManagerDelegate>
- (void)centralManagerDidUpdateState:(CBCentralManager * _Nonnull)central;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDiscoverPeripheral:(CBPeripheral * _Nonnull)peripheral advertisementData:(NSDictionary<NSString *, id> * _Nonnull)advertisementData RSSI:(NSNumber * _Nonnull)RSSI;
- (void)centralManager:(CBCentralManager * _Nonnull)central didConnectPeripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)centralManager:(CBCentralManager * _Nonnull)central didFailToConnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didDisconnectPeripheral:(CBPeripheral * _Nonnull)peripheral error:(NSError * _Nullable)error;
- (void)centralManager:(CBCentralManager * _Nonnull)central didUpdateANCSAuthorizationForPeripheral:(CBPeripheral * _Nonnull)peripheral SWIFT_AVAILABILITY(ios,introduced=13.0);
@end


/// 不支持[BleConnector.sendArray]，所以不能一次创建多个，也不能执行重置操作，
/// 也不支持读取操作。
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleSchedule")
@interface BleSchedule : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit24BleSedentarinessSettings")
@interface BleSedentarinessSettings : BleWritable
/// 初始化值 10:00～21:00
@property (nonatomic) NSInteger mEnabled;
@property (nonatomic) NSInteger mRepeat;
@property (nonatomic) NSInteger mStartHour;
@property (nonatomic) NSInteger mStartMinute;
@property (nonatomic) NSInteger mEndHour;
@property (nonatomic) NSInteger mEndMinute;
@property (nonatomic) NSInteger mInterval;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleSettingWatchPassword")
@interface BleSettingWatchPassword : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit8BleSleep")
@interface BleSleep : BleReadable <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit26BleSleepMonitoringSettings")
@interface BleSleepMonitoringSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 睡眠质量数据
/// 部分设备不支持本地计算睡眠数据，
/// 需要通过App同步设备数据后，
/// 计算睡眠数据（可参考 BleSleep.analyseSleep 和 BleSleep.getSleepStatusDuration 方法），
/// 然后将这些数据回传给设备
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleSleepQuality")
@interface BleSleepQuality : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleSosCallLog")
@interface BleSosCallLog : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class BleSosItem;

SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleSosContact")
@interface BleSosContact : BleWritable
/// 最大五个
@property (nonatomic, copy) NSArray<BleSosItem *> * _Nonnull mList;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleSosItem")
@interface BleSosItem : BleWritable
@property (nonatomic) NSInteger mEnabled;
@property (nonatomic, copy) NSString * _Nonnull mPhone;
@property (nonatomic, copy) NSString * _Nonnull mName;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit22BleStandbyWatchFaceSet")
@interface BleStandbyWatchFaceSet : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit8BleStock")
@interface BleStock : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleTemperature")
@interface BleTemperature : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleTemperatureDetecting")
@interface BleTemperatureDetecting : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit17BleThirdPartyData")
@interface BleThirdPartyData : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit7BleTime")
@interface BleTime : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit12BleTimeRange")
@interface BleTimeRange : BleWritable
@property (nonatomic) NSInteger mEnabled;
@property (nonatomic) NSInteger mStartHour;
@property (nonatomic) NSInteger mStartMinute;
@property (nonatomic) NSInteger mEndHour;
@property (nonatomic) NSInteger mEndMinute;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleTimeZone")
@interface BleTimeZone : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleUserProfile")
@interface BleUserProfile : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleVersion")
@interface BleVersion : BleReadable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit8BleVoice")
@interface BleVoice : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleWashSettings")
@interface BleWashSettings : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit15BleWatchFaceBin")
@interface BleWatchFaceBin : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit26BleWatchFaceBinElementInfo")
@interface BleWatchFaceBinElementInfo : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit23BleWatchFaceBinToHeader")
@interface BleWatchFaceBinToHeader : BleWritable
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit14BleWatchFaceId")
@interface BleWatchFaceId : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// 某些设备支持多个外置表盘，即手表表盘个数不是通常的x + 1，而是x + y + z，其中：
/// x为BLE_WATCHFACE_TYPE_BUILTIN个数，y为BLE_WATCHFACE_TYPE_CLOUDY个数，z为BLE_WATCHFACE_TYPE_CUSTOM个数。
/// 这个指令用于标记是哪种表盘的第几个表盘。
/// 当BleKeyFlag为BLE_KEY_FLAG_READ时：查询手表当前正在使用的是哪种表盘的第几个表盘
/// 当BleKeyFlag为BLE_KEY_FLAG_CREATE时：APP接下来要发送的表盘是哪种表盘的第几个表盘（type不会是BLE_WATCHFACE_TYPE_BUILTIN）
/// 当BleKeyFlag为BLE_KEY_FLAG_UPDATE时：APP命令切换至的表盘是哪种表盘的第几个表盘
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit17BleWatchFaceIndex")
@interface BleWatchFaceIndex : BleWritable
/// 表盘类型, 参考BleWatchFaceType枚举值
@property (nonatomic) NSInteger mType;
/// 表盘索引
@property (nonatomic) NSInteger mIndex;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleWeather")
@interface BleWeather : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleWeather2")
@interface BleWeather2 : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleWeatherForecast")
@interface BleWeatherForecast : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit19BleWeatherForecast2")
@interface BleWeatherForecast2 : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit18BleWeatherRealtime")
@interface BleWeatherRealtime : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit19BleWeatherRealtime2")
@interface BleWeatherRealtime2 : BleWritable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit10BleWorkOut")
@interface BleWorkOut : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleWorkOut2")
@interface BleWorkOut2 : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit11BleWorkOut3")
@interface BleWorkOut3 : BleReadable
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC22SmartWatchCodingBleKit13BleWorldClock")
@interface BleWorldClock : BleIdObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



SWIFT_CLASS("_TtC22SmartWatchCodingBleKit30JLFirmwareRepairBleDeviceModel")
@interface JLFirmwareRepairBleDeviceModel : NSObject
- (nonnull instancetype)init:(CBPeripheral * _Nonnull)peripheral :(NSDictionary<NSString *, id> * _Nonnull)advertisementData :(NSNumber * _Nonnull)RSSI :(NSString * _Nonnull)flag OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SMFirmwareOTAProgressModel;

/// 固件OTA进度回调
SWIFT_PROTOCOL("_TtP22SmartWatchCodingBleKit29SMFirmwareOTAProgressDelegate_")
@protocol SMFirmwareOTAProgressDelegate
/// 回调参数
/// \param method 方法, 目前是固定值 “onOTAProgress”
///
/// \param argModel OTA进度和类型参数
///
- (void)bleConnectorInvokeMethod:(NSString * _Nonnull)method :(SMFirmwareOTAProgressModel * _Nonnull)argModel;
@end


/// 针对杰理设备的OTA类文件
SWIFT_CLASS("_TtC22SmartWatchCodingBleKit26JLFirmwareUpgradeViewModel")
@interface JLFirmwareUpgradeViewModel : NSObject <SMFirmwareOTAProgressDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)bleConnectorInvokeMethod:(NSString * _Nonnull)method :(SMFirmwareOTAProgressModel * _Nonnull)argModel;
@end




SWIFT_CLASS("_TtC22SmartWatchCodingBleKit26SMFirmwareOTAProgressModel")
@interface SMFirmwareOTAProgressModel : NSObject
/// OTA状态回调, 具体参照 OTAStatus 枚举状态取值
@property (nonatomic) NSInteger otaStatus;
/// 进度信息
@property (nonatomic) double progress;
/// OTA传输过程中的信息, 主要用于排查错误
@property (nonatomic, copy) NSString * _Nonnull info;
/// 错误信息
@property (nonatomic, copy) NSString * _Nonnull error;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end








SWIFT_CLASS("_TtC22SmartWatchCodingBleKit16WatchFaceBuilder")
@interface WatchFaceBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
